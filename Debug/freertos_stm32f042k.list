
freertos_stm32f042k.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004520  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080045e0  080045e0  000145e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004714  08004714  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004714  08004714  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004714  08004714  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004714  08004714  00014714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004718  08004718  00014718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800471c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ef4  20000070  0800478c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f64  0800478c  00020f64  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156e2  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c2d  00000000  00000000  0003577a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001258  00000000  00000000  000383a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001100  00000000  00000000  00039600  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016eec  00000000  00000000  0003a700  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e803  00000000  00000000  000515ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080e5c  00000000  00000000  0005fdef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0c4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004444  00000000  00000000  000e0cc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080045c8 	.word	0x080045c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080045c8 	.word	0x080045c8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook(void);
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000224:	46c0      	nop			; (mov r8, r8)
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}

0800022a <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 800022a:	b580      	push	{r7, lr}
 800022c:	af00      	add	r7, sp, #0
}
 800022e:	46c0      	nop			; (mov r8, r8)
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fa83 	bl	8000744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f84d 	bl	80002dc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* -1- Enable GPIO Clock (to be able to program the configuration registers) */
  LED3_GPIO_CLK_ENABLE();
 8000242:	4b1d      	ldr	r3, [pc, #116]	; (80002b8 <main+0x84>)
 8000244:	695a      	ldr	r2, [r3, #20]
 8000246:	4b1c      	ldr	r3, [pc, #112]	; (80002b8 <main+0x84>)
 8000248:	2180      	movs	r1, #128	; 0x80
 800024a:	02c9      	lsls	r1, r1, #11
 800024c:	430a      	orrs	r2, r1
 800024e:	615a      	str	r2, [r3, #20]
 8000250:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <main+0x84>)
 8000252:	695a      	ldr	r2, [r3, #20]
 8000254:	2380      	movs	r3, #128	; 0x80
 8000256:	02db      	lsls	r3, r3, #11
 8000258:	4013      	ands	r3, r2
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	687b      	ldr	r3, [r7, #4]

  /* -2- Configure IO in output push-pull mode to drive external LEDs */
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800025e:	4b17      	ldr	r3, [pc, #92]	; (80002bc <main+0x88>)
 8000260:	2201      	movs	r2, #1
 8000262:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8000264:	4b15      	ldr	r3, [pc, #84]	; (80002bc <main+0x88>)
 8000266:	2201      	movs	r2, #1
 8000268:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800026a:	4b14      	ldr	r3, [pc, #80]	; (80002bc <main+0x88>)
 800026c:	2203      	movs	r2, #3
 800026e:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin = LED3_PIN;
 8000270:	4b12      	ldr	r3, [pc, #72]	; (80002bc <main+0x88>)
 8000272:	2208      	movs	r2, #8
 8000274:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(LED3_GPIO_PORT, &GPIO_InitStruct);
 8000276:	4b11      	ldr	r3, [pc, #68]	; (80002bc <main+0x88>)
 8000278:	4a11      	ldr	r2, [pc, #68]	; (80002c0 <main+0x8c>)
 800027a:	0019      	movs	r1, r3
 800027c:	0010      	movs	r0, r2
 800027e:	f000 fb3f 	bl	8000900 <HAL_GPIO_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000282:	f000 f89b 	bl	80003bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000286:	f000 f869 	bl	800035c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800028a:	f001 ff49 	bl	8002120 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinky1 */
  blinky1Handle = osThreadNew(StartBlinkyFirst, NULL, &blinky1_attributes);
 800028e:	4a0d      	ldr	r2, [pc, #52]	; (80002c4 <main+0x90>)
 8000290:	4b0d      	ldr	r3, [pc, #52]	; (80002c8 <main+0x94>)
 8000292:	2100      	movs	r1, #0
 8000294:	0018      	movs	r0, r3
 8000296:	f001 ff9d 	bl	80021d4 <osThreadNew>
 800029a:	0002      	movs	r2, r0
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <main+0x98>)
 800029e:	601a      	str	r2, [r3, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(BlinkySecond, NULL, &myTask02_attributes);
 80002a0:	4a0b      	ldr	r2, [pc, #44]	; (80002d0 <main+0x9c>)
 80002a2:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <main+0xa0>)
 80002a4:	2100      	movs	r1, #0
 80002a6:	0018      	movs	r0, r3
 80002a8:	f001 ff94 	bl	80021d4 <osThreadNew>
 80002ac:	0002      	movs	r2, r0
 80002ae:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <main+0xa4>)
 80002b0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002b2:	f001 ff61 	bl	8002178 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b6:	e7fe      	b.n	80002b6 <main+0x82>
 80002b8:	40021000 	.word	0x40021000
 80002bc:	2000008c 	.word	0x2000008c
 80002c0:	48000400 	.word	0x48000400
 80002c4:	0800462c 	.word	0x0800462c
 80002c8:	08000409 	.word	0x08000409
 80002cc:	20000e58 	.word	0x20000e58
 80002d0:	08004650 	.word	0x08004650
 80002d4:	0800042d 	.word	0x0800042d
 80002d8:	20000e54 	.word	0x20000e54

080002dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002dc:	b590      	push	{r4, r7, lr}
 80002de:	b093      	sub	sp, #76	; 0x4c
 80002e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e2:	2414      	movs	r4, #20
 80002e4:	193b      	adds	r3, r7, r4
 80002e6:	0018      	movs	r0, r3
 80002e8:	2334      	movs	r3, #52	; 0x34
 80002ea:	001a      	movs	r2, r3
 80002ec:	2100      	movs	r1, #0
 80002ee:	f004 f832 	bl	8004356 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	0018      	movs	r0, r3
 80002f6:	2310      	movs	r3, #16
 80002f8:	001a      	movs	r2, r3
 80002fa:	2100      	movs	r1, #0
 80002fc:	f004 f82b 	bl	8004356 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000300:	0021      	movs	r1, r4
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2202      	movs	r2, #2
 8000306:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2201      	movs	r2, #1
 800030c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2210      	movs	r2, #16
 8000312:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2200      	movs	r2, #0
 8000318:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	187b      	adds	r3, r7, r1
 800031c:	0018      	movs	r0, r3
 800031e:	f000 fc73 	bl	8000c08 <HAL_RCC_OscConfig>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000326:	f000 f8a5 	bl	8000474 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2207      	movs	r2, #7
 800032e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2200      	movs	r2, #0
 8000334:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2200      	movs	r2, #0
 8000340:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2100      	movs	r1, #0
 8000346:	0018      	movs	r0, r3
 8000348:	f000 ffe4 	bl	8001314 <HAL_RCC_ClockConfig>
 800034c:	1e03      	subs	r3, r0, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000350:	f000 f890 	bl	8000474 <Error_Handler>
  }
}
 8000354:	46c0      	nop			; (mov r8, r8)
 8000356:	46bd      	mov	sp, r7
 8000358:	b013      	add	sp, #76	; 0x4c
 800035a:	bd90      	pop	{r4, r7, pc}

0800035c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000360:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <MX_USART2_UART_Init+0x58>)
 8000362:	4a15      	ldr	r2, [pc, #84]	; (80003b8 <MX_USART2_UART_Init+0x5c>)
 8000364:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000366:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <MX_USART2_UART_Init+0x58>)
 8000368:	2296      	movs	r2, #150	; 0x96
 800036a:	0212      	lsls	r2, r2, #8
 800036c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800036e:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <MX_USART2_UART_Init+0x58>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000374:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <MX_USART2_UART_Init+0x58>)
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <MX_USART2_UART_Init+0x58>)
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <MX_USART2_UART_Init+0x58>)
 8000382:	220c      	movs	r2, #12
 8000384:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <MX_USART2_UART_Init+0x58>)
 8000388:	2200      	movs	r2, #0
 800038a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800038c:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <MX_USART2_UART_Init+0x58>)
 800038e:	2200      	movs	r2, #0
 8000390:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <MX_USART2_UART_Init+0x58>)
 8000394:	2200      	movs	r2, #0
 8000396:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <MX_USART2_UART_Init+0x58>)
 800039a:	2200      	movs	r2, #0
 800039c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800039e:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <MX_USART2_UART_Init+0x58>)
 80003a0:	0018      	movs	r0, r3
 80003a2:	f001 fb6b 	bl	8001a7c <HAL_UART_Init>
 80003a6:	1e03      	subs	r3, r0, #0
 80003a8:	d001      	beq.n	80003ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003aa:	f000 f863 	bl	8000474 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000e5c 	.word	0x20000e5c
 80003b8:	40004400 	.word	0x40004400

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003c2:	4b10      	ldr	r3, [pc, #64]	; (8000404 <MX_GPIO_Init+0x48>)
 80003c4:	695a      	ldr	r2, [r3, #20]
 80003c6:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <MX_GPIO_Init+0x48>)
 80003c8:	2180      	movs	r1, #128	; 0x80
 80003ca:	03c9      	lsls	r1, r1, #15
 80003cc:	430a      	orrs	r2, r1
 80003ce:	615a      	str	r2, [r3, #20]
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <MX_GPIO_Init+0x48>)
 80003d2:	695a      	ldr	r2, [r3, #20]
 80003d4:	2380      	movs	r3, #128	; 0x80
 80003d6:	03db      	lsls	r3, r3, #15
 80003d8:	4013      	ands	r3, r2
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003de:	4b09      	ldr	r3, [pc, #36]	; (8000404 <MX_GPIO_Init+0x48>)
 80003e0:	695a      	ldr	r2, [r3, #20]
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <MX_GPIO_Init+0x48>)
 80003e4:	2180      	movs	r1, #128	; 0x80
 80003e6:	0289      	lsls	r1, r1, #10
 80003e8:	430a      	orrs	r2, r1
 80003ea:	615a      	str	r2, [r3, #20]
 80003ec:	4b05      	ldr	r3, [pc, #20]	; (8000404 <MX_GPIO_Init+0x48>)
 80003ee:	695a      	ldr	r2, [r3, #20]
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	029b      	lsls	r3, r3, #10
 80003f4:	4013      	ands	r3, r2
 80003f6:	603b      	str	r3, [r7, #0]
 80003f8:	683b      	ldr	r3, [r7, #0]

}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	b002      	add	sp, #8
 8000400:	bd80      	pop	{r7, pc}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	40021000 	.word	0x40021000

08000408 <StartBlinkyFirst>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlinkyFirst */
void StartBlinkyFirst(void *argument)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED3_GPIO_PORT, LED3_PIN);
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <StartBlinkyFirst+0x20>)
 8000412:	2108      	movs	r1, #8
 8000414:	0018      	movs	r0, r3
 8000416:	f000 fbdb 	bl	8000bd0 <HAL_GPIO_TogglePin>
	osDelay(500);
 800041a:	23fa      	movs	r3, #250	; 0xfa
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	0018      	movs	r0, r3
 8000420:	f001 ff80 	bl	8002324 <osDelay>
	HAL_GPIO_TogglePin(LED3_GPIO_PORT, LED3_PIN);
 8000424:	e7f4      	b.n	8000410 <StartBlinkyFirst+0x8>
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	48000400 	.word	0x48000400

0800042c <BlinkySecond>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BlinkySecond */
void BlinkySecond(void *argument)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BlinkySecond */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED3_GPIO_PORT, LED3_PIN);
 8000434:	4b04      	ldr	r3, [pc, #16]	; (8000448 <BlinkySecond+0x1c>)
 8000436:	2108      	movs	r1, #8
 8000438:	0018      	movs	r0, r3
 800043a:	f000 fbc9 	bl	8000bd0 <HAL_GPIO_TogglePin>
    osDelay(950);
 800043e:	4b03      	ldr	r3, [pc, #12]	; (800044c <BlinkySecond+0x20>)
 8000440:	0018      	movs	r0, r3
 8000442:	f001 ff6f 	bl	8002324 <osDelay>
	HAL_GPIO_TogglePin(LED3_GPIO_PORT, LED3_PIN);
 8000446:	e7f5      	b.n	8000434 <BlinkySecond+0x8>
 8000448:	48000400 	.word	0x48000400
 800044c:	000003b6 	.word	0x000003b6

08000450 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a04      	ldr	r2, [pc, #16]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d101      	bne.n	8000466 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000462:	f000 f983 	bl	800076c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b002      	add	sp, #8
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	40014800 	.word	0x40014800

08000474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000478:	46c0      	nop			; (mov r8, r8)
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
	...

08000480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000486:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <HAL_MspInit+0x44>)
 8000488:	699a      	ldr	r2, [r3, #24]
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <HAL_MspInit+0x44>)
 800048c:	2101      	movs	r1, #1
 800048e:	430a      	orrs	r2, r1
 8000490:	619a      	str	r2, [r3, #24]
 8000492:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <HAL_MspInit+0x44>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	2201      	movs	r2, #1
 8000498:	4013      	ands	r3, r2
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049e:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <HAL_MspInit+0x44>)
 80004a0:	69da      	ldr	r2, [r3, #28]
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <HAL_MspInit+0x44>)
 80004a4:	2180      	movs	r1, #128	; 0x80
 80004a6:	0549      	lsls	r1, r1, #21
 80004a8:	430a      	orrs	r2, r1
 80004aa:	61da      	str	r2, [r3, #28]
 80004ac:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <HAL_MspInit+0x44>)
 80004ae:	69da      	ldr	r2, [r3, #28]
 80004b0:	2380      	movs	r3, #128	; 0x80
 80004b2:	055b      	lsls	r3, r3, #21
 80004b4:	4013      	ands	r3, r2
 80004b6:	603b      	str	r3, [r7, #0]
 80004b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	b002      	add	sp, #8
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	40021000 	.word	0x40021000

080004c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	; 0x28
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d0:	2314      	movs	r3, #20
 80004d2:	18fb      	adds	r3, r7, r3
 80004d4:	0018      	movs	r0, r3
 80004d6:	2314      	movs	r3, #20
 80004d8:	001a      	movs	r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	f003 ff3b 	bl	8004356 <memset>
  if(huart->Instance==USART2)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a1c      	ldr	r2, [pc, #112]	; (8000558 <HAL_UART_MspInit+0x90>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d132      	bne.n	8000550 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004ea:	4b1c      	ldr	r3, [pc, #112]	; (800055c <HAL_UART_MspInit+0x94>)
 80004ec:	69da      	ldr	r2, [r3, #28]
 80004ee:	4b1b      	ldr	r3, [pc, #108]	; (800055c <HAL_UART_MspInit+0x94>)
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	0289      	lsls	r1, r1, #10
 80004f4:	430a      	orrs	r2, r1
 80004f6:	61da      	str	r2, [r3, #28]
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <HAL_UART_MspInit+0x94>)
 80004fa:	69da      	ldr	r2, [r3, #28]
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	029b      	lsls	r3, r3, #10
 8000500:	4013      	ands	r3, r2
 8000502:	613b      	str	r3, [r7, #16]
 8000504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <HAL_UART_MspInit+0x94>)
 8000508:	695a      	ldr	r2, [r3, #20]
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <HAL_UART_MspInit+0x94>)
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	0289      	lsls	r1, r1, #10
 8000510:	430a      	orrs	r2, r1
 8000512:	615a      	str	r2, [r3, #20]
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <HAL_UART_MspInit+0x94>)
 8000516:	695a      	ldr	r2, [r3, #20]
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	029b      	lsls	r3, r3, #10
 800051c:	4013      	ands	r3, r2
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000522:	2114      	movs	r1, #20
 8000524:	187b      	adds	r3, r7, r1
 8000526:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <HAL_UART_MspInit+0x98>)
 8000528:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2202      	movs	r2, #2
 800052e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2203      	movs	r2, #3
 800053a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2201      	movs	r2, #1
 8000540:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000542:	187a      	adds	r2, r7, r1
 8000544:	2390      	movs	r3, #144	; 0x90
 8000546:	05db      	lsls	r3, r3, #23
 8000548:	0011      	movs	r1, r2
 800054a:	0018      	movs	r0, r3
 800054c:	f000 f9d8 	bl	8000900 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	b00a      	add	sp, #40	; 0x28
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40004400 	.word	0x40004400
 800055c:	40021000 	.word	0x40021000
 8000560:	00008004 	.word	0x00008004

08000564 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	; 0x28
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2200      	movs	r2, #0
 8000578:	0019      	movs	r1, r3
 800057a:	2016      	movs	r0, #22
 800057c:	f000 f99a 	bl	80008b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000580:	2016      	movs	r0, #22
 8000582:	f000 f9ac 	bl	80008de <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000586:	4b21      	ldr	r3, [pc, #132]	; (800060c <HAL_InitTick+0xa8>)
 8000588:	699a      	ldr	r2, [r3, #24]
 800058a:	4b20      	ldr	r3, [pc, #128]	; (800060c <HAL_InitTick+0xa8>)
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	02c9      	lsls	r1, r1, #11
 8000590:	430a      	orrs	r2, r1
 8000592:	619a      	str	r2, [r3, #24]
 8000594:	4b1d      	ldr	r3, [pc, #116]	; (800060c <HAL_InitTick+0xa8>)
 8000596:	699a      	ldr	r2, [r3, #24]
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	02db      	lsls	r3, r3, #11
 800059c:	4013      	ands	r3, r2
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005a2:	230c      	movs	r3, #12
 80005a4:	18fa      	adds	r2, r7, r3
 80005a6:	2310      	movs	r3, #16
 80005a8:	18fb      	adds	r3, r7, r3
 80005aa:	0011      	movs	r1, r2
 80005ac:	0018      	movs	r0, r3
 80005ae:	f001 f829 	bl	8001604 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005b2:	f001 f811 	bl	80015d8 <HAL_RCC_GetPCLK1Freq>
 80005b6:	0003      	movs	r3, r0
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80005ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005bc:	4914      	ldr	r1, [pc, #80]	; (8000610 <HAL_InitTick+0xac>)
 80005be:	0018      	movs	r0, r3
 80005c0:	f7ff fda2 	bl	8000108 <__udivsi3>
 80005c4:	0003      	movs	r3, r0
 80005c6:	3b01      	subs	r3, #1
 80005c8:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <HAL_InitTick+0xb0>)
 80005cc:	4a12      	ldr	r2, [pc, #72]	; (8000618 <HAL_InitTick+0xb4>)
 80005ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000 / 1000) - 1;
 80005d0:	4b10      	ldr	r3, [pc, #64]	; (8000614 <HAL_InitTick+0xb0>)
 80005d2:	4a12      	ldr	r2, [pc, #72]	; (800061c <HAL_InitTick+0xb8>)
 80005d4:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <HAL_InitTick+0xb0>)
 80005d8:	6a3a      	ldr	r2, [r7, #32]
 80005da:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 80005dc:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <HAL_InitTick+0xb0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <HAL_InitTick+0xb0>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <HAL_InitTick+0xb0>)
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 f834 	bl	8001658 <HAL_TIM_Base_Init>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d105      	bne.n	8000600 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <HAL_InitTick+0xb0>)
 80005f6:	0018      	movs	r0, r3
 80005f8:	f001 f862 	bl	80016c0 <HAL_TIM_Base_Start_IT>
 80005fc:	0003      	movs	r3, r0
 80005fe:	e000      	b.n	8000602 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000600:	2301      	movs	r3, #1
}
 8000602:	0018      	movs	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	b00a      	add	sp, #40	; 0x28
 8000608:	bd80      	pop	{r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	40021000 	.word	0x40021000
 8000610:	000f4240 	.word	0x000f4240
 8000614:	20000edc 	.word	0x20000edc
 8000618:	40014800 	.word	0x40014800
 800061c:	000003e7 	.word	0x000003e7

08000620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000624:	46c0      	nop			; (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <HardFault_Handler+0x4>

08000630 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000634:	4b03      	ldr	r3, [pc, #12]	; (8000644 <TIM17_IRQHandler+0x14>)
 8000636:	0018      	movs	r0, r3
 8000638:	f001 f864 	bl	8001704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	20000edc 	.word	0x20000edc

08000648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000650:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <_sbrk+0x5c>)
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <_sbrk+0x60>)
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <_sbrk+0x64>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d102      	bne.n	800066a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <_sbrk+0x64>)
 8000666:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <_sbrk+0x68>)
 8000668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <_sbrk+0x64>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	18d3      	adds	r3, r2, r3
 8000672:	693a      	ldr	r2, [r7, #16]
 8000674:	429a      	cmp	r2, r3
 8000676:	d207      	bcs.n	8000688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000678:	f003 fe26 	bl	80042c8 <__errno>
 800067c:	0003      	movs	r3, r0
 800067e:	220c      	movs	r2, #12
 8000680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000682:	2301      	movs	r3, #1
 8000684:	425b      	negs	r3, r3
 8000686:	e009      	b.n	800069c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <_sbrk+0x64>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800068e:	4b07      	ldr	r3, [pc, #28]	; (80006ac <_sbrk+0x64>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	18d2      	adds	r2, r2, r3
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <_sbrk+0x64>)
 8000698:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800069a:	68fb      	ldr	r3, [r7, #12]
}
 800069c:	0018      	movs	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	b006      	add	sp, #24
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20001800 	.word	0x20001800
 80006a8:	00000400 	.word	0x00000400
 80006ac:	200000a0 	.word	0x200000a0
 80006b0:	20000f68 	.word	0x20000f68

080006b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006c0:	4813      	ldr	r0, [pc, #76]	; (8000710 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006c2:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80006c4:	4813      	ldr	r0, [pc, #76]	; (8000714 <LoopForever+0x6>)
    LDR R1, [R0]
 80006c6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80006c8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80006ca:	4a13      	ldr	r2, [pc, #76]	; (8000718 <LoopForever+0xa>)
    CMP R1, R2
 80006cc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80006ce:	d105      	bne.n	80006dc <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80006d0:	4812      	ldr	r0, [pc, #72]	; (800071c <LoopForever+0xe>)
    LDR R1,=0x00000001
 80006d2:	4913      	ldr	r1, [pc, #76]	; (8000720 <LoopForever+0x12>)
    STR R1, [R0]
 80006d4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80006d6:	4813      	ldr	r0, [pc, #76]	; (8000724 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80006d8:	4913      	ldr	r1, [pc, #76]	; (8000728 <LoopForever+0x1a>)
    STR R1, [R0]
 80006da:	6001      	str	r1, [r0, #0]

080006dc <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006dc:	4813      	ldr	r0, [pc, #76]	; (800072c <LoopForever+0x1e>)
  ldr r1, =_edata
 80006de:	4914      	ldr	r1, [pc, #80]	; (8000730 <LoopForever+0x22>)
  ldr r2, =_sidata
 80006e0:	4a14      	ldr	r2, [pc, #80]	; (8000734 <LoopForever+0x26>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e4:	e002      	b.n	80006ec <LoopCopyDataInit>

080006e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ea:	3304      	adds	r3, #4

080006ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f0:	d3f9      	bcc.n	80006e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f2:	4a11      	ldr	r2, [pc, #68]	; (8000738 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80006f4:	4c11      	ldr	r4, [pc, #68]	; (800073c <LoopForever+0x2e>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f8:	e001      	b.n	80006fe <LoopFillZerobss>

080006fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006fc:	3204      	adds	r2, #4

080006fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000700:	d3fb      	bcc.n	80006fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000702:	f7ff ffd7 	bl	80006b4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000706:	f003 fde5 	bl	80042d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800070a:	f7ff fd93 	bl	8000234 <main>

0800070e <LoopForever>:

LoopForever:
    b LoopForever
 800070e:	e7fe      	b.n	800070e <LoopForever>
  ldr   r0, =_estack
 8000710:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000714:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000718:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800071c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000720:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000724:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000728:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800072c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000730:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000734:	0800471c 	.word	0x0800471c
  ldr r2, =_sbss
 8000738:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800073c:	20000f64 	.word	0x20000f64

08000740 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC1_IRQHandler>
	...

08000744 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <HAL_Init+0x24>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_Init+0x24>)
 800074e:	2110      	movs	r1, #16
 8000750:	430a      	orrs	r2, r1
 8000752:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000754:	2000      	movs	r0, #0
 8000756:	f7ff ff05 	bl	8000564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800075a:	f7ff fe91 	bl	8000480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800075e:	2300      	movs	r3, #0
}
 8000760:	0018      	movs	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	40022000 	.word	0x40022000

0800076c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <HAL_IncTick+0x1c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	001a      	movs	r2, r3
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <HAL_IncTick+0x20>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	18d2      	adds	r2, r2, r3
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <HAL_IncTick+0x20>)
 800077e:	601a      	str	r2, [r3, #0]
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	20000004 	.word	0x20000004
 800078c:	20000f1c 	.word	0x20000f1c

08000790 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  return uwTick;
 8000794:	4b02      	ldr	r3, [pc, #8]	; (80007a0 <HAL_GetTick+0x10>)
 8000796:	681b      	ldr	r3, [r3, #0]
}
 8000798:	0018      	movs	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	20000f1c 	.word	0x20000f1c

080007a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	0002      	movs	r2, r0
 80007ac:	1dfb      	adds	r3, r7, #7
 80007ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007b0:	1dfb      	adds	r3, r7, #7
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b7f      	cmp	r3, #127	; 0x7f
 80007b6:	d809      	bhi.n	80007cc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007b8:	1dfb      	adds	r3, r7, #7
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	001a      	movs	r2, r3
 80007be:	231f      	movs	r3, #31
 80007c0:	401a      	ands	r2, r3
 80007c2:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <__NVIC_EnableIRQ+0x30>)
 80007c4:	2101      	movs	r1, #1
 80007c6:	4091      	lsls	r1, r2
 80007c8:	000a      	movs	r2, r1
 80007ca:	601a      	str	r2, [r3, #0]
  }
}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b002      	add	sp, #8
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	e000e100 	.word	0xe000e100

080007d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	0002      	movs	r2, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007e6:	1dfb      	adds	r3, r7, #7
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b7f      	cmp	r3, #127	; 0x7f
 80007ec:	d828      	bhi.n	8000840 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ee:	4a2f      	ldr	r2, [pc, #188]	; (80008ac <__NVIC_SetPriority+0xd4>)
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	089b      	lsrs	r3, r3, #2
 80007f8:	33c0      	adds	r3, #192	; 0xc0
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	589b      	ldr	r3, [r3, r2]
 80007fe:	1dfa      	adds	r2, r7, #7
 8000800:	7812      	ldrb	r2, [r2, #0]
 8000802:	0011      	movs	r1, r2
 8000804:	2203      	movs	r2, #3
 8000806:	400a      	ands	r2, r1
 8000808:	00d2      	lsls	r2, r2, #3
 800080a:	21ff      	movs	r1, #255	; 0xff
 800080c:	4091      	lsls	r1, r2
 800080e:	000a      	movs	r2, r1
 8000810:	43d2      	mvns	r2, r2
 8000812:	401a      	ands	r2, r3
 8000814:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	019b      	lsls	r3, r3, #6
 800081a:	22ff      	movs	r2, #255	; 0xff
 800081c:	401a      	ands	r2, r3
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	0018      	movs	r0, r3
 8000824:	2303      	movs	r3, #3
 8000826:	4003      	ands	r3, r0
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800082c:	481f      	ldr	r0, [pc, #124]	; (80008ac <__NVIC_SetPriority+0xd4>)
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b25b      	sxtb	r3, r3
 8000834:	089b      	lsrs	r3, r3, #2
 8000836:	430a      	orrs	r2, r1
 8000838:	33c0      	adds	r3, #192	; 0xc0
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800083e:	e031      	b.n	80008a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000840:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <__NVIC_SetPriority+0xd8>)
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	0019      	movs	r1, r3
 8000848:	230f      	movs	r3, #15
 800084a:	400b      	ands	r3, r1
 800084c:	3b08      	subs	r3, #8
 800084e:	089b      	lsrs	r3, r3, #2
 8000850:	3306      	adds	r3, #6
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	18d3      	adds	r3, r2, r3
 8000856:	3304      	adds	r3, #4
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	1dfa      	adds	r2, r7, #7
 800085c:	7812      	ldrb	r2, [r2, #0]
 800085e:	0011      	movs	r1, r2
 8000860:	2203      	movs	r2, #3
 8000862:	400a      	ands	r2, r1
 8000864:	00d2      	lsls	r2, r2, #3
 8000866:	21ff      	movs	r1, #255	; 0xff
 8000868:	4091      	lsls	r1, r2
 800086a:	000a      	movs	r2, r1
 800086c:	43d2      	mvns	r2, r2
 800086e:	401a      	ands	r2, r3
 8000870:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	019b      	lsls	r3, r3, #6
 8000876:	22ff      	movs	r2, #255	; 0xff
 8000878:	401a      	ands	r2, r3
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	0018      	movs	r0, r3
 8000880:	2303      	movs	r3, #3
 8000882:	4003      	ands	r3, r0
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000888:	4809      	ldr	r0, [pc, #36]	; (80008b0 <__NVIC_SetPriority+0xd8>)
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	001c      	movs	r4, r3
 8000890:	230f      	movs	r3, #15
 8000892:	4023      	ands	r3, r4
 8000894:	3b08      	subs	r3, #8
 8000896:	089b      	lsrs	r3, r3, #2
 8000898:	430a      	orrs	r2, r1
 800089a:	3306      	adds	r3, #6
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	18c3      	adds	r3, r0, r3
 80008a0:	3304      	adds	r3, #4
 80008a2:	601a      	str	r2, [r3, #0]
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b003      	add	sp, #12
 80008aa:	bd90      	pop	{r4, r7, pc}
 80008ac:	e000e100 	.word	0xe000e100
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
 80008be:	210f      	movs	r1, #15
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	1c02      	adds	r2, r0, #0
 80008c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b25b      	sxtb	r3, r3
 80008ce:	0011      	movs	r1, r2
 80008d0:	0018      	movs	r0, r3
 80008d2:	f7ff ff81 	bl	80007d8 <__NVIC_SetPriority>
}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	b004      	add	sp, #16
 80008dc:	bd80      	pop	{r7, pc}

080008de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	0002      	movs	r2, r0
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	0018      	movs	r0, r3
 80008f2:	f7ff ff57 	bl	80007a4 <__NVIC_EnableIRQ>
}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b002      	add	sp, #8
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800090e:	e149      	b.n	8000ba4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2101      	movs	r1, #1
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	4091      	lsls	r1, r2
 800091a:	000a      	movs	r2, r1
 800091c:	4013      	ands	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d100      	bne.n	8000928 <HAL_GPIO_Init+0x28>
 8000926:	e13a      	b.n	8000b9e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d00b      	beq.n	8000948 <HAL_GPIO_Init+0x48>
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	2b02      	cmp	r3, #2
 8000936:	d007      	beq.n	8000948 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800093c:	2b11      	cmp	r3, #17
 800093e:	d003      	beq.n	8000948 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	2b12      	cmp	r3, #18
 8000946:	d130      	bne.n	80009aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	2203      	movs	r2, #3
 8000954:	409a      	lsls	r2, r3
 8000956:	0013      	movs	r3, r2
 8000958:	43da      	mvns	r2, r3
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	4013      	ands	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	68da      	ldr	r2, [r3, #12]
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	409a      	lsls	r2, r3
 800096a:	0013      	movs	r3, r2
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	4313      	orrs	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800097e:	2201      	movs	r2, #1
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	409a      	lsls	r2, r3
 8000984:	0013      	movs	r3, r2
 8000986:	43da      	mvns	r2, r3
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	4013      	ands	r3, r2
 800098c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	091b      	lsrs	r3, r3, #4
 8000994:	2201      	movs	r2, #1
 8000996:	401a      	ands	r2, r3
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	409a      	lsls	r2, r3
 800099c:	0013      	movs	r3, r2
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	68db      	ldr	r3, [r3, #12]
 80009ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	2203      	movs	r2, #3
 80009b6:	409a      	lsls	r2, r3
 80009b8:	0013      	movs	r3, r2
 80009ba:	43da      	mvns	r2, r3
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	4013      	ands	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	689a      	ldr	r2, [r3, #8]
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	409a      	lsls	r2, r3
 80009cc:	0013      	movs	r3, r2
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d003      	beq.n	80009ea <HAL_GPIO_Init+0xea>
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	2b12      	cmp	r3, #18
 80009e8:	d123      	bne.n	8000a32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	08da      	lsrs	r2, r3, #3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3208      	adds	r2, #8
 80009f2:	0092      	lsls	r2, r2, #2
 80009f4:	58d3      	ldr	r3, [r2, r3]
 80009f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	2207      	movs	r2, #7
 80009fc:	4013      	ands	r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	220f      	movs	r2, #15
 8000a02:	409a      	lsls	r2, r3
 8000a04:	0013      	movs	r3, r2
 8000a06:	43da      	mvns	r2, r3
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	691a      	ldr	r2, [r3, #16]
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	2107      	movs	r1, #7
 8000a16:	400b      	ands	r3, r1
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	409a      	lsls	r2, r3
 8000a1c:	0013      	movs	r3, r2
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	08da      	lsrs	r2, r3, #3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3208      	adds	r2, #8
 8000a2c:	0092      	lsls	r2, r2, #2
 8000a2e:	6939      	ldr	r1, [r7, #16]
 8000a30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	409a      	lsls	r2, r3
 8000a40:	0013      	movs	r3, r2
 8000a42:	43da      	mvns	r2, r3
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	4013      	ands	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	2203      	movs	r2, #3
 8000a50:	401a      	ands	r2, r3
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	409a      	lsls	r2, r3
 8000a58:	0013      	movs	r3, r2
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685a      	ldr	r2, [r3, #4]
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	055b      	lsls	r3, r3, #21
 8000a6e:	4013      	ands	r3, r2
 8000a70:	d100      	bne.n	8000a74 <HAL_GPIO_Init+0x174>
 8000a72:	e094      	b.n	8000b9e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a74:	4b51      	ldr	r3, [pc, #324]	; (8000bbc <HAL_GPIO_Init+0x2bc>)
 8000a76:	699a      	ldr	r2, [r3, #24]
 8000a78:	4b50      	ldr	r3, [pc, #320]	; (8000bbc <HAL_GPIO_Init+0x2bc>)
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	619a      	str	r2, [r3, #24]
 8000a80:	4b4e      	ldr	r3, [pc, #312]	; (8000bbc <HAL_GPIO_Init+0x2bc>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	2201      	movs	r2, #1
 8000a86:	4013      	ands	r3, r2
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a8c:	4a4c      	ldr	r2, [pc, #304]	; (8000bc0 <HAL_GPIO_Init+0x2c0>)
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	089b      	lsrs	r3, r3, #2
 8000a92:	3302      	adds	r3, #2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	589b      	ldr	r3, [r3, r2]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	220f      	movs	r2, #15
 8000aa4:	409a      	lsls	r2, r3
 8000aa6:	0013      	movs	r3, r2
 8000aa8:	43da      	mvns	r2, r3
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	4013      	ands	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	2390      	movs	r3, #144	; 0x90
 8000ab4:	05db      	lsls	r3, r3, #23
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d00d      	beq.n	8000ad6 <HAL_GPIO_Init+0x1d6>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a41      	ldr	r2, [pc, #260]	; (8000bc4 <HAL_GPIO_Init+0x2c4>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d007      	beq.n	8000ad2 <HAL_GPIO_Init+0x1d2>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a40      	ldr	r2, [pc, #256]	; (8000bc8 <HAL_GPIO_Init+0x2c8>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d101      	bne.n	8000ace <HAL_GPIO_Init+0x1ce>
 8000aca:	2302      	movs	r3, #2
 8000acc:	e004      	b.n	8000ad8 <HAL_GPIO_Init+0x1d8>
 8000ace:	2305      	movs	r3, #5
 8000ad0:	e002      	b.n	8000ad8 <HAL_GPIO_Init+0x1d8>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e000      	b.n	8000ad8 <HAL_GPIO_Init+0x1d8>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	697a      	ldr	r2, [r7, #20]
 8000ada:	2103      	movs	r1, #3
 8000adc:	400a      	ands	r2, r1
 8000ade:	0092      	lsls	r2, r2, #2
 8000ae0:	4093      	lsls	r3, r2
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ae8:	4935      	ldr	r1, [pc, #212]	; (8000bc0 <HAL_GPIO_Init+0x2c0>)
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	089b      	lsrs	r3, r3, #2
 8000aee:	3302      	adds	r3, #2
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000af6:	4b35      	ldr	r3, [pc, #212]	; (8000bcc <HAL_GPIO_Init+0x2cc>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	43da      	mvns	r2, r3
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	4013      	ands	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685a      	ldr	r2, [r3, #4]
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	025b      	lsls	r3, r3, #9
 8000b0e:	4013      	ands	r3, r2
 8000b10:	d003      	beq.n	8000b1a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b1a:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <HAL_GPIO_Init+0x2cc>)
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000b20:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <HAL_GPIO_Init+0x2cc>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	43da      	mvns	r2, r3
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685a      	ldr	r2, [r3, #4]
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	029b      	lsls	r3, r3, #10
 8000b38:	4013      	ands	r3, r2
 8000b3a:	d003      	beq.n	8000b44 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b44:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <HAL_GPIO_Init+0x2cc>)
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b4a:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <HAL_GPIO_Init+0x2cc>)
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	43da      	mvns	r2, r3
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685a      	ldr	r2, [r3, #4]
 8000b5e:	2380      	movs	r3, #128	; 0x80
 8000b60:	035b      	lsls	r3, r3, #13
 8000b62:	4013      	ands	r3, r2
 8000b64:	d003      	beq.n	8000b6e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b6e:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <HAL_GPIO_Init+0x2cc>)
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b74:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <HAL_GPIO_Init+0x2cc>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	43da      	mvns	r2, r3
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	4013      	ands	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685a      	ldr	r2, [r3, #4]
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	039b      	lsls	r3, r3, #14
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	d003      	beq.n	8000b98 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_GPIO_Init+0x2cc>)
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	40da      	lsrs	r2, r3
 8000bac:	1e13      	subs	r3, r2, #0
 8000bae:	d000      	beq.n	8000bb2 <HAL_GPIO_Init+0x2b2>
 8000bb0:	e6ae      	b.n	8000910 <HAL_GPIO_Init+0x10>
  } 
}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b006      	add	sp, #24
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40010000 	.word	0x40010000
 8000bc4:	48000400 	.word	0x48000400
 8000bc8:	48000800 	.word	0x48000800
 8000bcc:	40010400 	.word	0x40010400

08000bd0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	000a      	movs	r2, r1
 8000bda:	1cbb      	adds	r3, r7, #2
 8000bdc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000be4:	1cbb      	adds	r3, r7, #2
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	68fa      	ldr	r2, [r7, #12]
 8000bea:	4013      	ands	r3, r2
 8000bec:	041a      	lsls	r2, r3, #16
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	1cb9      	adds	r1, r7, #2
 8000bf4:	8809      	ldrh	r1, [r1, #0]
 8000bf6:	400b      	ands	r3, r1
 8000bf8:	431a      	orrs	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	619a      	str	r2, [r3, #24]
}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b004      	add	sp, #16
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d102      	bne.n	8000c1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	f000 fb76 	bl	8001308 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2201      	movs	r2, #1
 8000c22:	4013      	ands	r3, r2
 8000c24:	d100      	bne.n	8000c28 <HAL_RCC_OscConfig+0x20>
 8000c26:	e08e      	b.n	8000d46 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c28:	4bc5      	ldr	r3, [pc, #788]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	220c      	movs	r2, #12
 8000c2e:	4013      	ands	r3, r2
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	d00e      	beq.n	8000c52 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c34:	4bc2      	ldr	r3, [pc, #776]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	220c      	movs	r2, #12
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	2b08      	cmp	r3, #8
 8000c3e:	d117      	bne.n	8000c70 <HAL_RCC_OscConfig+0x68>
 8000c40:	4bbf      	ldr	r3, [pc, #764]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	23c0      	movs	r3, #192	; 0xc0
 8000c46:	025b      	lsls	r3, r3, #9
 8000c48:	401a      	ands	r2, r3
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	025b      	lsls	r3, r3, #9
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d10e      	bne.n	8000c70 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c52:	4bbb      	ldr	r3, [pc, #748]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	029b      	lsls	r3, r3, #10
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	d100      	bne.n	8000c60 <HAL_RCC_OscConfig+0x58>
 8000c5e:	e071      	b.n	8000d44 <HAL_RCC_OscConfig+0x13c>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d000      	beq.n	8000c6a <HAL_RCC_OscConfig+0x62>
 8000c68:	e06c      	b.n	8000d44 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	f000 fb4c 	bl	8001308 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d107      	bne.n	8000c88 <HAL_RCC_OscConfig+0x80>
 8000c78:	4bb1      	ldr	r3, [pc, #708]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4bb0      	ldr	r3, [pc, #704]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000c7e:	2180      	movs	r1, #128	; 0x80
 8000c80:	0249      	lsls	r1, r1, #9
 8000c82:	430a      	orrs	r2, r1
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	e02f      	b.n	8000ce8 <HAL_RCC_OscConfig+0xe0>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d10c      	bne.n	8000caa <HAL_RCC_OscConfig+0xa2>
 8000c90:	4bab      	ldr	r3, [pc, #684]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4baa      	ldr	r3, [pc, #680]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000c96:	49ab      	ldr	r1, [pc, #684]	; (8000f44 <HAL_RCC_OscConfig+0x33c>)
 8000c98:	400a      	ands	r2, r1
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	4ba8      	ldr	r3, [pc, #672]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4ba7      	ldr	r3, [pc, #668]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000ca2:	49a9      	ldr	r1, [pc, #676]	; (8000f48 <HAL_RCC_OscConfig+0x340>)
 8000ca4:	400a      	ands	r2, r1
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	e01e      	b.n	8000ce8 <HAL_RCC_OscConfig+0xe0>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2b05      	cmp	r3, #5
 8000cb0:	d10e      	bne.n	8000cd0 <HAL_RCC_OscConfig+0xc8>
 8000cb2:	4ba3      	ldr	r3, [pc, #652]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	4ba2      	ldr	r3, [pc, #648]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000cb8:	2180      	movs	r1, #128	; 0x80
 8000cba:	02c9      	lsls	r1, r1, #11
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	4b9f      	ldr	r3, [pc, #636]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b9e      	ldr	r3, [pc, #632]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000cc6:	2180      	movs	r1, #128	; 0x80
 8000cc8:	0249      	lsls	r1, r1, #9
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	e00b      	b.n	8000ce8 <HAL_RCC_OscConfig+0xe0>
 8000cd0:	4b9b      	ldr	r3, [pc, #620]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b9a      	ldr	r3, [pc, #616]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000cd6:	499b      	ldr	r1, [pc, #620]	; (8000f44 <HAL_RCC_OscConfig+0x33c>)
 8000cd8:	400a      	ands	r2, r1
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	4b98      	ldr	r3, [pc, #608]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b97      	ldr	r3, [pc, #604]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000ce2:	4999      	ldr	r1, [pc, #612]	; (8000f48 <HAL_RCC_OscConfig+0x340>)
 8000ce4:	400a      	ands	r2, r1
 8000ce6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d014      	beq.n	8000d1a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf0:	f7ff fd4e 	bl	8000790 <HAL_GetTick>
 8000cf4:	0003      	movs	r3, r0
 8000cf6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf8:	e008      	b.n	8000d0c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cfa:	f7ff fd49 	bl	8000790 <HAL_GetTick>
 8000cfe:	0002      	movs	r2, r0
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	2b64      	cmp	r3, #100	; 0x64
 8000d06:	d901      	bls.n	8000d0c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	e2fd      	b.n	8001308 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0c:	4b8c      	ldr	r3, [pc, #560]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	029b      	lsls	r3, r3, #10
 8000d14:	4013      	ands	r3, r2
 8000d16:	d0f0      	beq.n	8000cfa <HAL_RCC_OscConfig+0xf2>
 8000d18:	e015      	b.n	8000d46 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d1a:	f7ff fd39 	bl	8000790 <HAL_GetTick>
 8000d1e:	0003      	movs	r3, r0
 8000d20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d22:	e008      	b.n	8000d36 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d24:	f7ff fd34 	bl	8000790 <HAL_GetTick>
 8000d28:	0002      	movs	r2, r0
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b64      	cmp	r3, #100	; 0x64
 8000d30:	d901      	bls.n	8000d36 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e2e8      	b.n	8001308 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d36:	4b82      	ldr	r3, [pc, #520]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	029b      	lsls	r3, r3, #10
 8000d3e:	4013      	ands	r3, r2
 8000d40:	d1f0      	bne.n	8000d24 <HAL_RCC_OscConfig+0x11c>
 8000d42:	e000      	b.n	8000d46 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d44:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	d100      	bne.n	8000d52 <HAL_RCC_OscConfig+0x14a>
 8000d50:	e06c      	b.n	8000e2c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d52:	4b7b      	ldr	r3, [pc, #492]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	220c      	movs	r2, #12
 8000d58:	4013      	ands	r3, r2
 8000d5a:	d00e      	beq.n	8000d7a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d5c:	4b78      	ldr	r3, [pc, #480]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	220c      	movs	r2, #12
 8000d62:	4013      	ands	r3, r2
 8000d64:	2b08      	cmp	r3, #8
 8000d66:	d11f      	bne.n	8000da8 <HAL_RCC_OscConfig+0x1a0>
 8000d68:	4b75      	ldr	r3, [pc, #468]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	23c0      	movs	r3, #192	; 0xc0
 8000d6e:	025b      	lsls	r3, r3, #9
 8000d70:	401a      	ands	r2, r3
 8000d72:	2380      	movs	r3, #128	; 0x80
 8000d74:	021b      	lsls	r3, r3, #8
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d116      	bne.n	8000da8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d7a:	4b71      	ldr	r3, [pc, #452]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2202      	movs	r2, #2
 8000d80:	4013      	ands	r3, r2
 8000d82:	d005      	beq.n	8000d90 <HAL_RCC_OscConfig+0x188>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d001      	beq.n	8000d90 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e2bb      	b.n	8001308 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d90:	4b6b      	ldr	r3, [pc, #428]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	22f8      	movs	r2, #248	; 0xf8
 8000d96:	4393      	bics	r3, r2
 8000d98:	0019      	movs	r1, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	691b      	ldr	r3, [r3, #16]
 8000d9e:	00da      	lsls	r2, r3, #3
 8000da0:	4b67      	ldr	r3, [pc, #412]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000da2:	430a      	orrs	r2, r1
 8000da4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000da6:	e041      	b.n	8000e2c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d024      	beq.n	8000dfa <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000db0:	4b63      	ldr	r3, [pc, #396]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b62      	ldr	r3, [pc, #392]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000db6:	2101      	movs	r1, #1
 8000db8:	430a      	orrs	r2, r1
 8000dba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dbc:	f7ff fce8 	bl	8000790 <HAL_GetTick>
 8000dc0:	0003      	movs	r3, r0
 8000dc2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc4:	e008      	b.n	8000dd8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dc6:	f7ff fce3 	bl	8000790 <HAL_GetTick>
 8000dca:	0002      	movs	r2, r0
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d901      	bls.n	8000dd8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	e297      	b.n	8001308 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd8:	4b59      	ldr	r3, [pc, #356]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2202      	movs	r2, #2
 8000dde:	4013      	ands	r3, r2
 8000de0:	d0f1      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000de2:	4b57      	ldr	r3, [pc, #348]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	22f8      	movs	r2, #248	; 0xf8
 8000de8:	4393      	bics	r3, r2
 8000dea:	0019      	movs	r1, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	691b      	ldr	r3, [r3, #16]
 8000df0:	00da      	lsls	r2, r3, #3
 8000df2:	4b53      	ldr	r3, [pc, #332]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000df4:	430a      	orrs	r2, r1
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	e018      	b.n	8000e2c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dfa:	4b51      	ldr	r3, [pc, #324]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	4b50      	ldr	r3, [pc, #320]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000e00:	2101      	movs	r1, #1
 8000e02:	438a      	bics	r2, r1
 8000e04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e06:	f7ff fcc3 	bl	8000790 <HAL_GetTick>
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e0e:	e008      	b.n	8000e22 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e10:	f7ff fcbe 	bl	8000790 <HAL_GetTick>
 8000e14:	0002      	movs	r2, r0
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e272      	b.n	8001308 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e22:	4b47      	ldr	r3, [pc, #284]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2202      	movs	r2, #2
 8000e28:	4013      	ands	r3, r2
 8000e2a:	d1f1      	bne.n	8000e10 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2208      	movs	r2, #8
 8000e32:	4013      	ands	r3, r2
 8000e34:	d036      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d019      	beq.n	8000e72 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e3e:	4b40      	ldr	r3, [pc, #256]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e42:	4b3f      	ldr	r3, [pc, #252]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000e44:	2101      	movs	r1, #1
 8000e46:	430a      	orrs	r2, r1
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e4a:	f7ff fca1 	bl	8000790 <HAL_GetTick>
 8000e4e:	0003      	movs	r3, r0
 8000e50:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e54:	f7ff fc9c 	bl	8000790 <HAL_GetTick>
 8000e58:	0002      	movs	r2, r0
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e250      	b.n	8001308 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e66:	4b36      	ldr	r3, [pc, #216]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	d0f1      	beq.n	8000e54 <HAL_RCC_OscConfig+0x24c>
 8000e70:	e018      	b.n	8000ea4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e72:	4b33      	ldr	r3, [pc, #204]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e76:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000e78:	2101      	movs	r1, #1
 8000e7a:	438a      	bics	r2, r1
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e7e:	f7ff fc87 	bl	8000790 <HAL_GetTick>
 8000e82:	0003      	movs	r3, r0
 8000e84:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e86:	e008      	b.n	8000e9a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e88:	f7ff fc82 	bl	8000790 <HAL_GetTick>
 8000e8c:	0002      	movs	r2, r0
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d901      	bls.n	8000e9a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e236      	b.n	8001308 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e9a:	4b29      	ldr	r3, [pc, #164]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	d1f1      	bne.n	8000e88 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	4013      	ands	r3, r2
 8000eac:	d100      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x2a8>
 8000eae:	e0b5      	b.n	800101c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eb0:	231f      	movs	r3, #31
 8000eb2:	18fb      	adds	r3, r7, r3
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eb8:	4b21      	ldr	r3, [pc, #132]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000eba:	69da      	ldr	r2, [r3, #28]
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	055b      	lsls	r3, r3, #21
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	d111      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000ec6:	69da      	ldr	r2, [r3, #28]
 8000ec8:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000eca:	2180      	movs	r1, #128	; 0x80
 8000ecc:	0549      	lsls	r1, r1, #21
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	61da      	str	r2, [r3, #28]
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000ed4:	69da      	ldr	r2, [r3, #28]
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	055b      	lsls	r3, r3, #21
 8000eda:	4013      	ands	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ee0:	231f      	movs	r3, #31
 8000ee2:	18fb      	adds	r3, r7, r3
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <HAL_RCC_OscConfig+0x344>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d11a      	bne.n	8000f2a <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ef4:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <HAL_RCC_OscConfig+0x344>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <HAL_RCC_OscConfig+0x344>)
 8000efa:	2180      	movs	r1, #128	; 0x80
 8000efc:	0049      	lsls	r1, r1, #1
 8000efe:	430a      	orrs	r2, r1
 8000f00:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f02:	f7ff fc45 	bl	8000790 <HAL_GetTick>
 8000f06:	0003      	movs	r3, r0
 8000f08:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f0a:	e008      	b.n	8000f1e <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f0c:	f7ff fc40 	bl	8000790 <HAL_GetTick>
 8000f10:	0002      	movs	r2, r0
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b64      	cmp	r3, #100	; 0x64
 8000f18:	d901      	bls.n	8000f1e <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e1f4      	b.n	8001308 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_RCC_OscConfig+0x344>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4013      	ands	r3, r2
 8000f28:	d0f0      	beq.n	8000f0c <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d10e      	bne.n	8000f50 <HAL_RCC_OscConfig+0x348>
 8000f32:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000f34:	6a1a      	ldr	r2, [r3, #32]
 8000f36:	4b02      	ldr	r3, [pc, #8]	; (8000f40 <HAL_RCC_OscConfig+0x338>)
 8000f38:	2101      	movs	r1, #1
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	621a      	str	r2, [r3, #32]
 8000f3e:	e035      	b.n	8000fac <HAL_RCC_OscConfig+0x3a4>
 8000f40:	40021000 	.word	0x40021000
 8000f44:	fffeffff 	.word	0xfffeffff
 8000f48:	fffbffff 	.word	0xfffbffff
 8000f4c:	40007000 	.word	0x40007000
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d10c      	bne.n	8000f72 <HAL_RCC_OscConfig+0x36a>
 8000f58:	4bca      	ldr	r3, [pc, #808]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8000f5a:	6a1a      	ldr	r2, [r3, #32]
 8000f5c:	4bc9      	ldr	r3, [pc, #804]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8000f5e:	2101      	movs	r1, #1
 8000f60:	438a      	bics	r2, r1
 8000f62:	621a      	str	r2, [r3, #32]
 8000f64:	4bc7      	ldr	r3, [pc, #796]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8000f66:	6a1a      	ldr	r2, [r3, #32]
 8000f68:	4bc6      	ldr	r3, [pc, #792]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8000f6a:	2104      	movs	r1, #4
 8000f6c:	438a      	bics	r2, r1
 8000f6e:	621a      	str	r2, [r3, #32]
 8000f70:	e01c      	b.n	8000fac <HAL_RCC_OscConfig+0x3a4>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	2b05      	cmp	r3, #5
 8000f78:	d10c      	bne.n	8000f94 <HAL_RCC_OscConfig+0x38c>
 8000f7a:	4bc2      	ldr	r3, [pc, #776]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8000f7c:	6a1a      	ldr	r2, [r3, #32]
 8000f7e:	4bc1      	ldr	r3, [pc, #772]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8000f80:	2104      	movs	r1, #4
 8000f82:	430a      	orrs	r2, r1
 8000f84:	621a      	str	r2, [r3, #32]
 8000f86:	4bbf      	ldr	r3, [pc, #764]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8000f88:	6a1a      	ldr	r2, [r3, #32]
 8000f8a:	4bbe      	ldr	r3, [pc, #760]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	621a      	str	r2, [r3, #32]
 8000f92:	e00b      	b.n	8000fac <HAL_RCC_OscConfig+0x3a4>
 8000f94:	4bbb      	ldr	r3, [pc, #748]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8000f96:	6a1a      	ldr	r2, [r3, #32]
 8000f98:	4bba      	ldr	r3, [pc, #744]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	438a      	bics	r2, r1
 8000f9e:	621a      	str	r2, [r3, #32]
 8000fa0:	4bb8      	ldr	r3, [pc, #736]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8000fa2:	6a1a      	ldr	r2, [r3, #32]
 8000fa4:	4bb7      	ldr	r3, [pc, #732]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8000fa6:	2104      	movs	r1, #4
 8000fa8:	438a      	bics	r2, r1
 8000faa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d014      	beq.n	8000fde <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb4:	f7ff fbec 	bl	8000790 <HAL_GetTick>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fbc:	e009      	b.n	8000fd2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fbe:	f7ff fbe7 	bl	8000790 <HAL_GetTick>
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	4aaf      	ldr	r2, [pc, #700]	; (8001288 <HAL_RCC_OscConfig+0x680>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d901      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e19a      	b.n	8001308 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fd2:	4bac      	ldr	r3, [pc, #688]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	4013      	ands	r3, r2
 8000fda:	d0f0      	beq.n	8000fbe <HAL_RCC_OscConfig+0x3b6>
 8000fdc:	e013      	b.n	8001006 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fde:	f7ff fbd7 	bl	8000790 <HAL_GetTick>
 8000fe2:	0003      	movs	r3, r0
 8000fe4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe6:	e009      	b.n	8000ffc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fe8:	f7ff fbd2 	bl	8000790 <HAL_GetTick>
 8000fec:	0002      	movs	r2, r0
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	4aa5      	ldr	r2, [pc, #660]	; (8001288 <HAL_RCC_OscConfig+0x680>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e185      	b.n	8001308 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ffc:	4ba1      	ldr	r3, [pc, #644]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	2202      	movs	r2, #2
 8001002:	4013      	ands	r3, r2
 8001004:	d1f0      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001006:	231f      	movs	r3, #31
 8001008:	18fb      	adds	r3, r7, r3
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d105      	bne.n	800101c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001010:	4b9c      	ldr	r3, [pc, #624]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8001012:	69da      	ldr	r2, [r3, #28]
 8001014:	4b9b      	ldr	r3, [pc, #620]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8001016:	499d      	ldr	r1, [pc, #628]	; (800128c <HAL_RCC_OscConfig+0x684>)
 8001018:	400a      	ands	r2, r1
 800101a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2210      	movs	r2, #16
 8001022:	4013      	ands	r3, r2
 8001024:	d063      	beq.n	80010ee <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d12a      	bne.n	8001084 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800102e:	4b95      	ldr	r3, [pc, #596]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8001030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001032:	4b94      	ldr	r3, [pc, #592]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8001034:	2104      	movs	r1, #4
 8001036:	430a      	orrs	r2, r1
 8001038:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800103a:	4b92      	ldr	r3, [pc, #584]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 800103c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800103e:	4b91      	ldr	r3, [pc, #580]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8001040:	2101      	movs	r1, #1
 8001042:	430a      	orrs	r2, r1
 8001044:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001046:	f7ff fba3 	bl	8000790 <HAL_GetTick>
 800104a:	0003      	movs	r3, r0
 800104c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001050:	f7ff fb9e 	bl	8000790 <HAL_GetTick>
 8001054:	0002      	movs	r2, r0
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e152      	b.n	8001308 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001062:	4b88      	ldr	r3, [pc, #544]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8001064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001066:	2202      	movs	r2, #2
 8001068:	4013      	ands	r3, r2
 800106a:	d0f1      	beq.n	8001050 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800106c:	4b85      	ldr	r3, [pc, #532]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 800106e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001070:	22f8      	movs	r2, #248	; 0xf8
 8001072:	4393      	bics	r3, r2
 8001074:	0019      	movs	r1, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	00da      	lsls	r2, r3, #3
 800107c:	4b81      	ldr	r3, [pc, #516]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 800107e:	430a      	orrs	r2, r1
 8001080:	635a      	str	r2, [r3, #52]	; 0x34
 8001082:	e034      	b.n	80010ee <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	3305      	adds	r3, #5
 800108a:	d111      	bne.n	80010b0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800108c:	4b7d      	ldr	r3, [pc, #500]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 800108e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001090:	4b7c      	ldr	r3, [pc, #496]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8001092:	2104      	movs	r1, #4
 8001094:	438a      	bics	r2, r1
 8001096:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001098:	4b7a      	ldr	r3, [pc, #488]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 800109a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800109c:	22f8      	movs	r2, #248	; 0xf8
 800109e:	4393      	bics	r3, r2
 80010a0:	0019      	movs	r1, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	00da      	lsls	r2, r3, #3
 80010a8:	4b76      	ldr	r3, [pc, #472]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 80010aa:	430a      	orrs	r2, r1
 80010ac:	635a      	str	r2, [r3, #52]	; 0x34
 80010ae:	e01e      	b.n	80010ee <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010b0:	4b74      	ldr	r3, [pc, #464]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 80010b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010b4:	4b73      	ldr	r3, [pc, #460]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 80010b6:	2104      	movs	r1, #4
 80010b8:	430a      	orrs	r2, r1
 80010ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80010bc:	4b71      	ldr	r3, [pc, #452]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 80010be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c0:	4b70      	ldr	r3, [pc, #448]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 80010c2:	2101      	movs	r1, #1
 80010c4:	438a      	bics	r2, r1
 80010c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c8:	f7ff fb62 	bl	8000790 <HAL_GetTick>
 80010cc:	0003      	movs	r3, r0
 80010ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010d0:	e008      	b.n	80010e4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010d2:	f7ff fb5d 	bl	8000790 <HAL_GetTick>
 80010d6:	0002      	movs	r2, r0
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e111      	b.n	8001308 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010e4:	4b67      	ldr	r3, [pc, #412]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 80010e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e8:	2202      	movs	r2, #2
 80010ea:	4013      	ands	r3, r2
 80010ec:	d1f1      	bne.n	80010d2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2220      	movs	r2, #32
 80010f4:	4013      	ands	r3, r2
 80010f6:	d05c      	beq.n	80011b2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80010f8:	4b62      	ldr	r3, [pc, #392]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	220c      	movs	r2, #12
 80010fe:	4013      	ands	r3, r2
 8001100:	2b0c      	cmp	r3, #12
 8001102:	d00e      	beq.n	8001122 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001104:	4b5f      	ldr	r3, [pc, #380]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	220c      	movs	r2, #12
 800110a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800110c:	2b08      	cmp	r3, #8
 800110e:	d114      	bne.n	800113a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001110:	4b5c      	ldr	r3, [pc, #368]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	23c0      	movs	r3, #192	; 0xc0
 8001116:	025b      	lsls	r3, r3, #9
 8001118:	401a      	ands	r2, r3
 800111a:	23c0      	movs	r3, #192	; 0xc0
 800111c:	025b      	lsls	r3, r3, #9
 800111e:	429a      	cmp	r2, r3
 8001120:	d10b      	bne.n	800113a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001122:	4b58      	ldr	r3, [pc, #352]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8001124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001126:	2380      	movs	r3, #128	; 0x80
 8001128:	025b      	lsls	r3, r3, #9
 800112a:	4013      	ands	r3, r2
 800112c:	d040      	beq.n	80011b0 <HAL_RCC_OscConfig+0x5a8>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a1b      	ldr	r3, [r3, #32]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d03c      	beq.n	80011b0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e0e6      	b.n	8001308 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d01b      	beq.n	800117a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001142:	4b50      	ldr	r3, [pc, #320]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8001144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001146:	4b4f      	ldr	r3, [pc, #316]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8001148:	2180      	movs	r1, #128	; 0x80
 800114a:	0249      	lsls	r1, r1, #9
 800114c:	430a      	orrs	r2, r1
 800114e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fb1e 	bl	8000790 <HAL_GetTick>
 8001154:	0003      	movs	r3, r0
 8001156:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800115a:	f7ff fb19 	bl	8000790 <HAL_GetTick>
 800115e:	0002      	movs	r2, r0
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e0cd      	b.n	8001308 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800116c:	4b45      	ldr	r3, [pc, #276]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 800116e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	025b      	lsls	r3, r3, #9
 8001174:	4013      	ands	r3, r2
 8001176:	d0f0      	beq.n	800115a <HAL_RCC_OscConfig+0x552>
 8001178:	e01b      	b.n	80011b2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800117a:	4b42      	ldr	r3, [pc, #264]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 800117c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800117e:	4b41      	ldr	r3, [pc, #260]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8001180:	4943      	ldr	r1, [pc, #268]	; (8001290 <HAL_RCC_OscConfig+0x688>)
 8001182:	400a      	ands	r2, r1
 8001184:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001186:	f7ff fb03 	bl	8000790 <HAL_GetTick>
 800118a:	0003      	movs	r3, r0
 800118c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001190:	f7ff fafe 	bl	8000790 <HAL_GetTick>
 8001194:	0002      	movs	r2, r0
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e0b2      	b.n	8001308 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80011a2:	4b38      	ldr	r3, [pc, #224]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 80011a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	025b      	lsls	r3, r3, #9
 80011aa:	4013      	ands	r3, r2
 80011ac:	d1f0      	bne.n	8001190 <HAL_RCC_OscConfig+0x588>
 80011ae:	e000      	b.n	80011b2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80011b0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d100      	bne.n	80011bc <HAL_RCC_OscConfig+0x5b4>
 80011ba:	e0a4      	b.n	8001306 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011bc:	4b31      	ldr	r3, [pc, #196]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	220c      	movs	r2, #12
 80011c2:	4013      	ands	r3, r2
 80011c4:	2b08      	cmp	r3, #8
 80011c6:	d100      	bne.n	80011ca <HAL_RCC_OscConfig+0x5c2>
 80011c8:	e078      	b.n	80012bc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d14c      	bne.n	800126c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011d2:	4b2c      	ldr	r3, [pc, #176]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	4b2b      	ldr	r3, [pc, #172]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 80011d8:	492e      	ldr	r1, [pc, #184]	; (8001294 <HAL_RCC_OscConfig+0x68c>)
 80011da:	400a      	ands	r2, r1
 80011dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011de:	f7ff fad7 	bl	8000790 <HAL_GetTick>
 80011e2:	0003      	movs	r3, r0
 80011e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011e8:	f7ff fad2 	bl	8000790 <HAL_GetTick>
 80011ec:	0002      	movs	r2, r0
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e086      	b.n	8001308 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fa:	4b22      	ldr	r3, [pc, #136]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	049b      	lsls	r3, r3, #18
 8001202:	4013      	ands	r3, r2
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8001208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120a:	220f      	movs	r2, #15
 800120c:	4393      	bics	r3, r2
 800120e:	0019      	movs	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8001216:	430a      	orrs	r2, r1
 8001218:	62da      	str	r2, [r3, #44]	; 0x2c
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	4a1e      	ldr	r2, [pc, #120]	; (8001298 <HAL_RCC_OscConfig+0x690>)
 8001220:	4013      	ands	r3, r2
 8001222:	0019      	movs	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	431a      	orrs	r2, r3
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8001230:	430a      	orrs	r2, r1
 8001232:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 800123a:	2180      	movs	r1, #128	; 0x80
 800123c:	0449      	lsls	r1, r1, #17
 800123e:	430a      	orrs	r2, r1
 8001240:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001242:	f7ff faa5 	bl	8000790 <HAL_GetTick>
 8001246:	0003      	movs	r3, r0
 8001248:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800124c:	f7ff faa0 	bl	8000790 <HAL_GetTick>
 8001250:	0002      	movs	r2, r0
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e054      	b.n	8001308 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	049b      	lsls	r3, r3, #18
 8001266:	4013      	ands	r3, r2
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0x644>
 800126a:	e04c      	b.n	8001306 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <HAL_RCC_OscConfig+0x67c>)
 8001272:	4908      	ldr	r1, [pc, #32]	; (8001294 <HAL_RCC_OscConfig+0x68c>)
 8001274:	400a      	ands	r2, r1
 8001276:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001278:	f7ff fa8a 	bl	8000790 <HAL_GetTick>
 800127c:	0003      	movs	r3, r0
 800127e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001280:	e015      	b.n	80012ae <HAL_RCC_OscConfig+0x6a6>
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	40021000 	.word	0x40021000
 8001288:	00001388 	.word	0x00001388
 800128c:	efffffff 	.word	0xefffffff
 8001290:	fffeffff 	.word	0xfffeffff
 8001294:	feffffff 	.word	0xfeffffff
 8001298:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800129c:	f7ff fa78 	bl	8000790 <HAL_GetTick>
 80012a0:	0002      	movs	r2, r0
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e02c      	b.n	8001308 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <HAL_RCC_OscConfig+0x708>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	049b      	lsls	r3, r3, #18
 80012b6:	4013      	ands	r3, r2
 80012b8:	d1f0      	bne.n	800129c <HAL_RCC_OscConfig+0x694>
 80012ba:	e024      	b.n	8001306 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d101      	bne.n	80012c8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e01f      	b.n	8001308 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <HAL_RCC_OscConfig+0x708>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <HAL_RCC_OscConfig+0x708>)
 80012d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	23c0      	movs	r3, #192	; 0xc0
 80012d8:	025b      	lsls	r3, r3, #9
 80012da:	401a      	ands	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d10e      	bne.n	8001302 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	220f      	movs	r2, #15
 80012e8:	401a      	ands	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d107      	bne.n	8001302 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	23f0      	movs	r3, #240	; 0xf0
 80012f6:	039b      	lsls	r3, r3, #14
 80012f8:	401a      	ands	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012fe:	429a      	cmp	r2, r3
 8001300:	d001      	beq.n	8001306 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	0018      	movs	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	b008      	add	sp, #32
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40021000 	.word	0x40021000

08001314 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e0bf      	b.n	80014a8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001328:	4b61      	ldr	r3, [pc, #388]	; (80014b0 <HAL_RCC_ClockConfig+0x19c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2201      	movs	r2, #1
 800132e:	4013      	ands	r3, r2
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d911      	bls.n	800135a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001336:	4b5e      	ldr	r3, [pc, #376]	; (80014b0 <HAL_RCC_ClockConfig+0x19c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2201      	movs	r2, #1
 800133c:	4393      	bics	r3, r2
 800133e:	0019      	movs	r1, r3
 8001340:	4b5b      	ldr	r3, [pc, #364]	; (80014b0 <HAL_RCC_ClockConfig+0x19c>)
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001348:	4b59      	ldr	r3, [pc, #356]	; (80014b0 <HAL_RCC_ClockConfig+0x19c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2201      	movs	r2, #1
 800134e:	4013      	ands	r3, r2
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	d001      	beq.n	800135a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e0a6      	b.n	80014a8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2202      	movs	r2, #2
 8001360:	4013      	ands	r3, r2
 8001362:	d015      	beq.n	8001390 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2204      	movs	r2, #4
 800136a:	4013      	ands	r3, r2
 800136c:	d006      	beq.n	800137c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800136e:	4b51      	ldr	r3, [pc, #324]	; (80014b4 <HAL_RCC_ClockConfig+0x1a0>)
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	4b50      	ldr	r3, [pc, #320]	; (80014b4 <HAL_RCC_ClockConfig+0x1a0>)
 8001374:	21e0      	movs	r1, #224	; 0xe0
 8001376:	00c9      	lsls	r1, r1, #3
 8001378:	430a      	orrs	r2, r1
 800137a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800137c:	4b4d      	ldr	r3, [pc, #308]	; (80014b4 <HAL_RCC_ClockConfig+0x1a0>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	22f0      	movs	r2, #240	; 0xf0
 8001382:	4393      	bics	r3, r2
 8001384:	0019      	movs	r1, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	4b4a      	ldr	r3, [pc, #296]	; (80014b4 <HAL_RCC_ClockConfig+0x1a0>)
 800138c:	430a      	orrs	r2, r1
 800138e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2201      	movs	r2, #1
 8001396:	4013      	ands	r3, r2
 8001398:	d04c      	beq.n	8001434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d107      	bne.n	80013b2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a2:	4b44      	ldr	r3, [pc, #272]	; (80014b4 <HAL_RCC_ClockConfig+0x1a0>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	029b      	lsls	r3, r3, #10
 80013aa:	4013      	ands	r3, r2
 80013ac:	d120      	bne.n	80013f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e07a      	b.n	80014a8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d107      	bne.n	80013ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ba:	4b3e      	ldr	r3, [pc, #248]	; (80014b4 <HAL_RCC_ClockConfig+0x1a0>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	2380      	movs	r3, #128	; 0x80
 80013c0:	049b      	lsls	r3, r3, #18
 80013c2:	4013      	ands	r3, r2
 80013c4:	d114      	bne.n	80013f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e06e      	b.n	80014a8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d107      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80013d2:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <HAL_RCC_ClockConfig+0x1a0>)
 80013d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013d6:	2380      	movs	r3, #128	; 0x80
 80013d8:	025b      	lsls	r3, r3, #9
 80013da:	4013      	ands	r3, r2
 80013dc:	d108      	bne.n	80013f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e062      	b.n	80014a8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e2:	4b34      	ldr	r3, [pc, #208]	; (80014b4 <HAL_RCC_ClockConfig+0x1a0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2202      	movs	r2, #2
 80013e8:	4013      	ands	r3, r2
 80013ea:	d101      	bne.n	80013f0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e05b      	b.n	80014a8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013f0:	4b30      	ldr	r3, [pc, #192]	; (80014b4 <HAL_RCC_ClockConfig+0x1a0>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2203      	movs	r2, #3
 80013f6:	4393      	bics	r3, r2
 80013f8:	0019      	movs	r1, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <HAL_RCC_ClockConfig+0x1a0>)
 8001400:	430a      	orrs	r2, r1
 8001402:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001404:	f7ff f9c4 	bl	8000790 <HAL_GetTick>
 8001408:	0003      	movs	r3, r0
 800140a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800140c:	e009      	b.n	8001422 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800140e:	f7ff f9bf 	bl	8000790 <HAL_GetTick>
 8001412:	0002      	movs	r2, r0
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	4a27      	ldr	r2, [pc, #156]	; (80014b8 <HAL_RCC_ClockConfig+0x1a4>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e042      	b.n	80014a8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001422:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <HAL_RCC_ClockConfig+0x1a0>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	220c      	movs	r2, #12
 8001428:	401a      	ands	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	429a      	cmp	r2, r3
 8001432:	d1ec      	bne.n	800140e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <HAL_RCC_ClockConfig+0x19c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2201      	movs	r2, #1
 800143a:	4013      	ands	r3, r2
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d211      	bcs.n	8001466 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001442:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <HAL_RCC_ClockConfig+0x19c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2201      	movs	r2, #1
 8001448:	4393      	bics	r3, r2
 800144a:	0019      	movs	r1, r3
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_RCC_ClockConfig+0x19c>)
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <HAL_RCC_ClockConfig+0x19c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2201      	movs	r2, #1
 800145a:	4013      	ands	r3, r2
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d001      	beq.n	8001466 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e020      	b.n	80014a8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2204      	movs	r2, #4
 800146c:	4013      	ands	r3, r2
 800146e:	d009      	beq.n	8001484 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001470:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <HAL_RCC_ClockConfig+0x1a0>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	4a11      	ldr	r2, [pc, #68]	; (80014bc <HAL_RCC_ClockConfig+0x1a8>)
 8001476:	4013      	ands	r3, r2
 8001478:	0019      	movs	r1, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <HAL_RCC_ClockConfig+0x1a0>)
 8001480:	430a      	orrs	r2, r1
 8001482:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001484:	f000 f820 	bl	80014c8 <HAL_RCC_GetSysClockFreq>
 8001488:	0001      	movs	r1, r0
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_RCC_ClockConfig+0x1a0>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	091b      	lsrs	r3, r3, #4
 8001490:	220f      	movs	r2, #15
 8001492:	4013      	ands	r3, r2
 8001494:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <HAL_RCC_ClockConfig+0x1ac>)
 8001496:	5cd3      	ldrb	r3, [r2, r3]
 8001498:	000a      	movs	r2, r1
 800149a:	40da      	lsrs	r2, r3
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <HAL_RCC_ClockConfig+0x1b0>)
 800149e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80014a0:	2000      	movs	r0, #0
 80014a2:	f7ff f85f 	bl	8000564 <HAL_InitTick>
  
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	0018      	movs	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b004      	add	sp, #16
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40022000 	.word	0x40022000
 80014b4:	40021000 	.word	0x40021000
 80014b8:	00001388 	.word	0x00001388
 80014bc:	fffff8ff 	.word	0xfffff8ff
 80014c0:	08004674 	.word	0x08004674
 80014c4:	20000000 	.word	0x20000000

080014c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b08f      	sub	sp, #60	; 0x3c
 80014cc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80014ce:	2314      	movs	r3, #20
 80014d0:	18fb      	adds	r3, r7, r3
 80014d2:	4a37      	ldr	r2, [pc, #220]	; (80015b0 <HAL_RCC_GetSysClockFreq+0xe8>)
 80014d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80014d6:	c313      	stmia	r3!, {r0, r1, r4}
 80014d8:	6812      	ldr	r2, [r2, #0]
 80014da:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	4a35      	ldr	r2, [pc, #212]	; (80015b4 <HAL_RCC_GetSysClockFreq+0xec>)
 80014e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80014e2:	c313      	stmia	r3!, {r0, r1, r4}
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ec:	2300      	movs	r3, #0
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80014f0:	2300      	movs	r3, #0
 80014f2:	637b      	str	r3, [r7, #52]	; 0x34
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80014fc:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <HAL_RCC_GetSysClockFreq+0xf0>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001504:	220c      	movs	r2, #12
 8001506:	4013      	ands	r3, r2
 8001508:	2b08      	cmp	r3, #8
 800150a:	d006      	beq.n	800151a <HAL_RCC_GetSysClockFreq+0x52>
 800150c:	2b0c      	cmp	r3, #12
 800150e:	d043      	beq.n	8001598 <HAL_RCC_GetSysClockFreq+0xd0>
 8001510:	2b04      	cmp	r3, #4
 8001512:	d144      	bne.n	800159e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001514:	4b29      	ldr	r3, [pc, #164]	; (80015bc <HAL_RCC_GetSysClockFreq+0xf4>)
 8001516:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001518:	e044      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800151a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151c:	0c9b      	lsrs	r3, r3, #18
 800151e:	220f      	movs	r2, #15
 8001520:	4013      	ands	r3, r2
 8001522:	2214      	movs	r2, #20
 8001524:	18ba      	adds	r2, r7, r2
 8001526:	5cd3      	ldrb	r3, [r2, r3]
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <HAL_RCC_GetSysClockFreq+0xf0>)
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	220f      	movs	r2, #15
 8001530:	4013      	ands	r3, r2
 8001532:	1d3a      	adds	r2, r7, #4
 8001534:	5cd3      	ldrb	r3, [r2, r3]
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800153a:	23c0      	movs	r3, #192	; 0xc0
 800153c:	025b      	lsls	r3, r3, #9
 800153e:	401a      	ands	r2, r3
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	025b      	lsls	r3, r3, #9
 8001544:	429a      	cmp	r2, r3
 8001546:	d109      	bne.n	800155c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800154a:	481c      	ldr	r0, [pc, #112]	; (80015bc <HAL_RCC_GetSysClockFreq+0xf4>)
 800154c:	f7fe fddc 	bl	8000108 <__udivsi3>
 8001550:	0003      	movs	r3, r0
 8001552:	001a      	movs	r2, r3
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	4353      	muls	r3, r2
 8001558:	637b      	str	r3, [r7, #52]	; 0x34
 800155a:	e01a      	b.n	8001592 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800155c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800155e:	23c0      	movs	r3, #192	; 0xc0
 8001560:	025b      	lsls	r3, r3, #9
 8001562:	401a      	ands	r2, r3
 8001564:	23c0      	movs	r3, #192	; 0xc0
 8001566:	025b      	lsls	r3, r3, #9
 8001568:	429a      	cmp	r2, r3
 800156a:	d109      	bne.n	8001580 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800156c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800156e:	4814      	ldr	r0, [pc, #80]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001570:	f7fe fdca 	bl	8000108 <__udivsi3>
 8001574:	0003      	movs	r3, r0
 8001576:	001a      	movs	r2, r3
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	4353      	muls	r3, r2
 800157c:	637b      	str	r3, [r7, #52]	; 0x34
 800157e:	e008      	b.n	8001592 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001580:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001582:	480e      	ldr	r0, [pc, #56]	; (80015bc <HAL_RCC_GetSysClockFreq+0xf4>)
 8001584:	f7fe fdc0 	bl	8000108 <__udivsi3>
 8001588:	0003      	movs	r3, r0
 800158a:	001a      	movs	r2, r3
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	4353      	muls	r3, r2
 8001590:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001594:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001596:	e005      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800159c:	e002      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800159e:	4b07      	ldr	r3, [pc, #28]	; (80015bc <HAL_RCC_GetSysClockFreq+0xf4>)
 80015a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015a2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80015a6:	0018      	movs	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b00f      	add	sp, #60	; 0x3c
 80015ac:	bd90      	pop	{r4, r7, pc}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	080045f4 	.word	0x080045f4
 80015b4:	08004604 	.word	0x08004604
 80015b8:	40021000 	.word	0x40021000
 80015bc:	007a1200 	.word	0x007a1200
 80015c0:	02dc6c00 	.word	0x02dc6c00

080015c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015c8:	4b02      	ldr	r3, [pc, #8]	; (80015d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80015ca:	681b      	ldr	r3, [r3, #0]
}
 80015cc:	0018      	movs	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	20000000 	.word	0x20000000

080015d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80015dc:	f7ff fff2 	bl	80015c4 <HAL_RCC_GetHCLKFreq>
 80015e0:	0001      	movs	r1, r0
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	0a1b      	lsrs	r3, r3, #8
 80015e8:	2207      	movs	r2, #7
 80015ea:	4013      	ands	r3, r2
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <HAL_RCC_GetPCLK1Freq+0x28>)
 80015ee:	5cd3      	ldrb	r3, [r2, r3]
 80015f0:	40d9      	lsrs	r1, r3
 80015f2:	000b      	movs	r3, r1
}    
 80015f4:	0018      	movs	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	40021000 	.word	0x40021000
 8001600:	08004684 	.word	0x08004684

08001604 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2207      	movs	r2, #7
 8001612:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_RCC_GetClockConfig+0x4c>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2203      	movs	r2, #3
 800161a:	401a      	ands	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_RCC_GetClockConfig+0x4c>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	22f0      	movs	r2, #240	; 0xf0
 8001626:	401a      	ands	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_RCC_GetClockConfig+0x4c>)
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	23e0      	movs	r3, #224	; 0xe0
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	401a      	ands	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_RCC_GetClockConfig+0x50>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2201      	movs	r2, #1
 8001640:	401a      	ands	r2, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	601a      	str	r2, [r3, #0]
}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	46bd      	mov	sp, r7
 800164a:	b002      	add	sp, #8
 800164c:	bd80      	pop	{r7, pc}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	40021000 	.word	0x40021000
 8001654:	40022000 	.word	0x40022000

08001658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e01e      	b.n	80016a8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	223d      	movs	r2, #61	; 0x3d
 800166e:	5c9b      	ldrb	r3, [r3, r2]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d107      	bne.n	8001686 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	223c      	movs	r2, #60	; 0x3c
 800167a:	2100      	movs	r1, #0
 800167c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	0018      	movs	r0, r3
 8001682:	f000 f815 	bl	80016b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	223d      	movs	r2, #61	; 0x3d
 800168a:	2102      	movs	r1, #2
 800168c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3304      	adds	r3, #4
 8001696:	0019      	movs	r1, r3
 8001698:	0010      	movs	r0, r2
 800169a:	f000 f969 	bl	8001970 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	223d      	movs	r2, #61	; 0x3d
 80016a2:	2101      	movs	r1, #1
 80016a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	0018      	movs	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b002      	add	sp, #8
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80016b8:	46c0      	nop			; (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b002      	add	sp, #8
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2101      	movs	r1, #1
 80016d4:	430a      	orrs	r2, r1
 80016d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2207      	movs	r2, #7
 80016e0:	4013      	ands	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	d007      	beq.n	80016fa <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2101      	movs	r1, #1
 80016f6:	430a      	orrs	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	0018      	movs	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	b004      	add	sp, #16
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	2202      	movs	r2, #2
 8001714:	4013      	ands	r3, r2
 8001716:	2b02      	cmp	r3, #2
 8001718:	d124      	bne.n	8001764 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	2202      	movs	r2, #2
 8001722:	4013      	ands	r3, r2
 8001724:	2b02      	cmp	r3, #2
 8001726:	d11d      	bne.n	8001764 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2203      	movs	r2, #3
 800172e:	4252      	negs	r2, r2
 8001730:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	2203      	movs	r2, #3
 8001740:	4013      	ands	r3, r2
 8001742:	d004      	beq.n	800174e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	0018      	movs	r0, r3
 8001748:	f000 f8fa 	bl	8001940 <HAL_TIM_IC_CaptureCallback>
 800174c:	e007      	b.n	800175e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	0018      	movs	r0, r3
 8001752:	f000 f8ed 	bl	8001930 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	0018      	movs	r0, r3
 800175a:	f000 f8f9 	bl	8001950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	2204      	movs	r2, #4
 800176c:	4013      	ands	r3, r2
 800176e:	2b04      	cmp	r3, #4
 8001770:	d125      	bne.n	80017be <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	2204      	movs	r2, #4
 800177a:	4013      	ands	r3, r2
 800177c:	2b04      	cmp	r3, #4
 800177e:	d11e      	bne.n	80017be <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2205      	movs	r2, #5
 8001786:	4252      	negs	r2, r2
 8001788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2202      	movs	r2, #2
 800178e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	699a      	ldr	r2, [r3, #24]
 8001796:	23c0      	movs	r3, #192	; 0xc0
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4013      	ands	r3, r2
 800179c:	d004      	beq.n	80017a8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	0018      	movs	r0, r3
 80017a2:	f000 f8cd 	bl	8001940 <HAL_TIM_IC_CaptureCallback>
 80017a6:	e007      	b.n	80017b8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	0018      	movs	r0, r3
 80017ac:	f000 f8c0 	bl	8001930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	0018      	movs	r0, r3
 80017b4:	f000 f8cc 	bl	8001950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	2208      	movs	r2, #8
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d124      	bne.n	8001816 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	2208      	movs	r2, #8
 80017d4:	4013      	ands	r3, r2
 80017d6:	2b08      	cmp	r3, #8
 80017d8:	d11d      	bne.n	8001816 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2209      	movs	r2, #9
 80017e0:	4252      	negs	r2, r2
 80017e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2204      	movs	r2, #4
 80017e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	2203      	movs	r2, #3
 80017f2:	4013      	ands	r3, r2
 80017f4:	d004      	beq.n	8001800 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	0018      	movs	r0, r3
 80017fa:	f000 f8a1 	bl	8001940 <HAL_TIM_IC_CaptureCallback>
 80017fe:	e007      	b.n	8001810 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	0018      	movs	r0, r3
 8001804:	f000 f894 	bl	8001930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	0018      	movs	r0, r3
 800180c:	f000 f8a0 	bl	8001950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	2210      	movs	r2, #16
 800181e:	4013      	ands	r3, r2
 8001820:	2b10      	cmp	r3, #16
 8001822:	d125      	bne.n	8001870 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	2210      	movs	r2, #16
 800182c:	4013      	ands	r3, r2
 800182e:	2b10      	cmp	r3, #16
 8001830:	d11e      	bne.n	8001870 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2211      	movs	r2, #17
 8001838:	4252      	negs	r2, r2
 800183a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2208      	movs	r2, #8
 8001840:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	69da      	ldr	r2, [r3, #28]
 8001848:	23c0      	movs	r3, #192	; 0xc0
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4013      	ands	r3, r2
 800184e:	d004      	beq.n	800185a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	0018      	movs	r0, r3
 8001854:	f000 f874 	bl	8001940 <HAL_TIM_IC_CaptureCallback>
 8001858:	e007      	b.n	800186a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	0018      	movs	r0, r3
 800185e:	f000 f867 	bl	8001930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	0018      	movs	r0, r3
 8001866:	f000 f873 	bl	8001950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	2201      	movs	r2, #1
 8001878:	4013      	ands	r3, r2
 800187a:	2b01      	cmp	r3, #1
 800187c:	d10f      	bne.n	800189e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2201      	movs	r2, #1
 8001886:	4013      	ands	r3, r2
 8001888:	2b01      	cmp	r3, #1
 800188a:	d108      	bne.n	800189e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2202      	movs	r2, #2
 8001892:	4252      	negs	r2, r2
 8001894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	0018      	movs	r0, r3
 800189a:	f7fe fdd9 	bl	8000450 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	2280      	movs	r2, #128	; 0x80
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b80      	cmp	r3, #128	; 0x80
 80018aa:	d10f      	bne.n	80018cc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2280      	movs	r2, #128	; 0x80
 80018b4:	4013      	ands	r3, r2
 80018b6:	2b80      	cmp	r3, #128	; 0x80
 80018b8:	d108      	bne.n	80018cc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2281      	movs	r2, #129	; 0x81
 80018c0:	4252      	negs	r2, r2
 80018c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	0018      	movs	r0, r3
 80018c8:	f000 f8d0 	bl	8001a6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	2240      	movs	r2, #64	; 0x40
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b40      	cmp	r3, #64	; 0x40
 80018d8:	d10f      	bne.n	80018fa <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2240      	movs	r2, #64	; 0x40
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b40      	cmp	r3, #64	; 0x40
 80018e6:	d108      	bne.n	80018fa <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2241      	movs	r2, #65	; 0x41
 80018ee:	4252      	negs	r2, r2
 80018f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	0018      	movs	r0, r3
 80018f6:	f000 f833 	bl	8001960 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	2220      	movs	r2, #32
 8001902:	4013      	ands	r3, r2
 8001904:	2b20      	cmp	r3, #32
 8001906:	d10f      	bne.n	8001928 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	2220      	movs	r2, #32
 8001910:	4013      	ands	r3, r2
 8001912:	2b20      	cmp	r3, #32
 8001914:	d108      	bne.n	8001928 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2221      	movs	r2, #33	; 0x21
 800191c:	4252      	negs	r2, r2
 800191e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	0018      	movs	r0, r3
 8001924:	f000 f89a 	bl	8001a5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001928:	46c0      	nop			; (mov r8, r8)
 800192a:	46bd      	mov	sp, r7
 800192c:	b002      	add	sp, #8
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001938:	46c0      	nop			; (mov r8, r8)
 800193a:	46bd      	mov	sp, r7
 800193c:	b002      	add	sp, #8
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001948:	46c0      	nop			; (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	b002      	add	sp, #8
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001958:	46c0      	nop			; (mov r8, r8)
 800195a:	46bd      	mov	sp, r7
 800195c:	b002      	add	sp, #8
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001968:	46c0      	nop			; (mov r8, r8)
 800196a:	46bd      	mov	sp, r7
 800196c:	b002      	add	sp, #8
 800196e:	bd80      	pop	{r7, pc}

08001970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a30      	ldr	r2, [pc, #192]	; (8001a44 <TIM_Base_SetConfig+0xd4>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d008      	beq.n	800199a <TIM_Base_SetConfig+0x2a>
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	05db      	lsls	r3, r3, #23
 800198e:	429a      	cmp	r2, r3
 8001990:	d003      	beq.n	800199a <TIM_Base_SetConfig+0x2a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a2c      	ldr	r2, [pc, #176]	; (8001a48 <TIM_Base_SetConfig+0xd8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d108      	bne.n	80019ac <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2270      	movs	r2, #112	; 0x70
 800199e:	4393      	bics	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a25      	ldr	r2, [pc, #148]	; (8001a44 <TIM_Base_SetConfig+0xd4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d014      	beq.n	80019de <TIM_Base_SetConfig+0x6e>
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	05db      	lsls	r3, r3, #23
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d00f      	beq.n	80019de <TIM_Base_SetConfig+0x6e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a21      	ldr	r2, [pc, #132]	; (8001a48 <TIM_Base_SetConfig+0xd8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00b      	beq.n	80019de <TIM_Base_SetConfig+0x6e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a20      	ldr	r2, [pc, #128]	; (8001a4c <TIM_Base_SetConfig+0xdc>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d007      	beq.n	80019de <TIM_Base_SetConfig+0x6e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a1f      	ldr	r2, [pc, #124]	; (8001a50 <TIM_Base_SetConfig+0xe0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d003      	beq.n	80019de <TIM_Base_SetConfig+0x6e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a1e      	ldr	r2, [pc, #120]	; (8001a54 <TIM_Base_SetConfig+0xe4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d108      	bne.n	80019f0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4a1d      	ldr	r2, [pc, #116]	; (8001a58 <TIM_Base_SetConfig+0xe8>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2280      	movs	r2, #128	; 0x80
 80019f4:	4393      	bics	r3, r2
 80019f6:	001a      	movs	r2, r3
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <TIM_Base_SetConfig+0xd4>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d007      	beq.n	8001a2e <TIM_Base_SetConfig+0xbe>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <TIM_Base_SetConfig+0xe0>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d003      	beq.n	8001a2e <TIM_Base_SetConfig+0xbe>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <TIM_Base_SetConfig+0xe4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d103      	bne.n	8001a36 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	615a      	str	r2, [r3, #20]
}
 8001a3c:	46c0      	nop			; (mov r8, r8)
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b004      	add	sp, #16
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40012c00 	.word	0x40012c00
 8001a48:	40000400 	.word	0x40000400
 8001a4c:	40002000 	.word	0x40002000
 8001a50:	40014400 	.word	0x40014400
 8001a54:	40014800 	.word	0x40014800
 8001a58:	fffffcff 	.word	0xfffffcff

08001a5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a64:	46c0      	nop			; (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b002      	add	sp, #8
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a74:	46c0      	nop			; (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b002      	add	sp, #8
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e044      	b.n	8001b18 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d107      	bne.n	8001aa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2270      	movs	r2, #112	; 0x70
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f7fe fd11 	bl	80004c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2224      	movs	r2, #36	; 0x24
 8001aaa:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	438a      	bics	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f000 f830 	bl	8001b24 <UART_SetConfig>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e024      	b.n	8001b18 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f000 f9a9 	bl	8001e30 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	490d      	ldr	r1, [pc, #52]	; (8001b20 <HAL_UART_Init+0xa4>)
 8001aea:	400a      	ands	r2, r1
 8001aec:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	212a      	movs	r1, #42	; 0x2a
 8001afa:	438a      	bics	r2, r1
 8001afc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2101      	movs	r1, #1
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	0018      	movs	r0, r3
 8001b12:	f000 fa41 	bl	8001f98 <UART_CheckIdleState>
 8001b16:	0003      	movs	r3, r0
}
 8001b18:	0018      	movs	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b002      	add	sp, #8
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	ffffb7ff 	.word	0xffffb7ff

08001b24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b30:	2317      	movs	r3, #23
 8001b32:	18fb      	adds	r3, r7, r3
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4aad      	ldr	r2, [pc, #692]	; (8001e0c <UART_SetConfig+0x2e8>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	4aa8      	ldr	r2, [pc, #672]	; (8001e10 <UART_SetConfig+0x2ec>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	0019      	movs	r1, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	4a9f      	ldr	r2, [pc, #636]	; (8001e14 <UART_SetConfig+0x2f0>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	0019      	movs	r1, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a9b      	ldr	r2, [pc, #620]	; (8001e18 <UART_SetConfig+0x2f4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d125      	bne.n	8001bfa <UART_SetConfig+0xd6>
 8001bae:	4b9b      	ldr	r3, [pc, #620]	; (8001e1c <UART_SetConfig+0x2f8>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d00f      	beq.n	8001bda <UART_SetConfig+0xb6>
 8001bba:	d304      	bcc.n	8001bc6 <UART_SetConfig+0xa2>
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d011      	beq.n	8001be4 <UART_SetConfig+0xc0>
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d005      	beq.n	8001bd0 <UART_SetConfig+0xac>
 8001bc4:	e013      	b.n	8001bee <UART_SetConfig+0xca>
 8001bc6:	231f      	movs	r3, #31
 8001bc8:	18fb      	adds	r3, r7, r3
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
 8001bce:	e022      	b.n	8001c16 <UART_SetConfig+0xf2>
 8001bd0:	231f      	movs	r3, #31
 8001bd2:	18fb      	adds	r3, r7, r3
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	701a      	strb	r2, [r3, #0]
 8001bd8:	e01d      	b.n	8001c16 <UART_SetConfig+0xf2>
 8001bda:	231f      	movs	r3, #31
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	2204      	movs	r2, #4
 8001be0:	701a      	strb	r2, [r3, #0]
 8001be2:	e018      	b.n	8001c16 <UART_SetConfig+0xf2>
 8001be4:	231f      	movs	r3, #31
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	2208      	movs	r2, #8
 8001bea:	701a      	strb	r2, [r3, #0]
 8001bec:	e013      	b.n	8001c16 <UART_SetConfig+0xf2>
 8001bee:	231f      	movs	r3, #31
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	2210      	movs	r2, #16
 8001bf4:	701a      	strb	r2, [r3, #0]
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	e00d      	b.n	8001c16 <UART_SetConfig+0xf2>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a88      	ldr	r2, [pc, #544]	; (8001e20 <UART_SetConfig+0x2fc>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d104      	bne.n	8001c0e <UART_SetConfig+0xea>
 8001c04:	231f      	movs	r3, #31
 8001c06:	18fb      	adds	r3, r7, r3
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
 8001c0c:	e003      	b.n	8001c16 <UART_SetConfig+0xf2>
 8001c0e:	231f      	movs	r3, #31
 8001c10:	18fb      	adds	r3, r7, r3
 8001c12:	2210      	movs	r2, #16
 8001c14:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69da      	ldr	r2, [r3, #28]
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d000      	beq.n	8001c24 <UART_SetConfig+0x100>
 8001c22:	e07d      	b.n	8001d20 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8001c24:	231f      	movs	r3, #31
 8001c26:	18fb      	adds	r3, r7, r3
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d01c      	beq.n	8001c68 <UART_SetConfig+0x144>
 8001c2e:	dc02      	bgt.n	8001c36 <UART_SetConfig+0x112>
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <UART_SetConfig+0x11c>
 8001c34:	e04b      	b.n	8001cce <UART_SetConfig+0x1aa>
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d025      	beq.n	8001c86 <UART_SetConfig+0x162>
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d037      	beq.n	8001cae <UART_SetConfig+0x18a>
 8001c3e:	e046      	b.n	8001cce <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001c40:	f7ff fcca 	bl	80015d8 <HAL_RCC_GetPCLK1Freq>
 8001c44:	0003      	movs	r3, r0
 8001c46:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	005a      	lsls	r2, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	085b      	lsrs	r3, r3, #1
 8001c52:	18d2      	adds	r2, r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	0019      	movs	r1, r3
 8001c5a:	0010      	movs	r0, r2
 8001c5c:	f7fe fa54 	bl	8000108 <__udivsi3>
 8001c60:	0003      	movs	r3, r0
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	61bb      	str	r3, [r7, #24]
        break;
 8001c66:	e037      	b.n	8001cd8 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	085b      	lsrs	r3, r3, #1
 8001c6e:	4a6d      	ldr	r2, [pc, #436]	; (8001e24 <UART_SetConfig+0x300>)
 8001c70:	189a      	adds	r2, r3, r2
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	0019      	movs	r1, r3
 8001c78:	0010      	movs	r0, r2
 8001c7a:	f7fe fa45 	bl	8000108 <__udivsi3>
 8001c7e:	0003      	movs	r3, r0
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	61bb      	str	r3, [r7, #24]
        break;
 8001c84:	e028      	b.n	8001cd8 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001c86:	f7ff fc1f 	bl	80014c8 <HAL_RCC_GetSysClockFreq>
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	005a      	lsls	r2, r3, #1
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	085b      	lsrs	r3, r3, #1
 8001c98:	18d2      	adds	r2, r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	0019      	movs	r1, r3
 8001ca0:	0010      	movs	r0, r2
 8001ca2:	f7fe fa31 	bl	8000108 <__udivsi3>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	61bb      	str	r3, [r7, #24]
        break;
 8001cac:	e014      	b.n	8001cd8 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	085b      	lsrs	r3, r3, #1
 8001cb4:	2280      	movs	r2, #128	; 0x80
 8001cb6:	0252      	lsls	r2, r2, #9
 8001cb8:	189a      	adds	r2, r3, r2
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	0010      	movs	r0, r2
 8001cc2:	f7fe fa21 	bl	8000108 <__udivsi3>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	61bb      	str	r3, [r7, #24]
        break;
 8001ccc:	e004      	b.n	8001cd8 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8001cce:	2317      	movs	r3, #23
 8001cd0:	18fb      	adds	r3, r7, r3
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	701a      	strb	r2, [r3, #0]
        break;
 8001cd6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	2b0f      	cmp	r3, #15
 8001cdc:	d91b      	bls.n	8001d16 <UART_SetConfig+0x1f2>
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	4a51      	ldr	r2, [pc, #324]	; (8001e28 <UART_SetConfig+0x304>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d817      	bhi.n	8001d16 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	200a      	movs	r0, #10
 8001cec:	183b      	adds	r3, r7, r0
 8001cee:	210f      	movs	r1, #15
 8001cf0:	438a      	bics	r2, r1
 8001cf2:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	085b      	lsrs	r3, r3, #1
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	2207      	movs	r2, #7
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	b299      	uxth	r1, r3
 8001d00:	183b      	adds	r3, r7, r0
 8001d02:	183a      	adds	r2, r7, r0
 8001d04:	8812      	ldrh	r2, [r2, #0]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	183a      	adds	r2, r7, r0
 8001d10:	8812      	ldrh	r2, [r2, #0]
 8001d12:	60da      	str	r2, [r3, #12]
 8001d14:	e06c      	b.n	8001df0 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8001d16:	2317      	movs	r3, #23
 8001d18:	18fb      	adds	r3, r7, r3
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	701a      	strb	r2, [r3, #0]
 8001d1e:	e067      	b.n	8001df0 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8001d20:	231f      	movs	r3, #31
 8001d22:	18fb      	adds	r3, r7, r3
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d01b      	beq.n	8001d62 <UART_SetConfig+0x23e>
 8001d2a:	dc02      	bgt.n	8001d32 <UART_SetConfig+0x20e>
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <UART_SetConfig+0x218>
 8001d30:	e049      	b.n	8001dc6 <UART_SetConfig+0x2a2>
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d024      	beq.n	8001d80 <UART_SetConfig+0x25c>
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d035      	beq.n	8001da6 <UART_SetConfig+0x282>
 8001d3a:	e044      	b.n	8001dc6 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001d3c:	f7ff fc4c 	bl	80015d8 <HAL_RCC_GetPCLK1Freq>
 8001d40:	0003      	movs	r3, r0
 8001d42:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	085a      	lsrs	r2, r3, #1
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	18d2      	adds	r2, r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	0019      	movs	r1, r3
 8001d54:	0010      	movs	r0, r2
 8001d56:	f7fe f9d7 	bl	8000108 <__udivsi3>
 8001d5a:	0003      	movs	r3, r0
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	61bb      	str	r3, [r7, #24]
        break;
 8001d60:	e036      	b.n	8001dd0 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	085b      	lsrs	r3, r3, #1
 8001d68:	4a30      	ldr	r2, [pc, #192]	; (8001e2c <UART_SetConfig+0x308>)
 8001d6a:	189a      	adds	r2, r3, r2
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	0019      	movs	r1, r3
 8001d72:	0010      	movs	r0, r2
 8001d74:	f7fe f9c8 	bl	8000108 <__udivsi3>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	61bb      	str	r3, [r7, #24]
        break;
 8001d7e:	e027      	b.n	8001dd0 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001d80:	f7ff fba2 	bl	80014c8 <HAL_RCC_GetSysClockFreq>
 8001d84:	0003      	movs	r3, r0
 8001d86:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	085a      	lsrs	r2, r3, #1
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	18d2      	adds	r2, r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	0019      	movs	r1, r3
 8001d98:	0010      	movs	r0, r2
 8001d9a:	f7fe f9b5 	bl	8000108 <__udivsi3>
 8001d9e:	0003      	movs	r3, r0
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	61bb      	str	r3, [r7, #24]
        break;
 8001da4:	e014      	b.n	8001dd0 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	085b      	lsrs	r3, r3, #1
 8001dac:	2280      	movs	r2, #128	; 0x80
 8001dae:	0212      	lsls	r2, r2, #8
 8001db0:	189a      	adds	r2, r3, r2
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	0019      	movs	r1, r3
 8001db8:	0010      	movs	r0, r2
 8001dba:	f7fe f9a5 	bl	8000108 <__udivsi3>
 8001dbe:	0003      	movs	r3, r0
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	61bb      	str	r3, [r7, #24]
        break;
 8001dc4:	e004      	b.n	8001dd0 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8001dc6:	2317      	movs	r3, #23
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	2201      	movs	r2, #1
 8001dcc:	701a      	strb	r2, [r3, #0]
        break;
 8001dce:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2b0f      	cmp	r3, #15
 8001dd4:	d908      	bls.n	8001de8 <UART_SetConfig+0x2c4>
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	4a13      	ldr	r2, [pc, #76]	; (8001e28 <UART_SetConfig+0x304>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d804      	bhi.n	8001de8 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	e003      	b.n	8001df0 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8001de8:	2317      	movs	r3, #23
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8001dfc:	2317      	movs	r3, #23
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	781b      	ldrb	r3, [r3, #0]
}
 8001e02:	0018      	movs	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b008      	add	sp, #32
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	efff69f3 	.word	0xefff69f3
 8001e10:	ffffcfff 	.word	0xffffcfff
 8001e14:	fffff4ff 	.word	0xfffff4ff
 8001e18:	40013800 	.word	0x40013800
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40004400 	.word	0x40004400
 8001e24:	00f42400 	.word	0x00f42400
 8001e28:	0000ffff 	.word	0x0000ffff
 8001e2c:	007a1200 	.word	0x007a1200

08001e30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d00b      	beq.n	8001e5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4a4a      	ldr	r2, [pc, #296]	; (8001f74 <UART_AdvFeatureConfig+0x144>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	2202      	movs	r2, #2
 8001e60:	4013      	ands	r3, r2
 8001e62:	d00b      	beq.n	8001e7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4a43      	ldr	r2, [pc, #268]	; (8001f78 <UART_AdvFeatureConfig+0x148>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	0019      	movs	r1, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	2204      	movs	r2, #4
 8001e82:	4013      	ands	r3, r2
 8001e84:	d00b      	beq.n	8001e9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4a3b      	ldr	r2, [pc, #236]	; (8001f7c <UART_AdvFeatureConfig+0x14c>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	0019      	movs	r1, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	2208      	movs	r2, #8
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d00b      	beq.n	8001ec0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	4a34      	ldr	r2, [pc, #208]	; (8001f80 <UART_AdvFeatureConfig+0x150>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	0019      	movs	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	2210      	movs	r2, #16
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d00b      	beq.n	8001ee2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4a2c      	ldr	r2, [pc, #176]	; (8001f84 <UART_AdvFeatureConfig+0x154>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	0019      	movs	r1, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d00b      	beq.n	8001f04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	4a25      	ldr	r2, [pc, #148]	; (8001f88 <UART_AdvFeatureConfig+0x158>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	0019      	movs	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	2240      	movs	r2, #64	; 0x40
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d01d      	beq.n	8001f4a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	4a1d      	ldr	r2, [pc, #116]	; (8001f8c <UART_AdvFeatureConfig+0x15c>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	0019      	movs	r1, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	035b      	lsls	r3, r3, #13
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d10b      	bne.n	8001f4a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4a15      	ldr	r2, [pc, #84]	; (8001f90 <UART_AdvFeatureConfig+0x160>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	2280      	movs	r2, #128	; 0x80
 8001f50:	4013      	ands	r3, r2
 8001f52:	d00b      	beq.n	8001f6c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4a0e      	ldr	r2, [pc, #56]	; (8001f94 <UART_AdvFeatureConfig+0x164>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	0019      	movs	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	605a      	str	r2, [r3, #4]
  }
}
 8001f6c:	46c0      	nop			; (mov r8, r8)
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b002      	add	sp, #8
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	fffdffff 	.word	0xfffdffff
 8001f78:	fffeffff 	.word	0xfffeffff
 8001f7c:	fffbffff 	.word	0xfffbffff
 8001f80:	ffff7fff 	.word	0xffff7fff
 8001f84:	ffffefff 	.word	0xffffefff
 8001f88:	ffffdfff 	.word	0xffffdfff
 8001f8c:	ffefffff 	.word	0xffefffff
 8001f90:	ff9fffff 	.word	0xff9fffff
 8001f94:	fff7ffff 	.word	0xfff7ffff

08001f98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001fa6:	f7fe fbf3 	bl	8000790 <HAL_GetTick>
 8001faa:	0003      	movs	r3, r0
 8001fac:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2208      	movs	r2, #8
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d10d      	bne.n	8001fd8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	0399      	lsls	r1, r3, #14
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	4b16      	ldr	r3, [pc, #88]	; (8002020 <UART_CheckIdleState+0x88>)
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	0013      	movs	r3, r2
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f000 f82a 	bl	8002024 <UART_WaitOnFlagUntilTimeout>
 8001fd0:	1e03      	subs	r3, r0, #0
 8001fd2:	d001      	beq.n	8001fd8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e01f      	b.n	8002018 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2204      	movs	r2, #4
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d10d      	bne.n	8002002 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	03d9      	lsls	r1, r3, #15
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <UART_CheckIdleState+0x88>)
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	0013      	movs	r3, r2
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f000 f815 	bl	8002024 <UART_WaitOnFlagUntilTimeout>
 8001ffa:	1e03      	subs	r3, r0, #0
 8001ffc:	d001      	beq.n	8002002 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e00a      	b.n	8002018 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2220      	movs	r2, #32
 8002006:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2220      	movs	r2, #32
 800200c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2270      	movs	r2, #112	; 0x70
 8002012:	2100      	movs	r1, #0
 8002014:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	0018      	movs	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	b004      	add	sp, #16
 800201e:	bd80      	pop	{r7, pc}
 8002020:	01ffffff 	.word	0x01ffffff

08002024 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	1dfb      	adds	r3, r7, #7
 8002032:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002034:	e05d      	b.n	80020f2 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	3301      	adds	r3, #1
 800203a:	d05a      	beq.n	80020f2 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800203c:	f7fe fba8 	bl	8000790 <HAL_GetTick>
 8002040:	0002      	movs	r2, r0
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	429a      	cmp	r2, r3
 800204a:	d302      	bcc.n	8002052 <UART_WaitOnFlagUntilTimeout+0x2e>
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d11b      	bne.n	800208a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	492f      	ldr	r1, [pc, #188]	; (800211c <UART_WaitOnFlagUntilTimeout+0xf8>)
 800205e:	400a      	ands	r2, r1
 8002060:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2101      	movs	r1, #1
 800206e:	438a      	bics	r2, r1
 8002070:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2220      	movs	r2, #32
 8002076:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2220      	movs	r2, #32
 800207c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2270      	movs	r2, #112	; 0x70
 8002082:	2100      	movs	r1, #0
 8002084:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e043      	b.n	8002112 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2204      	movs	r2, #4
 8002092:	4013      	ands	r3, r2
 8002094:	d02d      	beq.n	80020f2 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	69da      	ldr	r2, [r3, #28]
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	401a      	ands	r2, r3
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d123      	bne.n	80020f2 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2280      	movs	r2, #128	; 0x80
 80020b0:	0112      	lsls	r2, r2, #4
 80020b2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4917      	ldr	r1, [pc, #92]	; (800211c <UART_WaitOnFlagUntilTimeout+0xf8>)
 80020c0:	400a      	ands	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2101      	movs	r1, #1
 80020d0:	438a      	bics	r2, r1
 80020d2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2220      	movs	r2, #32
 80020d8:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2220      	movs	r2, #32
 80020de:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2220      	movs	r2, #32
 80020e4:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2270      	movs	r2, #112	; 0x70
 80020ea:	2100      	movs	r1, #0
 80020ec:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e00f      	b.n	8002112 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	4013      	ands	r3, r2
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	425a      	negs	r2, r3
 8002102:	4153      	adcs	r3, r2
 8002104:	b2db      	uxtb	r3, r3
 8002106:	001a      	movs	r2, r3
 8002108:	1dfb      	adds	r3, r7, #7
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d092      	beq.n	8002036 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	0018      	movs	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	b004      	add	sp, #16
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	fffffe5f 	.word	0xfffffe5f

08002120 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002126:	f3ef 8305 	mrs	r3, IPSR
 800212a:	60bb      	str	r3, [r7, #8]
  return(result);
 800212c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002132:	f3ef 8310 	mrs	r3, PRIMASK
 8002136:	607b      	str	r3, [r7, #4]
  return(result);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d007      	beq.n	800214e <osKernelInitialize+0x2e>
 800213e:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <osKernelInitialize+0x54>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d103      	bne.n	800214e <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8002146:	2306      	movs	r3, #6
 8002148:	425b      	negs	r3, r3
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	e00c      	b.n	8002168 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 800214e:	4b09      	ldr	r3, [pc, #36]	; (8002174 <osKernelInitialize+0x54>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d105      	bne.n	8002162 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002156:	4b07      	ldr	r3, [pc, #28]	; (8002174 <osKernelInitialize+0x54>)
 8002158:	2201      	movs	r2, #1
 800215a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	e002      	b.n	8002168 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8002162:	2301      	movs	r3, #1
 8002164:	425b      	negs	r3, r3
 8002166:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002168:	68fb      	ldr	r3, [r7, #12]
}
 800216a:	0018      	movs	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	b004      	add	sp, #16
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	200000a4 	.word	0x200000a4

08002178 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800217e:	f3ef 8305 	mrs	r3, IPSR
 8002182:	60bb      	str	r3, [r7, #8]
  return(result);
 8002184:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800218a:	f3ef 8310 	mrs	r3, PRIMASK
 800218e:	607b      	str	r3, [r7, #4]
  return(result);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d007      	beq.n	80021a6 <osKernelStart+0x2e>
 8002196:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <osKernelStart+0x58>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d103      	bne.n	80021a6 <osKernelStart+0x2e>
    stat = osErrorISR;
 800219e:	2306      	movs	r3, #6
 80021a0:	425b      	negs	r3, r3
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	e00e      	b.n	80021c4 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <osKernelStart+0x58>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d107      	bne.n	80021be <osKernelStart+0x46>
      KernelState = osKernelRunning;
 80021ae:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <osKernelStart+0x58>)
 80021b0:	2202      	movs	r2, #2
 80021b2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80021b4:	f000 ff94 	bl	80030e0 <vTaskStartScheduler>
      stat = osOK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	e002      	b.n	80021c4 <osKernelStart+0x4c>
    } else {
      stat = osError;
 80021be:	2301      	movs	r3, #1
 80021c0:	425b      	negs	r3, r3
 80021c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80021c4:	68fb      	ldr	r3, [r7, #12]
}
 80021c6:	0018      	movs	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	b004      	add	sp, #16
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	200000a4 	.word	0x200000a4

080021d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80021d4:	b5b0      	push	{r4, r5, r7, lr}
 80021d6:	b090      	sub	sp, #64	; 0x40
 80021d8:	af04      	add	r7, sp, #16
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021e4:	f3ef 8305 	mrs	r3, IPSR
 80021e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80021ea:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d000      	beq.n	80021f2 <osThreadNew+0x1e>
 80021f0:	e090      	b.n	8002314 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021f2:	f3ef 8310 	mrs	r3, PRIMASK
 80021f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d004      	beq.n	8002208 <osThreadNew+0x34>
 80021fe:	4b48      	ldr	r3, [pc, #288]	; (8002320 <osThreadNew+0x14c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d100      	bne.n	8002208 <osThreadNew+0x34>
 8002206:	e085      	b.n	8002314 <osThreadNew+0x140>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d100      	bne.n	8002210 <osThreadNew+0x3c>
 800220e:	e081      	b.n	8002314 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002214:	2318      	movs	r3, #24
 8002216:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8002218:	2117      	movs	r1, #23
 800221a:	187b      	adds	r3, r7, r1
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8002220:	187b      	adds	r3, r7, r1
 8002222:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8002224:	2301      	movs	r3, #1
 8002226:	425b      	negs	r3, r3
 8002228:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d044      	beq.n	80022ba <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <osThreadNew+0x6a>
        name = attr->name;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	2b00      	cmp	r3, #0
 8002250:	d007      	beq.n	8002262 <osThreadNew+0x8e>
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	2b38      	cmp	r3, #56	; 0x38
 8002256:	d804      	bhi.n	8002262 <osThreadNew+0x8e>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	4013      	ands	r3, r2
 8002260:	d001      	beq.n	8002266 <osThreadNew+0x92>
        return (NULL);
 8002262:	2300      	movs	r3, #0
 8002264:	e057      	b.n	8002316 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	089b      	lsrs	r3, r3, #2
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00e      	beq.n	800229c <osThreadNew+0xc8>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	2bbb      	cmp	r3, #187	; 0xbb
 8002284:	d90a      	bls.n	800229c <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800228a:	2b00      	cmp	r3, #0
 800228c:	d006      	beq.n	800229c <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <osThreadNew+0xc8>
        mem = 1;
 8002296:	2301      	movs	r3, #1
 8002298:	623b      	str	r3, [r7, #32]
 800229a:	e010      	b.n	80022be <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10c      	bne.n	80022be <osThreadNew+0xea>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d108      	bne.n	80022be <osThreadNew+0xea>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d104      	bne.n	80022be <osThreadNew+0xea>
          mem = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	623b      	str	r3, [r7, #32]
 80022b8:	e001      	b.n	80022be <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d112      	bne.n	80022ea <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80022cc:	68bd      	ldr	r5, [r7, #8]
 80022ce:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80022d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	9302      	str	r3, [sp, #8]
 80022d6:	9201      	str	r2, [sp, #4]
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	002b      	movs	r3, r5
 80022de:	0022      	movs	r2, r4
 80022e0:	f000 fd49 	bl	8002d76 <xTaskCreateStatic>
 80022e4:	0003      	movs	r3, r0
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	e014      	b.n	8002314 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d111      	bne.n	8002314 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80022f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68bc      	ldr	r4, [r7, #8]
 80022f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	2310      	movs	r3, #16
 80022fc:	18fb      	adds	r3, r7, r3
 80022fe:	9301      	str	r3, [sp, #4]
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	0023      	movs	r3, r4
 8002306:	f000 fd79 	bl	8002dfc <xTaskCreate>
 800230a:	0003      	movs	r3, r0
 800230c:	2b01      	cmp	r3, #1
 800230e:	d001      	beq.n	8002314 <osThreadNew+0x140>
          hTask = NULL;
 8002310:	2300      	movs	r3, #0
 8002312:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002314:	693b      	ldr	r3, [r7, #16]
}
 8002316:	0018      	movs	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	b00c      	add	sp, #48	; 0x30
 800231c:	bdb0      	pop	{r4, r5, r7, pc}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	200000a4 	.word	0x200000a4

08002324 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800232c:	f3ef 8305 	mrs	r3, IPSR
 8002330:	613b      	str	r3, [r7, #16]
  return(result);
 8002332:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002334:	2b00      	cmp	r3, #0
 8002336:	d109      	bne.n	800234c <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002338:	f3ef 8310 	mrs	r3, PRIMASK
 800233c:	60fb      	str	r3, [r7, #12]
  return(result);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d007      	beq.n	8002354 <osDelay+0x30>
 8002344:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <osDelay+0x4c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d103      	bne.n	8002354 <osDelay+0x30>
    stat = osErrorISR;
 800234c:	2306      	movs	r3, #6
 800234e:	425b      	negs	r3, r3
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	e008      	b.n	8002366 <osDelay+0x42>
  }
  else {
    stat = osOK;
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <osDelay+0x42>
      vTaskDelay(ticks);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	0018      	movs	r0, r3
 8002362:	f000 fe97 	bl	8003094 <vTaskDelay>
    }
  }

  return (stat);
 8002366:	697b      	ldr	r3, [r7, #20]
}
 8002368:	0018      	movs	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	b006      	add	sp, #24
 800236e:	bd80      	pop	{r7, pc}
 8002370:	200000a4 	.word	0x200000a4

08002374 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4a06      	ldr	r2, [pc, #24]	; (800239c <vApplicationGetIdleTaskMemory+0x28>)
 8002384:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	4a05      	ldr	r2, [pc, #20]	; (80023a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800238a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2280      	movs	r2, #128	; 0x80
 8002390:	601a      	str	r2, [r3, #0]
}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	46bd      	mov	sp, r7
 8002396:	b004      	add	sp, #16
 8002398:	bd80      	pop	{r7, pc}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	200000a8 	.word	0x200000a8
 80023a0:	20000164 	.word	0x20000164

080023a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4a06      	ldr	r2, [pc, #24]	; (80023cc <vApplicationGetTimerTaskMemory+0x28>)
 80023b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80023ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2280      	movs	r2, #128	; 0x80
 80023c0:	0052      	lsls	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]
}
 80023c4:	46c0      	nop			; (mov r8, r8)
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b004      	add	sp, #16
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000364 	.word	0x20000364
 80023d0:	20000420 	.word	0x20000420

080023d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3308      	adds	r3, #8
 80023e0:	001a      	movs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	4252      	negs	r2, r2
 80023ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3308      	adds	r3, #8
 80023f2:	001a      	movs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3308      	adds	r3, #8
 80023fc:	001a      	movs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002408:	46c0      	nop			; (mov r8, r8)
 800240a:	46bd      	mov	sp, r7
 800240c:	b002      	add	sp, #8
 800240e:	bd80      	pop	{r7, pc}

08002410 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	46bd      	mov	sp, r7
 8002422:	b002      	add	sp, #8
 8002424:	bd80      	pop	{r7, pc}

08002426 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	601a      	str	r2, [r3, #0]
}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	46bd      	mov	sp, r7
 8002466:	b004      	add	sp, #16
 8002468:	bd80      	pop	{r7, pc}

0800246a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	3301      	adds	r3, #1
 800247e:	d103      	bne.n	8002488 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	e00c      	b.n	80024a2 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3308      	adds	r3, #8
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	e002      	b.n	8002496 <vListInsert+0x2c>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d2f6      	bcs.n	8002490 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	601a      	str	r2, [r3, #0]
}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b004      	add	sp, #16
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6892      	ldr	r2, [r2, #8]
 80024ec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6852      	ldr	r2, [r2, #4]
 80024f6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d103      	bne.n	800250a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	1e5a      	subs	r2, r3, #1
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
}
 800251e:	0018      	movs	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	b004      	add	sp, #16
 8002524:	bd80      	pop	{r7, pc}

08002526 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <xQueueGenericReset+0x18>
 800253a:	b672      	cpsid	i
 800253c:	e7fe      	b.n	800253c <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800253e:	f001 fdff 	bl	8004140 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	434b      	muls	r3, r1
 8002550:	18d2      	adds	r2, r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256c:	1e59      	subs	r1, r3, #1
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	434b      	muls	r3, r1
 8002574:	18d2      	adds	r2, r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2244      	movs	r2, #68	; 0x44
 800257e:	21ff      	movs	r1, #255	; 0xff
 8002580:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2245      	movs	r2, #69	; 0x45
 8002586:	21ff      	movs	r1, #255	; 0xff
 8002588:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10d      	bne.n	80025ac <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d013      	beq.n	80025c0 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	3310      	adds	r3, #16
 800259c:	0018      	movs	r0, r3
 800259e:	f000 fff5 	bl	800358c <xTaskRemoveFromEventList>
 80025a2:	1e03      	subs	r3, r0, #0
 80025a4:	d00c      	beq.n	80025c0 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80025a6:	f001 fdbb 	bl	8004120 <vPortYield>
 80025aa:	e009      	b.n	80025c0 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	3310      	adds	r3, #16
 80025b0:	0018      	movs	r0, r3
 80025b2:	f7ff ff0f 	bl	80023d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	3324      	adds	r3, #36	; 0x24
 80025ba:	0018      	movs	r0, r3
 80025bc:	f7ff ff0a 	bl	80023d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80025c0:	f001 fdd0 	bl	8004164 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80025c4:	2301      	movs	r3, #1
}
 80025c6:	0018      	movs	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b004      	add	sp, #16
 80025cc:	bd80      	pop	{r7, pc}

080025ce <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80025ce:	b590      	push	{r4, r7, lr}
 80025d0:	b089      	sub	sp, #36	; 0x24
 80025d2:	af02      	add	r7, sp, #8
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
 80025da:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <xQueueGenericCreateStatic+0x18>
 80025e2:	b672      	cpsid	i
 80025e4:	e7fe      	b.n	80025e4 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <xQueueGenericCreateStatic+0x22>
 80025ec:	b672      	cpsid	i
 80025ee:	e7fe      	b.n	80025ee <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <xQueueGenericCreateStatic+0x2e>
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <xQueueGenericCreateStatic+0x32>
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <xQueueGenericCreateStatic+0x34>
 8002600:	2300      	movs	r3, #0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <xQueueGenericCreateStatic+0x3c>
 8002606:	b672      	cpsid	i
 8002608:	e7fe      	b.n	8002608 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d102      	bne.n	8002616 <xQueueGenericCreateStatic+0x48>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <xQueueGenericCreateStatic+0x4c>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <xQueueGenericCreateStatic+0x4e>
 800261a:	2300      	movs	r3, #0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <xQueueGenericCreateStatic+0x56>
 8002620:	b672      	cpsid	i
 8002622:	e7fe      	b.n	8002622 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002624:	2350      	movs	r3, #80	; 0x50
 8002626:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	2b50      	cmp	r3, #80	; 0x50
 800262c:	d001      	beq.n	8002632 <xQueueGenericCreateStatic+0x64>
 800262e:	b672      	cpsid	i
 8002630:	e7fe      	b.n	8002630 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00e      	beq.n	800265a <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2246      	movs	r2, #70	; 0x46
 8002640:	2101      	movs	r1, #1
 8002642:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002644:	2328      	movs	r3, #40	; 0x28
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	781c      	ldrb	r4, [r3, #0]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	0023      	movs	r3, r4
 8002656:	f000 f805 	bl	8002664 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800265a:	697b      	ldr	r3, [r7, #20]
	}
 800265c:	0018      	movs	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	b007      	add	sp, #28
 8002662:	bd90      	pop	{r4, r7, pc}

08002664 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
 8002670:	001a      	movs	r2, r3
 8002672:	1cfb      	adds	r3, r7, #3
 8002674:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d103      	bne.n	8002684 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	e002      	b.n	800268a <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	2101      	movs	r1, #1
 800269a:	0018      	movs	r0, r3
 800269c:	f7ff ff43 	bl	8002526 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	1cfa      	adds	r2, r7, #3
 80026a4:	214c      	movs	r1, #76	; 0x4c
 80026a6:	7812      	ldrb	r2, [r2, #0]
 80026a8:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b004      	add	sp, #16
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b08a      	sub	sp, #40	; 0x28
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80026c0:	2300      	movs	r3, #0
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <xQueueGenericSend+0x20>
 80026ce:	b672      	cpsid	i
 80026d0:	e7fe      	b.n	80026d0 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d103      	bne.n	80026e0 <xQueueGenericSend+0x2e>
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <xQueueGenericSend+0x32>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <xQueueGenericSend+0x34>
 80026e4:	2300      	movs	r3, #0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <xQueueGenericSend+0x3c>
 80026ea:	b672      	cpsid	i
 80026ec:	e7fe      	b.n	80026ec <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d103      	bne.n	80026fc <xQueueGenericSend+0x4a>
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <xQueueGenericSend+0x4e>
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <xQueueGenericSend+0x50>
 8002700:	2300      	movs	r3, #0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <xQueueGenericSend+0x58>
 8002706:	b672      	cpsid	i
 8002708:	e7fe      	b.n	8002708 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800270a:	f001 f8dd 	bl	80038c8 <xTaskGetSchedulerState>
 800270e:	1e03      	subs	r3, r0, #0
 8002710:	d102      	bne.n	8002718 <xQueueGenericSend+0x66>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <xQueueGenericSend+0x6a>
 8002718:	2301      	movs	r3, #1
 800271a:	e000      	b.n	800271e <xQueueGenericSend+0x6c>
 800271c:	2300      	movs	r3, #0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <xQueueGenericSend+0x74>
 8002722:	b672      	cpsid	i
 8002724:	e7fe      	b.n	8002724 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002726:	f001 fd0b 	bl	8004140 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002732:	429a      	cmp	r2, r3
 8002734:	d302      	bcc.n	800273c <xQueueGenericSend+0x8a>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b02      	cmp	r3, #2
 800273a:	d11e      	bne.n	800277a <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	0018      	movs	r0, r3
 8002744:	f000 f99f 	bl	8002a86 <prvCopyDataToQueue>
 8002748:	0003      	movs	r3, r0
 800274a:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	2b00      	cmp	r3, #0
 8002752:	d009      	beq.n	8002768 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	3324      	adds	r3, #36	; 0x24
 8002758:	0018      	movs	r0, r3
 800275a:	f000 ff17 	bl	800358c <xTaskRemoveFromEventList>
 800275e:	1e03      	subs	r3, r0, #0
 8002760:	d007      	beq.n	8002772 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002762:	f001 fcdd 	bl	8004120 <vPortYield>
 8002766:	e004      	b.n	8002772 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800276e:	f001 fcd7 	bl	8004120 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002772:	f001 fcf7 	bl	8004164 <vPortExitCritical>
				return pdPASS;
 8002776:	2301      	movs	r3, #1
 8002778:	e05b      	b.n	8002832 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d103      	bne.n	8002788 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002780:	f001 fcf0 	bl	8004164 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002784:	2300      	movs	r3, #0
 8002786:	e054      	b.n	8002832 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800278e:	2314      	movs	r3, #20
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	0018      	movs	r0, r3
 8002794:	f000 ff56 	bl	8003644 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002798:	2301      	movs	r3, #1
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800279c:	f001 fce2 	bl	8004164 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027a0:	f000 fcfc 	bl	800319c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027a4:	f001 fccc 	bl	8004140 <vPortEnterCritical>
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	2244      	movs	r2, #68	; 0x44
 80027ac:	5c9b      	ldrb	r3, [r3, r2]
 80027ae:	b25b      	sxtb	r3, r3
 80027b0:	3301      	adds	r3, #1
 80027b2:	d103      	bne.n	80027bc <xQueueGenericSend+0x10a>
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	2244      	movs	r2, #68	; 0x44
 80027b8:	2100      	movs	r1, #0
 80027ba:	5499      	strb	r1, [r3, r2]
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	2245      	movs	r2, #69	; 0x45
 80027c0:	5c9b      	ldrb	r3, [r3, r2]
 80027c2:	b25b      	sxtb	r3, r3
 80027c4:	3301      	adds	r3, #1
 80027c6:	d103      	bne.n	80027d0 <xQueueGenericSend+0x11e>
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	2245      	movs	r2, #69	; 0x45
 80027cc:	2100      	movs	r1, #0
 80027ce:	5499      	strb	r1, [r3, r2]
 80027d0:	f001 fcc8 	bl	8004164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027d4:	1d3a      	adds	r2, r7, #4
 80027d6:	2314      	movs	r3, #20
 80027d8:	18fb      	adds	r3, r7, r3
 80027da:	0011      	movs	r1, r2
 80027dc:	0018      	movs	r0, r3
 80027de:	f000 ff45 	bl	800366c <xTaskCheckForTimeOut>
 80027e2:	1e03      	subs	r3, r0, #0
 80027e4:	d11e      	bne.n	8002824 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	0018      	movs	r0, r3
 80027ea:	f000 fa51 	bl	8002c90 <prvIsQueueFull>
 80027ee:	1e03      	subs	r3, r0, #0
 80027f0:	d011      	beq.n	8002816 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	3310      	adds	r3, #16
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	0011      	movs	r1, r2
 80027fa:	0018      	movs	r0, r3
 80027fc:	f000 fe82 	bl	8003504 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	0018      	movs	r0, r3
 8002804:	f000 f9d0 	bl	8002ba8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002808:	f000 fcd4 	bl	80031b4 <xTaskResumeAll>
 800280c:	1e03      	subs	r3, r0, #0
 800280e:	d18a      	bne.n	8002726 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8002810:	f001 fc86 	bl	8004120 <vPortYield>
 8002814:	e787      	b.n	8002726 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	0018      	movs	r0, r3
 800281a:	f000 f9c5 	bl	8002ba8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800281e:	f000 fcc9 	bl	80031b4 <xTaskResumeAll>
 8002822:	e780      	b.n	8002726 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	0018      	movs	r0, r3
 8002828:	f000 f9be 	bl	8002ba8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800282c:	f000 fcc2 	bl	80031b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002830:	2300      	movs	r3, #0
		}
	}
}
 8002832:	0018      	movs	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	b00a      	add	sp, #40	; 0x28
 8002838:	bd80      	pop	{r7, pc}

0800283a <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800283a:	b590      	push	{r4, r7, lr}
 800283c:	b089      	sub	sp, #36	; 0x24
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
 8002846:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <xQueueGenericSendFromISR+0x1c>
 8002852:	b672      	cpsid	i
 8002854:	e7fe      	b.n	8002854 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d103      	bne.n	8002864 <xQueueGenericSendFromISR+0x2a>
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <xQueueGenericSendFromISR+0x2e>
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <xQueueGenericSendFromISR+0x30>
 8002868:	2300      	movs	r3, #0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <xQueueGenericSendFromISR+0x38>
 800286e:	b672      	cpsid	i
 8002870:	e7fe      	b.n	8002870 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d103      	bne.n	8002880 <xQueueGenericSendFromISR+0x46>
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <xQueueGenericSendFromISR+0x4a>
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <xQueueGenericSendFromISR+0x4c>
 8002884:	2300      	movs	r3, #0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <xQueueGenericSendFromISR+0x54>
 800288a:	b672      	cpsid	i
 800288c:	e7fe      	b.n	800288c <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800288e:	f001 fc81 	bl	8004194 <ulSetInterruptMaskFromISR>
 8002892:	0003      	movs	r3, r0
 8002894:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289e:	429a      	cmp	r2, r3
 80028a0:	d302      	bcc.n	80028a8 <xQueueGenericSendFromISR+0x6e>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d12e      	bne.n	8002906 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80028a8:	2413      	movs	r4, #19
 80028aa:	193b      	adds	r3, r7, r4
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	2145      	movs	r1, #69	; 0x45
 80028b0:	5c52      	ldrb	r2, [r2, r1]
 80028b2:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	0018      	movs	r0, r3
 80028bc:	f000 f8e3 	bl	8002a86 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80028c0:	193b      	adds	r3, r7, r4
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	b25b      	sxtb	r3, r3
 80028c6:	3301      	adds	r3, #1
 80028c8:	d111      	bne.n	80028ee <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d016      	beq.n	8002900 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	3324      	adds	r3, #36	; 0x24
 80028d6:	0018      	movs	r0, r3
 80028d8:	f000 fe58 	bl	800358c <xTaskRemoveFromEventList>
 80028dc:	1e03      	subs	r3, r0, #0
 80028de:	d00f      	beq.n	8002900 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00c      	beq.n	8002900 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	e008      	b.n	8002900 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80028ee:	2313      	movs	r3, #19
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	3301      	adds	r3, #1
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	b259      	sxtb	r1, r3
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	2245      	movs	r2, #69	; 0x45
 80028fe:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8002900:	2301      	movs	r3, #1
 8002902:	61fb      	str	r3, [r7, #28]
		{
 8002904:	e001      	b.n	800290a <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	0018      	movs	r0, r3
 800290e:	f001 fc47 	bl	80041a0 <vClearInterruptMaskFromISR>

	return xReturn;
 8002912:	69fb      	ldr	r3, [r7, #28]
}
 8002914:	0018      	movs	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	b009      	add	sp, #36	; 0x24
 800291a:	bd90      	pop	{r4, r7, pc}

0800291c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002928:	2300      	movs	r3, #0
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <xQueueReceive+0x1e>
 8002936:	b672      	cpsid	i
 8002938:	e7fe      	b.n	8002938 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d103      	bne.n	8002948 <xQueueReceive+0x2c>
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <xQueueReceive+0x30>
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <xQueueReceive+0x32>
 800294c:	2300      	movs	r3, #0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <xQueueReceive+0x3a>
 8002952:	b672      	cpsid	i
 8002954:	e7fe      	b.n	8002954 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002956:	f000 ffb7 	bl	80038c8 <xTaskGetSchedulerState>
 800295a:	1e03      	subs	r3, r0, #0
 800295c:	d102      	bne.n	8002964 <xQueueReceive+0x48>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <xQueueReceive+0x4c>
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <xQueueReceive+0x4e>
 8002968:	2300      	movs	r3, #0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <xQueueReceive+0x56>
 800296e:	b672      	cpsid	i
 8002970:	e7fe      	b.n	8002970 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002972:	f001 fbe5 	bl	8004140 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297a:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d01a      	beq.n	80029b8 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	0011      	movs	r1, r2
 8002988:	0018      	movs	r0, r3
 800298a:	f000 f8e7 	bl	8002b5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	1e5a      	subs	r2, r3, #1
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d008      	beq.n	80029b0 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	3310      	adds	r3, #16
 80029a2:	0018      	movs	r0, r3
 80029a4:	f000 fdf2 	bl	800358c <xTaskRemoveFromEventList>
 80029a8:	1e03      	subs	r3, r0, #0
 80029aa:	d001      	beq.n	80029b0 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80029ac:	f001 fbb8 	bl	8004120 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80029b0:	f001 fbd8 	bl	8004164 <vPortExitCritical>
				return pdPASS;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e062      	b.n	8002a7e <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d103      	bne.n	80029c6 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029be:	f001 fbd1 	bl	8004164 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e05b      	b.n	8002a7e <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d106      	bne.n	80029da <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029cc:	2314      	movs	r3, #20
 80029ce:	18fb      	adds	r3, r7, r3
 80029d0:	0018      	movs	r0, r3
 80029d2:	f000 fe37 	bl	8003644 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029d6:	2301      	movs	r3, #1
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029da:	f001 fbc3 	bl	8004164 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029de:	f000 fbdd 	bl	800319c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029e2:	f001 fbad 	bl	8004140 <vPortEnterCritical>
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	2244      	movs	r2, #68	; 0x44
 80029ea:	5c9b      	ldrb	r3, [r3, r2]
 80029ec:	b25b      	sxtb	r3, r3
 80029ee:	3301      	adds	r3, #1
 80029f0:	d103      	bne.n	80029fa <xQueueReceive+0xde>
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	2244      	movs	r2, #68	; 0x44
 80029f6:	2100      	movs	r1, #0
 80029f8:	5499      	strb	r1, [r3, r2]
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	2245      	movs	r2, #69	; 0x45
 80029fe:	5c9b      	ldrb	r3, [r3, r2]
 8002a00:	b25b      	sxtb	r3, r3
 8002a02:	3301      	adds	r3, #1
 8002a04:	d103      	bne.n	8002a0e <xQueueReceive+0xf2>
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	2245      	movs	r2, #69	; 0x45
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	5499      	strb	r1, [r3, r2]
 8002a0e:	f001 fba9 	bl	8004164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a12:	1d3a      	adds	r2, r7, #4
 8002a14:	2314      	movs	r3, #20
 8002a16:	18fb      	adds	r3, r7, r3
 8002a18:	0011      	movs	r1, r2
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f000 fe26 	bl	800366c <xTaskCheckForTimeOut>
 8002a20:	1e03      	subs	r3, r0, #0
 8002a22:	d11e      	bne.n	8002a62 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	0018      	movs	r0, r3
 8002a28:	f000 f91c 	bl	8002c64 <prvIsQueueEmpty>
 8002a2c:	1e03      	subs	r3, r0, #0
 8002a2e:	d011      	beq.n	8002a54 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	3324      	adds	r3, #36	; 0x24
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	0011      	movs	r1, r2
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f000 fd63 	bl	8003504 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	0018      	movs	r0, r3
 8002a42:	f000 f8b1 	bl	8002ba8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a46:	f000 fbb5 	bl	80031b4 <xTaskResumeAll>
 8002a4a:	1e03      	subs	r3, r0, #0
 8002a4c:	d191      	bne.n	8002972 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8002a4e:	f001 fb67 	bl	8004120 <vPortYield>
 8002a52:	e78e      	b.n	8002972 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	0018      	movs	r0, r3
 8002a58:	f000 f8a6 	bl	8002ba8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a5c:	f000 fbaa 	bl	80031b4 <xTaskResumeAll>
 8002a60:	e787      	b.n	8002972 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	0018      	movs	r0, r3
 8002a66:	f000 f89f 	bl	8002ba8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a6a:	f000 fba3 	bl	80031b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	0018      	movs	r0, r3
 8002a72:	f000 f8f7 	bl	8002c64 <prvIsQueueEmpty>
 8002a76:	1e03      	subs	r3, r0, #0
 8002a78:	d100      	bne.n	8002a7c <xQueueReceive+0x160>
 8002a7a:	e77a      	b.n	8002972 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002a7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002a7e:	0018      	movs	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	b00a      	add	sp, #40	; 0x28
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b086      	sub	sp, #24
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	60f8      	str	r0, [r7, #12]
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10e      	bne.n	8002ac2 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d14e      	bne.n	8002b4a <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f000 ff25 	bl	8003900 <xTaskPriorityDisinherit>
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	605a      	str	r2, [r3, #4]
 8002ac0:	e043      	b.n	8002b4a <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d119      	bne.n	8002afc <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6898      	ldr	r0, [r3, #8]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	f001 fc36 	bl	8004344 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	18d2      	adds	r2, r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d32b      	bcc.n	8002b4a <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	609a      	str	r2, [r3, #8]
 8002afa:	e026      	b.n	8002b4a <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	68d8      	ldr	r0, [r3, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	0019      	movs	r1, r3
 8002b08:	f001 fc1c 	bl	8004344 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	425b      	negs	r3, r3
 8002b16:	18d2      	adds	r2, r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d207      	bcs.n	8002b38 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	425b      	negs	r3, r3
 8002b32:	18d2      	adds	r2, r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d105      	bne.n	8002b4a <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002b52:	697b      	ldr	r3, [r7, #20]
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b006      	add	sp, #24
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d018      	beq.n	8002ba0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	18d2      	adds	r2, r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d303      	bcc.n	8002b90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68d9      	ldr	r1, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f001 fbd2 	bl	8004344 <memcpy>
	}
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b002      	add	sp, #8
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002bb0:	f001 fac6 	bl	8004140 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002bb4:	230f      	movs	r3, #15
 8002bb6:	18fb      	adds	r3, r7, r3
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	2145      	movs	r1, #69	; 0x45
 8002bbc:	5c52      	ldrb	r2, [r2, r1]
 8002bbe:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bc0:	e013      	b.n	8002bea <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d016      	beq.n	8002bf8 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3324      	adds	r3, #36	; 0x24
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f000 fcdc 	bl	800358c <xTaskRemoveFromEventList>
 8002bd4:	1e03      	subs	r3, r0, #0
 8002bd6:	d001      	beq.n	8002bdc <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002bd8:	f000 fd98 	bl	800370c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002bdc:	210f      	movs	r1, #15
 8002bde:	187b      	adds	r3, r7, r1
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	187b      	adds	r3, r7, r1
 8002be8:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bea:	230f      	movs	r3, #15
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	b25b      	sxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	dce5      	bgt.n	8002bc2 <prvUnlockQueue+0x1a>
 8002bf6:	e000      	b.n	8002bfa <prvUnlockQueue+0x52>
					break;
 8002bf8:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2245      	movs	r2, #69	; 0x45
 8002bfe:	21ff      	movs	r1, #255	; 0xff
 8002c00:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8002c02:	f001 faaf 	bl	8004164 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c06:	f001 fa9b 	bl	8004140 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c0a:	230e      	movs	r3, #14
 8002c0c:	18fb      	adds	r3, r7, r3
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	2144      	movs	r1, #68	; 0x44
 8002c12:	5c52      	ldrb	r2, [r2, r1]
 8002c14:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c16:	e013      	b.n	8002c40 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d016      	beq.n	8002c4e <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3310      	adds	r3, #16
 8002c24:	0018      	movs	r0, r3
 8002c26:	f000 fcb1 	bl	800358c <xTaskRemoveFromEventList>
 8002c2a:	1e03      	subs	r3, r0, #0
 8002c2c:	d001      	beq.n	8002c32 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8002c2e:	f000 fd6d 	bl	800370c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002c32:	210e      	movs	r1, #14
 8002c34:	187b      	adds	r3, r7, r1
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	187b      	adds	r3, r7, r1
 8002c3e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c40:	230e      	movs	r3, #14
 8002c42:	18fb      	adds	r3, r7, r3
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	b25b      	sxtb	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	dce5      	bgt.n	8002c18 <prvUnlockQueue+0x70>
 8002c4c:	e000      	b.n	8002c50 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8002c4e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2244      	movs	r2, #68	; 0x44
 8002c54:	21ff      	movs	r1, #255	; 0xff
 8002c56:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8002c58:	f001 fa84 	bl	8004164 <vPortExitCritical>
}
 8002c5c:	46c0      	nop			; (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b004      	add	sp, #16
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c6c:	f001 fa68 	bl	8004140 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d102      	bne.n	8002c7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	e001      	b.n	8002c82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c82:	f001 fa6f 	bl	8004164 <vPortExitCritical>

	return xReturn;
 8002c86:	68fb      	ldr	r3, [r7, #12]
}
 8002c88:	0018      	movs	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b004      	add	sp, #16
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c98:	f001 fa52 	bl	8004140 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d102      	bne.n	8002cae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	e001      	b.n	8002cb2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cb2:	f001 fa57 	bl	8004164 <vPortExitCritical>

	return xReturn;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
}
 8002cb8:	0018      	movs	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b004      	add	sp, #16
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	e015      	b.n	8002cfc <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002cd0:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <vQueueAddToRegistry+0x4c>)
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	00d2      	lsls	r2, r2, #3
 8002cd6:	58d3      	ldr	r3, [r2, r3]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10c      	bne.n	8002cf6 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <vQueueAddToRegistry+0x4c>)
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	00d2      	lsls	r2, r2, #3
 8002ce2:	6839      	ldr	r1, [r7, #0]
 8002ce4:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002ce6:	4a09      	ldr	r2, [pc, #36]	; (8002d0c <vQueueAddToRegistry+0x4c>)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	18d3      	adds	r3, r2, r3
 8002cee:	3304      	adds	r3, #4
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002cf4:	e005      	b.n	8002d02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b07      	cmp	r3, #7
 8002d00:	d9e6      	bls.n	8002cd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b004      	add	sp, #16
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	20000f20 	.word	0x20000f20

08002d10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002d20:	f001 fa0e 	bl	8004140 <vPortEnterCritical>
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	2244      	movs	r2, #68	; 0x44
 8002d28:	5c9b      	ldrb	r3, [r3, r2]
 8002d2a:	b25b      	sxtb	r3, r3
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	d103      	bne.n	8002d38 <vQueueWaitForMessageRestricted+0x28>
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2244      	movs	r2, #68	; 0x44
 8002d34:	2100      	movs	r1, #0
 8002d36:	5499      	strb	r1, [r3, r2]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	2245      	movs	r2, #69	; 0x45
 8002d3c:	5c9b      	ldrb	r3, [r3, r2]
 8002d3e:	b25b      	sxtb	r3, r3
 8002d40:	3301      	adds	r3, #1
 8002d42:	d103      	bne.n	8002d4c <vQueueWaitForMessageRestricted+0x3c>
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2245      	movs	r2, #69	; 0x45
 8002d48:	2100      	movs	r1, #0
 8002d4a:	5499      	strb	r1, [r3, r2]
 8002d4c:	f001 fa0a 	bl	8004164 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d106      	bne.n	8002d66 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	3324      	adds	r3, #36	; 0x24
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	68b9      	ldr	r1, [r7, #8]
 8002d60:	0018      	movs	r0, r3
 8002d62:	f000 fbed 	bl	8003540 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f7ff ff1d 	bl	8002ba8 <prvUnlockQueue>
	}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b006      	add	sp, #24
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d76:	b590      	push	{r4, r7, lr}
 8002d78:	b08d      	sub	sp, #52	; 0x34
 8002d7a:	af04      	add	r7, sp, #16
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <xTaskCreateStatic+0x18>
 8002d8a:	b672      	cpsid	i
 8002d8c:	e7fe      	b.n	8002d8c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8002d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <xTaskCreateStatic+0x22>
 8002d94:	b672      	cpsid	i
 8002d96:	e7fe      	b.n	8002d96 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d98:	23bc      	movs	r3, #188	; 0xbc
 8002d9a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2bbc      	cmp	r3, #188	; 0xbc
 8002da0:	d001      	beq.n	8002da6 <xTaskCreateStatic+0x30>
 8002da2:	b672      	cpsid	i
 8002da4:	e7fe      	b.n	8002da4 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d020      	beq.n	8002dee <xTaskCreateStatic+0x78>
 8002dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d01d      	beq.n	8002dee <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db4:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	22b9      	movs	r2, #185	; 0xb9
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002dc4:	683c      	ldr	r4, [r7, #0]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	2300      	movs	r3, #0
 8002dce:	9303      	str	r3, [sp, #12]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	9302      	str	r3, [sp, #8]
 8002dd4:	2318      	movs	r3, #24
 8002dd6:	18fb      	adds	r3, r7, r3
 8002dd8:	9301      	str	r3, [sp, #4]
 8002dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	0023      	movs	r3, r4
 8002de0:	f000 f858 	bl	8002e94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	0018      	movs	r0, r3
 8002de8:	f000 f8ec 	bl	8002fc4 <prvAddNewTaskToReadyList>
 8002dec:	e001      	b.n	8002df2 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002df2:	69bb      	ldr	r3, [r7, #24]
	}
 8002df4:	0018      	movs	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b009      	add	sp, #36	; 0x24
 8002dfa:	bd90      	pop	{r4, r7, pc}

08002dfc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002dfc:	b590      	push	{r4, r7, lr}
 8002dfe:	b08d      	sub	sp, #52	; 0x34
 8002e00:	af04      	add	r7, sp, #16
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	1dbb      	adds	r3, r7, #6
 8002e0a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e0c:	1dbb      	adds	r3, r7, #6
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	0018      	movs	r0, r3
 8002e14:	f001 fa2c 	bl	8004270 <pvPortMalloc>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d010      	beq.n	8002e44 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002e22:	20bc      	movs	r0, #188	; 0xbc
 8002e24:	f001 fa24 	bl	8004270 <pvPortMalloc>
 8002e28:	0003      	movs	r3, r0
 8002e2a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30
 8002e38:	e006      	b.n	8002e48 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f001 fa2f 	bl	80042a0 <vPortFree>
 8002e42:	e001      	b.n	8002e48 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d01a      	beq.n	8002e84 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	22b9      	movs	r2, #185	; 0xb9
 8002e52:	2100      	movs	r1, #0
 8002e54:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e56:	1dbb      	adds	r3, r7, #6
 8002e58:	881a      	ldrh	r2, [r3, #0]
 8002e5a:	683c      	ldr	r4, [r7, #0]
 8002e5c:	68b9      	ldr	r1, [r7, #8]
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	2300      	movs	r3, #0
 8002e62:	9303      	str	r3, [sp, #12]
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	9302      	str	r3, [sp, #8]
 8002e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	0023      	movs	r3, r4
 8002e72:	f000 f80f 	bl	8002e94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f000 f8a3 	bl	8002fc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	e002      	b.n	8002e8a <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e84:	2301      	movs	r3, #1
 8002e86:	425b      	negs	r3, r3
 8002e88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e8a:	69bb      	ldr	r3, [r7, #24]
	}
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b009      	add	sp, #36	; 0x24
 8002e92:	bd90      	pop	{r4, r7, pc}

08002e94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	001a      	movs	r2, r3
 8002eac:	21a5      	movs	r1, #165	; 0xa5
 8002eae:	f001 fa52 	bl	8004356 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	493e      	ldr	r1, [pc, #248]	; (8002fb4 <prvInitialiseNewTask+0x120>)
 8002eba:	468c      	mov	ip, r1
 8002ebc:	4463      	add	r3, ip
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	18d3      	adds	r3, r2, r3
 8002ec2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	2207      	movs	r2, #7
 8002ec8:	4393      	bics	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	2207      	movs	r2, #7
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d001      	beq.n	8002ed8 <prvInitialiseNewTask+0x44>
 8002ed4:	b672      	cpsid	i
 8002ed6:	e7fe      	b.n	8002ed6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	e013      	b.n	8002f06 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	18d3      	adds	r3, r2, r3
 8002ee4:	7818      	ldrb	r0, [r3, #0]
 8002ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ee8:	2134      	movs	r1, #52	; 0x34
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	18d3      	adds	r3, r2, r3
 8002eee:	185b      	adds	r3, r3, r1
 8002ef0:	1c02      	adds	r2, r0, #0
 8002ef2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	18d3      	adds	r3, r2, r3
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d006      	beq.n	8002f0e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	3301      	adds	r3, #1
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2b0f      	cmp	r3, #15
 8002f0a:	d9e8      	bls.n	8002ede <prvInitialiseNewTask+0x4a>
 8002f0c:	e000      	b.n	8002f10 <prvInitialiseNewTask+0x7c>
		{
			break;
 8002f0e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f12:	2243      	movs	r2, #67	; 0x43
 8002f14:	2100      	movs	r1, #0
 8002f16:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	2b37      	cmp	r3, #55	; 0x37
 8002f1c:	d901      	bls.n	8002f22 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f1e:	2337      	movs	r3, #55	; 0x37
 8002f20:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f24:	6a3a      	ldr	r2, [r7, #32]
 8002f26:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2a:	6a3a      	ldr	r2, [r7, #32]
 8002f2c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f30:	2200      	movs	r2, #0
 8002f32:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f36:	3304      	adds	r3, #4
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f7ff fa69 	bl	8002410 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f40:	3318      	adds	r3, #24
 8002f42:	0018      	movs	r0, r3
 8002f44:	f7ff fa64 	bl	8002410 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	2238      	movs	r2, #56	; 0x38
 8002f52:	1ad2      	subs	r2, r2, r3
 8002f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f5c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f60:	22b4      	movs	r2, #180	; 0xb4
 8002f62:	2100      	movs	r1, #0
 8002f64:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	22b8      	movs	r2, #184	; 0xb8
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f70:	3354      	adds	r3, #84	; 0x54
 8002f72:	2260      	movs	r2, #96	; 0x60
 8002f74:	2100      	movs	r1, #0
 8002f76:	0018      	movs	r0, r3
 8002f78:	f001 f9ed 	bl	8004356 <memset>
 8002f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7e:	4a0e      	ldr	r2, [pc, #56]	; (8002fb8 <prvInitialiseNewTask+0x124>)
 8002f80:	659a      	str	r2, [r3, #88]	; 0x58
 8002f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f84:	4a0d      	ldr	r2, [pc, #52]	; (8002fbc <prvInitialiseNewTask+0x128>)
 8002f86:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8a:	4a0d      	ldr	r2, [pc, #52]	; (8002fc0 <prvInitialiseNewTask+0x12c>)
 8002f8c:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	68f9      	ldr	r1, [r7, #12]
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	0018      	movs	r0, r3
 8002f96:	f001 f83b 	bl	8004010 <pxPortInitialiseStack>
 8002f9a:	0002      	movs	r2, r0
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002faa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fac:	46c0      	nop			; (mov r8, r8)
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b006      	add	sp, #24
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	3fffffff 	.word	0x3fffffff
 8002fb8:	080046d4 	.word	0x080046d4
 8002fbc:	080046f4 	.word	0x080046f4
 8002fc0:	080046b4 	.word	0x080046b4

08002fc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002fcc:	f001 f8b8 	bl	8004140 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002fd0:	4b2a      	ldr	r3, [pc, #168]	; (800307c <prvAddNewTaskToReadyList+0xb8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	4b29      	ldr	r3, [pc, #164]	; (800307c <prvAddNewTaskToReadyList+0xb8>)
 8002fd8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002fda:	4b29      	ldr	r3, [pc, #164]	; (8003080 <prvAddNewTaskToReadyList+0xbc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002fe2:	4b27      	ldr	r3, [pc, #156]	; (8003080 <prvAddNewTaskToReadyList+0xbc>)
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fe8:	4b24      	ldr	r3, [pc, #144]	; (800307c <prvAddNewTaskToReadyList+0xb8>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d110      	bne.n	8003012 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002ff0:	f000 fba6 	bl	8003740 <prvInitialiseTaskLists>
 8002ff4:	e00d      	b.n	8003012 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002ff6:	4b23      	ldr	r3, [pc, #140]	; (8003084 <prvAddNewTaskToReadyList+0xc0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ffe:	4b20      	ldr	r3, [pc, #128]	; (8003080 <prvAddNewTaskToReadyList+0xbc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	429a      	cmp	r2, r3
 800300a:	d802      	bhi.n	8003012 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800300c:	4b1c      	ldr	r3, [pc, #112]	; (8003080 <prvAddNewTaskToReadyList+0xbc>)
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003012:	4b1d      	ldr	r3, [pc, #116]	; (8003088 <prvAddNewTaskToReadyList+0xc4>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <prvAddNewTaskToReadyList+0xc4>)
 800301a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800301c:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <prvAddNewTaskToReadyList+0xc4>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003028:	4b18      	ldr	r3, [pc, #96]	; (800308c <prvAddNewTaskToReadyList+0xc8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d903      	bls.n	8003038 <prvAddNewTaskToReadyList+0x74>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003034:	4b15      	ldr	r3, [pc, #84]	; (800308c <prvAddNewTaskToReadyList+0xc8>)
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303c:	0013      	movs	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	189b      	adds	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4a12      	ldr	r2, [pc, #72]	; (8003090 <prvAddNewTaskToReadyList+0xcc>)
 8003046:	189a      	adds	r2, r3, r2
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3304      	adds	r3, #4
 800304c:	0019      	movs	r1, r3
 800304e:	0010      	movs	r0, r2
 8003050:	f7ff f9e9 	bl	8002426 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003054:	f001 f886 	bl	8004164 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003058:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <prvAddNewTaskToReadyList+0xc0>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003060:	4b07      	ldr	r3, [pc, #28]	; (8003080 <prvAddNewTaskToReadyList+0xbc>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	429a      	cmp	r2, r3
 800306c:	d201      	bcs.n	8003072 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800306e:	f001 f857 	bl	8004120 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	46bd      	mov	sp, r7
 8003076:	b002      	add	sp, #8
 8003078:	bd80      	pop	{r7, pc}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	20000cf4 	.word	0x20000cf4
 8003080:	20000820 	.word	0x20000820
 8003084:	20000d00 	.word	0x20000d00
 8003088:	20000d10 	.word	0x20000d10
 800308c:	20000cfc 	.word	0x20000cfc
 8003090:	20000824 	.word	0x20000824

08003094 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d010      	beq.n	80030c8 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80030a6:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <vTaskDelay+0x48>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <vTaskDelay+0x1e>
 80030ae:	b672      	cpsid	i
 80030b0:	e7fe      	b.n	80030b0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80030b2:	f000 f873 	bl	800319c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2100      	movs	r1, #0
 80030ba:	0018      	movs	r0, r3
 80030bc:	f000 fc7c 	bl	80039b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80030c0:	f000 f878 	bl	80031b4 <xTaskResumeAll>
 80030c4:	0003      	movs	r3, r0
 80030c6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80030ce:	f001 f827 	bl	8004120 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b004      	add	sp, #16
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	20000d1c 	.word	0x20000d1c

080030e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b089      	sub	sp, #36	; 0x24
 80030e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80030ee:	003a      	movs	r2, r7
 80030f0:	1d39      	adds	r1, r7, #4
 80030f2:	2308      	movs	r3, #8
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	0018      	movs	r0, r3
 80030f8:	f7ff f93c 	bl	8002374 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80030fc:	683c      	ldr	r4, [r7, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	491e      	ldr	r1, [pc, #120]	; (800317c <vTaskStartScheduler+0x9c>)
 8003104:	481e      	ldr	r0, [pc, #120]	; (8003180 <vTaskStartScheduler+0xa0>)
 8003106:	9202      	str	r2, [sp, #8]
 8003108:	9301      	str	r3, [sp, #4]
 800310a:	2300      	movs	r3, #0
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	2300      	movs	r3, #0
 8003110:	0022      	movs	r2, r4
 8003112:	f7ff fe30 	bl	8002d76 <xTaskCreateStatic>
 8003116:	0002      	movs	r2, r0
 8003118:	4b1a      	ldr	r3, [pc, #104]	; (8003184 <vTaskStartScheduler+0xa4>)
 800311a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800311c:	4b19      	ldr	r3, [pc, #100]	; (8003184 <vTaskStartScheduler+0xa4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003124:	2301      	movs	r3, #1
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	e001      	b.n	800312e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d103      	bne.n	800313c <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8003134:	f000 fc94 	bl	8003a60 <xTimerCreateTimerTask>
 8003138:	0003      	movs	r3, r0
 800313a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d113      	bne.n	800316a <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003142:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003144:	4b10      	ldr	r3, [pc, #64]	; (8003188 <vTaskStartScheduler+0xa8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	3354      	adds	r3, #84	; 0x54
 800314a:	001a      	movs	r2, r3
 800314c:	4b0f      	ldr	r3, [pc, #60]	; (800318c <vTaskStartScheduler+0xac>)
 800314e:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003150:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <vTaskStartScheduler+0xb0>)
 8003152:	2201      	movs	r2, #1
 8003154:	4252      	negs	r2, r2
 8003156:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003158:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <vTaskStartScheduler+0xb4>)
 800315a:	2201      	movs	r2, #1
 800315c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800315e:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <vTaskStartScheduler+0xb8>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003164:	f000 ffb8 	bl	80040d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003168:	e004      	b.n	8003174 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	3301      	adds	r3, #1
 800316e:	d101      	bne.n	8003174 <vTaskStartScheduler+0x94>
 8003170:	b672      	cpsid	i
 8003172:	e7fe      	b.n	8003172 <vTaskStartScheduler+0x92>
}
 8003174:	46c0      	nop			; (mov r8, r8)
 8003176:	46bd      	mov	sp, r7
 8003178:	b005      	add	sp, #20
 800317a:	bd90      	pop	{r4, r7, pc}
 800317c:	08004614 	.word	0x08004614
 8003180:	08003721 	.word	0x08003721
 8003184:	20000d18 	.word	0x20000d18
 8003188:	20000820 	.word	0x20000820
 800318c:	2000000c 	.word	0x2000000c
 8003190:	20000d14 	.word	0x20000d14
 8003194:	20000d00 	.word	0x20000d00
 8003198:	20000cf8 	.word	0x20000cf8

0800319c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <vTaskSuspendAll+0x14>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	4b02      	ldr	r3, [pc, #8]	; (80031b0 <vTaskSuspendAll+0x14>)
 80031a8:	601a      	str	r2, [r3, #0]
}
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	20000d1c 	.word	0x20000d1c

080031b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80031be:	2300      	movs	r3, #0
 80031c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80031c2:	4b3a      	ldr	r3, [pc, #232]	; (80032ac <xTaskResumeAll+0xf8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <xTaskResumeAll+0x1a>
 80031ca:	b672      	cpsid	i
 80031cc:	e7fe      	b.n	80031cc <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80031ce:	f000 ffb7 	bl	8004140 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80031d2:	4b36      	ldr	r3, [pc, #216]	; (80032ac <xTaskResumeAll+0xf8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	1e5a      	subs	r2, r3, #1
 80031d8:	4b34      	ldr	r3, [pc, #208]	; (80032ac <xTaskResumeAll+0xf8>)
 80031da:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031dc:	4b33      	ldr	r3, [pc, #204]	; (80032ac <xTaskResumeAll+0xf8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d15b      	bne.n	800329c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031e4:	4b32      	ldr	r3, [pc, #200]	; (80032b0 <xTaskResumeAll+0xfc>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d057      	beq.n	800329c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031ec:	e02f      	b.n	800324e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80031ee:	4b31      	ldr	r3, [pc, #196]	; (80032b4 <xTaskResumeAll+0x100>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	3318      	adds	r3, #24
 80031fa:	0018      	movs	r0, r3
 80031fc:	f7ff f96b 	bl	80024d6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3304      	adds	r3, #4
 8003204:	0018      	movs	r0, r3
 8003206:	f7ff f966 	bl	80024d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320e:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <xTaskResumeAll+0x104>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d903      	bls.n	800321e <xTaskResumeAll+0x6a>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800321a:	4b27      	ldr	r3, [pc, #156]	; (80032b8 <xTaskResumeAll+0x104>)
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003222:	0013      	movs	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	189b      	adds	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4a24      	ldr	r2, [pc, #144]	; (80032bc <xTaskResumeAll+0x108>)
 800322c:	189a      	adds	r2, r3, r2
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	3304      	adds	r3, #4
 8003232:	0019      	movs	r1, r3
 8003234:	0010      	movs	r0, r2
 8003236:	f7ff f8f6 	bl	8002426 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323e:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <xTaskResumeAll+0x10c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	429a      	cmp	r2, r3
 8003246:	d302      	bcc.n	800324e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8003248:	4b1e      	ldr	r3, [pc, #120]	; (80032c4 <xTaskResumeAll+0x110>)
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800324e:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <xTaskResumeAll+0x100>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1cb      	bne.n	80031ee <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800325c:	f000 fb10 	bl	8003880 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003260:	4b19      	ldr	r3, [pc, #100]	; (80032c8 <xTaskResumeAll+0x114>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00f      	beq.n	800328c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800326c:	f000 f83c 	bl	80032e8 <xTaskIncrementTick>
 8003270:	1e03      	subs	r3, r0, #0
 8003272:	d002      	beq.n	800327a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8003274:	4b13      	ldr	r3, [pc, #76]	; (80032c4 <xTaskResumeAll+0x110>)
 8003276:	2201      	movs	r2, #1
 8003278:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3b01      	subs	r3, #1
 800327e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f2      	bne.n	800326c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8003286:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <xTaskResumeAll+0x114>)
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800328c:	4b0d      	ldr	r3, [pc, #52]	; (80032c4 <xTaskResumeAll+0x110>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003294:	2301      	movs	r3, #1
 8003296:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003298:	f000 ff42 	bl	8004120 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800329c:	f000 ff62 	bl	8004164 <vPortExitCritical>

	return xAlreadyYielded;
 80032a0:	68bb      	ldr	r3, [r7, #8]
}
 80032a2:	0018      	movs	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b004      	add	sp, #16
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	20000d1c 	.word	0x20000d1c
 80032b0:	20000cf4 	.word	0x20000cf4
 80032b4:	20000cb4 	.word	0x20000cb4
 80032b8:	20000cfc 	.word	0x20000cfc
 80032bc:	20000824 	.word	0x20000824
 80032c0:	20000820 	.word	0x20000820
 80032c4:	20000d08 	.word	0x20000d08
 80032c8:	20000d04 	.word	0x20000d04

080032cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80032d2:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <xTaskGetTickCount+0x18>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80032d8:	687b      	ldr	r3, [r7, #4]
}
 80032da:	0018      	movs	r0, r3
 80032dc:	46bd      	mov	sp, r7
 80032de:	b002      	add	sp, #8
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	20000cf8 	.word	0x20000cf8

080032e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032f2:	4b4c      	ldr	r3, [pc, #304]	; (8003424 <xTaskIncrementTick+0x13c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d000      	beq.n	80032fc <xTaskIncrementTick+0x14>
 80032fa:	e083      	b.n	8003404 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032fc:	4b4a      	ldr	r3, [pc, #296]	; (8003428 <xTaskIncrementTick+0x140>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	3301      	adds	r3, #1
 8003302:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003304:	4b48      	ldr	r3, [pc, #288]	; (8003428 <xTaskIncrementTick+0x140>)
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d117      	bne.n	8003340 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8003310:	4b46      	ldr	r3, [pc, #280]	; (800342c <xTaskIncrementTick+0x144>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <xTaskIncrementTick+0x36>
 800331a:	b672      	cpsid	i
 800331c:	e7fe      	b.n	800331c <xTaskIncrementTick+0x34>
 800331e:	4b43      	ldr	r3, [pc, #268]	; (800342c <xTaskIncrementTick+0x144>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	4b42      	ldr	r3, [pc, #264]	; (8003430 <xTaskIncrementTick+0x148>)
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	4b40      	ldr	r3, [pc, #256]	; (800342c <xTaskIncrementTick+0x144>)
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	4b40      	ldr	r3, [pc, #256]	; (8003430 <xTaskIncrementTick+0x148>)
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	4b40      	ldr	r3, [pc, #256]	; (8003434 <xTaskIncrementTick+0x14c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	4b3e      	ldr	r3, [pc, #248]	; (8003434 <xTaskIncrementTick+0x14c>)
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	f000 faa0 	bl	8003880 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003340:	4b3d      	ldr	r3, [pc, #244]	; (8003438 <xTaskIncrementTick+0x150>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	429a      	cmp	r2, r3
 8003348:	d34e      	bcc.n	80033e8 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800334a:	4b38      	ldr	r3, [pc, #224]	; (800342c <xTaskIncrementTick+0x144>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <xTaskIncrementTick+0x70>
 8003354:	2301      	movs	r3, #1
 8003356:	e000      	b.n	800335a <xTaskIncrementTick+0x72>
 8003358:	2300      	movs	r3, #0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d004      	beq.n	8003368 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800335e:	4b36      	ldr	r3, [pc, #216]	; (8003438 <xTaskIncrementTick+0x150>)
 8003360:	2201      	movs	r2, #1
 8003362:	4252      	negs	r2, r2
 8003364:	601a      	str	r2, [r3, #0]
					break;
 8003366:	e03f      	b.n	80033e8 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003368:	4b30      	ldr	r3, [pc, #192]	; (800342c <xTaskIncrementTick+0x144>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	429a      	cmp	r2, r3
 800337e:	d203      	bcs.n	8003388 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003380:	4b2d      	ldr	r3, [pc, #180]	; (8003438 <xTaskIncrementTick+0x150>)
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	601a      	str	r2, [r3, #0]
						break;
 8003386:	e02f      	b.n	80033e8 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	3304      	adds	r3, #4
 800338c:	0018      	movs	r0, r3
 800338e:	f7ff f8a2 	bl	80024d6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	2b00      	cmp	r3, #0
 8003398:	d004      	beq.n	80033a4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	3318      	adds	r3, #24
 800339e:	0018      	movs	r0, r3
 80033a0:	f7ff f899 	bl	80024d6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a8:	4b24      	ldr	r3, [pc, #144]	; (800343c <xTaskIncrementTick+0x154>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d903      	bls.n	80033b8 <xTaskIncrementTick+0xd0>
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b4:	4b21      	ldr	r3, [pc, #132]	; (800343c <xTaskIncrementTick+0x154>)
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033bc:	0013      	movs	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	189b      	adds	r3, r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4a1e      	ldr	r2, [pc, #120]	; (8003440 <xTaskIncrementTick+0x158>)
 80033c6:	189a      	adds	r2, r3, r2
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	3304      	adds	r3, #4
 80033cc:	0019      	movs	r1, r3
 80033ce:	0010      	movs	r0, r2
 80033d0:	f7ff f829 	bl	8002426 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d8:	4b1a      	ldr	r3, [pc, #104]	; (8003444 <xTaskIncrementTick+0x15c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033de:	429a      	cmp	r2, r3
 80033e0:	d3b3      	bcc.n	800334a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80033e2:	2301      	movs	r3, #1
 80033e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033e6:	e7b0      	b.n	800334a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033e8:	4b16      	ldr	r3, [pc, #88]	; (8003444 <xTaskIncrementTick+0x15c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ee:	4914      	ldr	r1, [pc, #80]	; (8003440 <xTaskIncrementTick+0x158>)
 80033f0:	0013      	movs	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	189b      	adds	r3, r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	585b      	ldr	r3, [r3, r1]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d907      	bls.n	800340e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80033fe:	2301      	movs	r3, #1
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	e004      	b.n	800340e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003404:	4b10      	ldr	r3, [pc, #64]	; (8003448 <xTaskIncrementTick+0x160>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	4b0f      	ldr	r3, [pc, #60]	; (8003448 <xTaskIncrementTick+0x160>)
 800340c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800340e:	4b0f      	ldr	r3, [pc, #60]	; (800344c <xTaskIncrementTick+0x164>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8003416:	2301      	movs	r3, #1
 8003418:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800341a:	697b      	ldr	r3, [r7, #20]
}
 800341c:	0018      	movs	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	b006      	add	sp, #24
 8003422:	bd80      	pop	{r7, pc}
 8003424:	20000d1c 	.word	0x20000d1c
 8003428:	20000cf8 	.word	0x20000cf8
 800342c:	20000cac 	.word	0x20000cac
 8003430:	20000cb0 	.word	0x20000cb0
 8003434:	20000d0c 	.word	0x20000d0c
 8003438:	20000d14 	.word	0x20000d14
 800343c:	20000cfc 	.word	0x20000cfc
 8003440:	20000824 	.word	0x20000824
 8003444:	20000820 	.word	0x20000820
 8003448:	20000d04 	.word	0x20000d04
 800344c:	20000d08 	.word	0x20000d08

08003450 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003456:	4b25      	ldr	r3, [pc, #148]	; (80034ec <vTaskSwitchContext+0x9c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800345e:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <vTaskSwitchContext+0xa0>)
 8003460:	2201      	movs	r2, #1
 8003462:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003464:	e03d      	b.n	80034e2 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8003466:	4b22      	ldr	r3, [pc, #136]	; (80034f0 <vTaskSwitchContext+0xa0>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800346c:	4b21      	ldr	r3, [pc, #132]	; (80034f4 <vTaskSwitchContext+0xa4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	607b      	str	r3, [r7, #4]
 8003472:	e007      	b.n	8003484 <vTaskSwitchContext+0x34>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <vTaskSwitchContext+0x2e>
 800347a:	b672      	cpsid	i
 800347c:	e7fe      	b.n	800347c <vTaskSwitchContext+0x2c>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3b01      	subs	r3, #1
 8003482:	607b      	str	r3, [r7, #4]
 8003484:	491c      	ldr	r1, [pc, #112]	; (80034f8 <vTaskSwitchContext+0xa8>)
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	0013      	movs	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	189b      	adds	r3, r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	585b      	ldr	r3, [r3, r1]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0ee      	beq.n	8003474 <vTaskSwitchContext+0x24>
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	0013      	movs	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	189b      	adds	r3, r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4a15      	ldr	r2, [pc, #84]	; (80034f8 <vTaskSwitchContext+0xa8>)
 80034a2:	189b      	adds	r3, r3, r2
 80034a4:	603b      	str	r3, [r7, #0]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	605a      	str	r2, [r3, #4]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	3308      	adds	r3, #8
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d104      	bne.n	80034c6 <vTaskSwitchContext+0x76>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <vTaskSwitchContext+0xac>)
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <vTaskSwitchContext+0xa4>)
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80034d6:	4b09      	ldr	r3, [pc, #36]	; (80034fc <vTaskSwitchContext+0xac>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3354      	adds	r3, #84	; 0x54
 80034dc:	001a      	movs	r2, r3
 80034de:	4b08      	ldr	r3, [pc, #32]	; (8003500 <vTaskSwitchContext+0xb0>)
 80034e0:	601a      	str	r2, [r3, #0]
}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b002      	add	sp, #8
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	20000d1c 	.word	0x20000d1c
 80034f0:	20000d08 	.word	0x20000d08
 80034f4:	20000cfc 	.word	0x20000cfc
 80034f8:	20000824 	.word	0x20000824
 80034fc:	20000820 	.word	0x20000820
 8003500:	2000000c 	.word	0x2000000c

08003504 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <vTaskPlaceOnEventList+0x14>
 8003514:	b672      	cpsid	i
 8003516:	e7fe      	b.n	8003516 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003518:	4b08      	ldr	r3, [pc, #32]	; (800353c <vTaskPlaceOnEventList+0x38>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3318      	adds	r3, #24
 800351e:	001a      	movs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	0011      	movs	r1, r2
 8003524:	0018      	movs	r0, r3
 8003526:	f7fe ffa0 	bl	800246a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2101      	movs	r1, #1
 800352e:	0018      	movs	r0, r3
 8003530:	f000 fa42 	bl	80039b8 <prvAddCurrentTaskToDelayedList>
}
 8003534:	46c0      	nop			; (mov r8, r8)
 8003536:	46bd      	mov	sp, r7
 8003538:	b002      	add	sp, #8
 800353a:	bd80      	pop	{r7, pc}
 800353c:	20000820 	.word	0x20000820

08003540 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <vTaskPlaceOnEventListRestricted+0x16>
 8003552:	b672      	cpsid	i
 8003554:	e7fe      	b.n	8003554 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003556:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <vTaskPlaceOnEventListRestricted+0x48>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3318      	adds	r3, #24
 800355c:	001a      	movs	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	0011      	movs	r1, r2
 8003562:	0018      	movs	r0, r3
 8003564:	f7fe ff5f 	bl	8002426 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800356e:	2301      	movs	r3, #1
 8003570:	425b      	negs	r3, r3
 8003572:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	0011      	movs	r1, r2
 800357a:	0018      	movs	r0, r3
 800357c:	f000 fa1c 	bl	80039b8 <prvAddCurrentTaskToDelayedList>
	}
 8003580:	46c0      	nop			; (mov r8, r8)
 8003582:	46bd      	mov	sp, r7
 8003584:	b004      	add	sp, #16
 8003586:	bd80      	pop	{r7, pc}
 8003588:	20000820 	.word	0x20000820

0800358c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <xTaskRemoveFromEventList+0x1a>
 80035a2:	b672      	cpsid	i
 80035a4:	e7fe      	b.n	80035a4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	3318      	adds	r3, #24
 80035aa:	0018      	movs	r0, r3
 80035ac:	f7fe ff93 	bl	80024d6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035b0:	4b1e      	ldr	r3, [pc, #120]	; (800362c <xTaskRemoveFromEventList+0xa0>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d11d      	bne.n	80035f4 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	3304      	adds	r3, #4
 80035bc:	0018      	movs	r0, r3
 80035be:	f7fe ff8a 	bl	80024d6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c6:	4b1a      	ldr	r3, [pc, #104]	; (8003630 <xTaskRemoveFromEventList+0xa4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d903      	bls.n	80035d6 <xTaskRemoveFromEventList+0x4a>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d2:	4b17      	ldr	r3, [pc, #92]	; (8003630 <xTaskRemoveFromEventList+0xa4>)
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035da:	0013      	movs	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	189b      	adds	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4a14      	ldr	r2, [pc, #80]	; (8003634 <xTaskRemoveFromEventList+0xa8>)
 80035e4:	189a      	adds	r2, r3, r2
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	3304      	adds	r3, #4
 80035ea:	0019      	movs	r1, r3
 80035ec:	0010      	movs	r0, r2
 80035ee:	f7fe ff1a 	bl	8002426 <vListInsertEnd>
 80035f2:	e007      	b.n	8003604 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	3318      	adds	r3, #24
 80035f8:	001a      	movs	r2, r3
 80035fa:	4b0f      	ldr	r3, [pc, #60]	; (8003638 <xTaskRemoveFromEventList+0xac>)
 80035fc:	0011      	movs	r1, r2
 80035fe:	0018      	movs	r0, r3
 8003600:	f7fe ff11 	bl	8002426 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003608:	4b0c      	ldr	r3, [pc, #48]	; (800363c <xTaskRemoveFromEventList+0xb0>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360e:	429a      	cmp	r2, r3
 8003610:	d905      	bls.n	800361e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003612:	2301      	movs	r3, #1
 8003614:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003616:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <xTaskRemoveFromEventList+0xb4>)
 8003618:	2201      	movs	r2, #1
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	e001      	b.n	8003622 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800361e:	2300      	movs	r3, #0
 8003620:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003622:	68fb      	ldr	r3, [r7, #12]
}
 8003624:	0018      	movs	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	b004      	add	sp, #16
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20000d1c 	.word	0x20000d1c
 8003630:	20000cfc 	.word	0x20000cfc
 8003634:	20000824 	.word	0x20000824
 8003638:	20000cb4 	.word	0x20000cb4
 800363c:	20000820 	.word	0x20000820
 8003640:	20000d08 	.word	0x20000d08

08003644 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <vTaskInternalSetTimeOutState+0x20>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003654:	4b04      	ldr	r3, [pc, #16]	; (8003668 <vTaskInternalSetTimeOutState+0x24>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	605a      	str	r2, [r3, #4]
}
 800365c:	46c0      	nop			; (mov r8, r8)
 800365e:	46bd      	mov	sp, r7
 8003660:	b002      	add	sp, #8
 8003662:	bd80      	pop	{r7, pc}
 8003664:	20000d0c 	.word	0x20000d0c
 8003668:	20000cf8 	.word	0x20000cf8

0800366c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <xTaskCheckForTimeOut+0x14>
 800367c:	b672      	cpsid	i
 800367e:	e7fe      	b.n	800367e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <xTaskCheckForTimeOut+0x1e>
 8003686:	b672      	cpsid	i
 8003688:	e7fe      	b.n	8003688 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800368a:	f000 fd59 	bl	8004140 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800368e:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <xTaskCheckForTimeOut+0x98>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3301      	adds	r3, #1
 80036a4:	d102      	bne.n	80036ac <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	e024      	b.n	80036f6 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	4b15      	ldr	r3, [pc, #84]	; (8003708 <xTaskCheckForTimeOut+0x9c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d007      	beq.n	80036c8 <xTaskCheckForTimeOut+0x5c>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d302      	bcc.n	80036c8 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80036c2:	2301      	movs	r3, #1
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	e016      	b.n	80036f6 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d20c      	bcs.n	80036ec <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1ad2      	subs	r2, r2, r3
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	0018      	movs	r0, r3
 80036e2:	f7ff ffaf 	bl	8003644 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	e004      	b.n	80036f6 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80036f2:	2301      	movs	r3, #1
 80036f4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80036f6:	f000 fd35 	bl	8004164 <vPortExitCritical>

	return xReturn;
 80036fa:	697b      	ldr	r3, [r7, #20]
}
 80036fc:	0018      	movs	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	b006      	add	sp, #24
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20000cf8 	.word	0x20000cf8
 8003708:	20000d0c 	.word	0x20000d0c

0800370c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003710:	4b02      	ldr	r3, [pc, #8]	; (800371c <vTaskMissedYield+0x10>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]
}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20000d08 	.word	0x20000d08

08003720 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003728:	f000 f84e 	bl	80037c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800372c:	4b03      	ldr	r3, [pc, #12]	; (800373c <prvIdleTask+0x1c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d9f9      	bls.n	8003728 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003734:	f000 fcf4 	bl	8004120 <vPortYield>
		prvCheckTasksWaitingTermination();
 8003738:	e7f6      	b.n	8003728 <prvIdleTask+0x8>
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	20000824 	.word	0x20000824

08003740 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003746:	2300      	movs	r3, #0
 8003748:	607b      	str	r3, [r7, #4]
 800374a:	e00c      	b.n	8003766 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	0013      	movs	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	189b      	adds	r3, r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4a14      	ldr	r2, [pc, #80]	; (80037a8 <prvInitialiseTaskLists+0x68>)
 8003758:	189b      	adds	r3, r3, r2
 800375a:	0018      	movs	r0, r3
 800375c:	f7fe fe3a 	bl	80023d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3301      	adds	r3, #1
 8003764:	607b      	str	r3, [r7, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b37      	cmp	r3, #55	; 0x37
 800376a:	d9ef      	bls.n	800374c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800376c:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <prvInitialiseTaskLists+0x6c>)
 800376e:	0018      	movs	r0, r3
 8003770:	f7fe fe30 	bl	80023d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003774:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <prvInitialiseTaskLists+0x70>)
 8003776:	0018      	movs	r0, r3
 8003778:	f7fe fe2c 	bl	80023d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800377c:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <prvInitialiseTaskLists+0x74>)
 800377e:	0018      	movs	r0, r3
 8003780:	f7fe fe28 	bl	80023d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003784:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <prvInitialiseTaskLists+0x78>)
 8003786:	0018      	movs	r0, r3
 8003788:	f7fe fe24 	bl	80023d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <prvInitialiseTaskLists+0x7c>)
 800378e:	0018      	movs	r0, r3
 8003790:	f7fe fe20 	bl	80023d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003794:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <prvInitialiseTaskLists+0x80>)
 8003796:	4a05      	ldr	r2, [pc, #20]	; (80037ac <prvInitialiseTaskLists+0x6c>)
 8003798:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800379a:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <prvInitialiseTaskLists+0x84>)
 800379c:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <prvInitialiseTaskLists+0x70>)
 800379e:	601a      	str	r2, [r3, #0]
}
 80037a0:	46c0      	nop			; (mov r8, r8)
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b002      	add	sp, #8
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	20000824 	.word	0x20000824
 80037ac:	20000c84 	.word	0x20000c84
 80037b0:	20000c98 	.word	0x20000c98
 80037b4:	20000cb4 	.word	0x20000cb4
 80037b8:	20000cc8 	.word	0x20000cc8
 80037bc:	20000ce0 	.word	0x20000ce0
 80037c0:	20000cac 	.word	0x20000cac
 80037c4:	20000cb0 	.word	0x20000cb0

080037c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037ce:	e01a      	b.n	8003806 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80037d0:	f000 fcb6 	bl	8004140 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80037d4:	4b10      	ldr	r3, [pc, #64]	; (8003818 <prvCheckTasksWaitingTermination+0x50>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3304      	adds	r3, #4
 80037e0:	0018      	movs	r0, r3
 80037e2:	f7fe fe78 	bl	80024d6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80037e6:	4b0d      	ldr	r3, [pc, #52]	; (800381c <prvCheckTasksWaitingTermination+0x54>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	1e5a      	subs	r2, r3, #1
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <prvCheckTasksWaitingTermination+0x54>)
 80037ee:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <prvCheckTasksWaitingTermination+0x58>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	1e5a      	subs	r2, r3, #1
 80037f6:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <prvCheckTasksWaitingTermination+0x58>)
 80037f8:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80037fa:	f000 fcb3 	bl	8004164 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	0018      	movs	r0, r3
 8003802:	f000 f80f 	bl	8003824 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003806:	4b06      	ldr	r3, [pc, #24]	; (8003820 <prvCheckTasksWaitingTermination+0x58>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1e0      	bne.n	80037d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	46bd      	mov	sp, r7
 8003812:	b002      	add	sp, #8
 8003814:	bd80      	pop	{r7, pc}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	20000cc8 	.word	0x20000cc8
 800381c:	20000cf4 	.word	0x20000cf4
 8003820:	20000cdc 	.word	0x20000cdc

08003824 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3354      	adds	r3, #84	; 0x54
 8003830:	0018      	movs	r0, r3
 8003832:	f000 fe4f 	bl	80044d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	22b9      	movs	r2, #185	; 0xb9
 800383a:	5c9b      	ldrb	r3, [r3, r2]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d109      	bne.n	8003854 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	0018      	movs	r0, r3
 8003846:	f000 fd2b 	bl	80042a0 <vPortFree>
				vPortFree( pxTCB );
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	0018      	movs	r0, r3
 800384e:	f000 fd27 	bl	80042a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003852:	e010      	b.n	8003876 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	22b9      	movs	r2, #185	; 0xb9
 8003858:	5c9b      	ldrb	r3, [r3, r2]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d104      	bne.n	8003868 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	0018      	movs	r0, r3
 8003862:	f000 fd1d 	bl	80042a0 <vPortFree>
	}
 8003866:	e006      	b.n	8003876 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	22b9      	movs	r2, #185	; 0xb9
 800386c:	5c9b      	ldrb	r3, [r3, r2]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d001      	beq.n	8003876 <prvDeleteTCB+0x52>
 8003872:	b672      	cpsid	i
 8003874:	e7fe      	b.n	8003874 <prvDeleteTCB+0x50>
	}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	46bd      	mov	sp, r7
 800387a:	b002      	add	sp, #8
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003886:	4b0e      	ldr	r3, [pc, #56]	; (80038c0 <prvResetNextTaskUnblockTime+0x40>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <prvResetNextTaskUnblockTime+0x14>
 8003890:	2301      	movs	r3, #1
 8003892:	e000      	b.n	8003896 <prvResetNextTaskUnblockTime+0x16>
 8003894:	2300      	movs	r3, #0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d004      	beq.n	80038a4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800389a:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <prvResetNextTaskUnblockTime+0x44>)
 800389c:	2201      	movs	r2, #1
 800389e:	4252      	negs	r2, r2
 80038a0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80038a2:	e008      	b.n	80038b6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038a4:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <prvResetNextTaskUnblockTime+0x40>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <prvResetNextTaskUnblockTime+0x44>)
 80038b4:	601a      	str	r2, [r3, #0]
}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b002      	add	sp, #8
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	20000cac 	.word	0x20000cac
 80038c4:	20000d14 	.word	0x20000d14

080038c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80038ce:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <xTaskGetSchedulerState+0x30>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d102      	bne.n	80038dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80038d6:	2301      	movs	r3, #1
 80038d8:	607b      	str	r3, [r7, #4]
 80038da:	e008      	b.n	80038ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038dc:	4b07      	ldr	r3, [pc, #28]	; (80038fc <xTaskGetSchedulerState+0x34>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d102      	bne.n	80038ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80038e4:	2302      	movs	r3, #2
 80038e6:	607b      	str	r3, [r7, #4]
 80038e8:	e001      	b.n	80038ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80038ea:	2300      	movs	r3, #0
 80038ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80038ee:	687b      	ldr	r3, [r7, #4]
	}
 80038f0:	0018      	movs	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b002      	add	sp, #8
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	20000d00 	.word	0x20000d00
 80038fc:	20000d1c 	.word	0x20000d1c

08003900 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d044      	beq.n	80039a0 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003916:	4b25      	ldr	r3, [pc, #148]	; (80039ac <xTaskPriorityDisinherit+0xac>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <xTaskPriorityDisinherit+0x24>
 8003920:	b672      	cpsid	i
 8003922:	e7fe      	b.n	8003922 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <xTaskPriorityDisinherit+0x30>
 800392c:	b672      	cpsid	i
 800392e:	e7fe      	b.n	800392e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003934:	1e5a      	subs	r2, r3, #1
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003942:	429a      	cmp	r2, r3
 8003944:	d02c      	beq.n	80039a0 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800394a:	2b00      	cmp	r3, #0
 800394c:	d128      	bne.n	80039a0 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	3304      	adds	r3, #4
 8003952:	0018      	movs	r0, r3
 8003954:	f7fe fdbf 	bl	80024d6 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	2238      	movs	r2, #56	; 0x38
 8003966:	1ad2      	subs	r2, r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003970:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <xTaskPriorityDisinherit+0xb0>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d903      	bls.n	8003980 <xTaskPriorityDisinherit+0x80>
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397c:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <xTaskPriorityDisinherit+0xb0>)
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003984:	0013      	movs	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	189b      	adds	r3, r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4a09      	ldr	r2, [pc, #36]	; (80039b4 <xTaskPriorityDisinherit+0xb4>)
 800398e:	189a      	adds	r2, r3, r2
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	3304      	adds	r3, #4
 8003994:	0019      	movs	r1, r3
 8003996:	0010      	movs	r0, r2
 8003998:	f7fe fd45 	bl	8002426 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800399c:	2301      	movs	r3, #1
 800399e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80039a0:	68fb      	ldr	r3, [r7, #12]
	}
 80039a2:	0018      	movs	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b004      	add	sp, #16
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	20000820 	.word	0x20000820
 80039b0:	20000cfc 	.word	0x20000cfc
 80039b4:	20000824 	.word	0x20000824

080039b8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80039c2:	4b21      	ldr	r3, [pc, #132]	; (8003a48 <prvAddCurrentTaskToDelayedList+0x90>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039c8:	4b20      	ldr	r3, [pc, #128]	; (8003a4c <prvAddCurrentTaskToDelayedList+0x94>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3304      	adds	r3, #4
 80039ce:	0018      	movs	r0, r3
 80039d0:	f7fe fd81 	bl	80024d6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3301      	adds	r3, #1
 80039d8:	d10b      	bne.n	80039f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d008      	beq.n	80039f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039e0:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <prvAddCurrentTaskToDelayedList+0x94>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	1d1a      	adds	r2, r3, #4
 80039e6:	4b1a      	ldr	r3, [pc, #104]	; (8003a50 <prvAddCurrentTaskToDelayedList+0x98>)
 80039e8:	0011      	movs	r1, r2
 80039ea:	0018      	movs	r0, r3
 80039ec:	f7fe fd1b 	bl	8002426 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80039f0:	e026      	b.n	8003a40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	18d3      	adds	r3, r2, r3
 80039f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039fa:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <prvAddCurrentTaskToDelayedList+0x94>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d209      	bcs.n	8003a1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a0a:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <prvAddCurrentTaskToDelayedList+0x94>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3304      	adds	r3, #4
 8003a14:	0019      	movs	r1, r3
 8003a16:	0010      	movs	r0, r2
 8003a18:	f7fe fd27 	bl	800246a <vListInsert>
}
 8003a1c:	e010      	b.n	8003a40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a1e:	4b0e      	ldr	r3, [pc, #56]	; (8003a58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <prvAddCurrentTaskToDelayedList+0x94>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3304      	adds	r3, #4
 8003a28:	0019      	movs	r1, r3
 8003a2a:	0010      	movs	r0, r2
 8003a2c:	f7fe fd1d 	bl	800246a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a30:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d202      	bcs.n	8003a40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003a3a:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	601a      	str	r2, [r3, #0]
}
 8003a40:	46c0      	nop			; (mov r8, r8)
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b004      	add	sp, #16
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20000cf8 	.word	0x20000cf8
 8003a4c:	20000820 	.word	0x20000820
 8003a50:	20000ce0 	.word	0x20000ce0
 8003a54:	20000cb0 	.word	0x20000cb0
 8003a58:	20000cac 	.word	0x20000cac
 8003a5c:	20000d14 	.word	0x20000d14

08003a60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003a60:	b590      	push	{r4, r7, lr}
 8003a62:	b089      	sub	sp, #36	; 0x24
 8003a64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003a6a:	f000 fa8d 	bl	8003f88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003a6e:	4b17      	ldr	r3, [pc, #92]	; (8003acc <xTimerCreateTimerTask+0x6c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d020      	beq.n	8003ab8 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003a7e:	003a      	movs	r2, r7
 8003a80:	1d39      	adds	r1, r7, #4
 8003a82:	2308      	movs	r3, #8
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	0018      	movs	r0, r3
 8003a88:	f7fe fc8c 	bl	80023a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003a8c:	683c      	ldr	r4, [r7, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	490f      	ldr	r1, [pc, #60]	; (8003ad0 <xTimerCreateTimerTask+0x70>)
 8003a94:	480f      	ldr	r0, [pc, #60]	; (8003ad4 <xTimerCreateTimerTask+0x74>)
 8003a96:	9202      	str	r2, [sp, #8]
 8003a98:	9301      	str	r3, [sp, #4]
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	0022      	movs	r2, r4
 8003aa2:	f7ff f968 	bl	8002d76 <xTaskCreateStatic>
 8003aa6:	0002      	movs	r2, r0
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <xTimerCreateTimerTask+0x78>)
 8003aaa:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003aac:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <xTimerCreateTimerTask+0x78>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <xTimerCreateTimerTask+0x62>
 8003abe:	b672      	cpsid	i
 8003ac0:	e7fe      	b.n	8003ac0 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
}
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b005      	add	sp, #20
 8003aca:	bd90      	pop	{r4, r7, pc}
 8003acc:	20000d50 	.word	0x20000d50
 8003ad0:	0800461c 	.word	0x0800461c
 8003ad4:	08003be5 	.word	0x08003be5
 8003ad8:	20000d54 	.word	0x20000d54

08003adc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08a      	sub	sp, #40	; 0x28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
 8003ae8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <xTimerGenericCommand+0x1c>
 8003af4:	b672      	cpsid	i
 8003af6:	e7fe      	b.n	8003af6 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003af8:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <xTimerGenericCommand+0x94>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d031      	beq.n	8003b64 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003b00:	2114      	movs	r1, #20
 8003b02:	187b      	adds	r3, r7, r1
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b08:	187b      	adds	r3, r7, r1
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003b0e:	187b      	adds	r3, r7, r1
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b05      	cmp	r3, #5
 8003b18:	dc1a      	bgt.n	8003b50 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b1a:	f7ff fed5 	bl	80038c8 <xTaskGetSchedulerState>
 8003b1e:	0003      	movs	r3, r0
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d10a      	bne.n	8003b3a <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b24:	4b12      	ldr	r3, [pc, #72]	; (8003b70 <xTimerGenericCommand+0x94>)
 8003b26:	6818      	ldr	r0, [r3, #0]
 8003b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b2a:	2314      	movs	r3, #20
 8003b2c:	18f9      	adds	r1, r7, r3
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f7fe fdbf 	bl	80026b2 <xQueueGenericSend>
 8003b34:	0003      	movs	r3, r0
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
 8003b38:	e014      	b.n	8003b64 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b3a:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <xTimerGenericCommand+0x94>)
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	2314      	movs	r3, #20
 8003b40:	18f9      	adds	r1, r7, r3
 8003b42:	2300      	movs	r3, #0
 8003b44:	2200      	movs	r2, #0
 8003b46:	f7fe fdb4 	bl	80026b2 <xQueueGenericSend>
 8003b4a:	0003      	movs	r3, r0
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4e:	e009      	b.n	8003b64 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b50:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <xTimerGenericCommand+0x94>)
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	2314      	movs	r3, #20
 8003b58:	18f9      	adds	r1, r7, r3
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f7fe fe6d 	bl	800283a <xQueueGenericSendFromISR>
 8003b60:	0003      	movs	r3, r0
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b66:	0018      	movs	r0, r3
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b00a      	add	sp, #40	; 0x28
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	20000d50 	.word	0x20000d50

08003b74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af02      	add	r7, sp, #8
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b7e:	4b18      	ldr	r3, [pc, #96]	; (8003be0 <prvProcessExpiredTimer+0x6c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f7fe fca2 	bl	80024d6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d119      	bne.n	8003bce <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	699a      	ldr	r2, [r3, #24]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	18d1      	adds	r1, r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 f8b8 	bl	8003d1c <prvInsertTimerInActiveList>
 8003bac:	1e03      	subs	r3, r0, #0
 8003bae:	d00e      	beq.n	8003bce <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	2300      	movs	r3, #0
 8003bba:	2100      	movs	r1, #0
 8003bbc:	f7ff ff8e 	bl	8003adc <xTimerGenericCommand>
 8003bc0:	0003      	movs	r3, r0
 8003bc2:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <prvProcessExpiredTimer+0x5a>
 8003bca:	b672      	cpsid	i
 8003bcc:	e7fe      	b.n	8003bcc <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	0010      	movs	r0, r2
 8003bd6:	4798      	blx	r3
}
 8003bd8:	46c0      	nop			; (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b004      	add	sp, #16
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	20000d48 	.word	0x20000d48

08003be4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 8003bec:	f7fc fb1d 	bl	800022a <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bf0:	2308      	movs	r3, #8
 8003bf2:	18fb      	adds	r3, r7, r3
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f000 f851 	bl	8003c9c <prvGetNextExpireTime>
 8003bfa:	0003      	movs	r3, r0
 8003bfc:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	0011      	movs	r1, r2
 8003c04:	0018      	movs	r0, r3
 8003c06:	f000 f803 	bl	8003c10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003c0a:	f000 f8c9 	bl	8003da0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c0e:	e7ef      	b.n	8003bf0 <prvTimerTask+0xc>

08003c10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003c1a:	f7ff fabf 	bl	800319c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c1e:	2308      	movs	r3, #8
 8003c20:	18fb      	adds	r3, r7, r3
 8003c22:	0018      	movs	r0, r3
 8003c24:	f000 f85a 	bl	8003cdc <prvSampleTimeNow>
 8003c28:	0003      	movs	r3, r0
 8003c2a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d129      	bne.n	8003c86 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10c      	bne.n	8003c52 <prvProcessTimerOrBlockTask+0x42>
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d808      	bhi.n	8003c52 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8003c40:	f7ff fab8 	bl	80031b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	0011      	movs	r1, r2
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f7ff ff92 	bl	8003b74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003c50:	e01b      	b.n	8003c8a <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d006      	beq.n	8003c66 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c58:	4b0e      	ldr	r3, [pc, #56]	; (8003c94 <prvProcessTimerOrBlockTask+0x84>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	425a      	negs	r2, r3
 8003c60:	4153      	adcs	r3, r2
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c66:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <prvProcessTimerOrBlockTask+0x88>)
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	0019      	movs	r1, r3
 8003c74:	f7ff f84c 	bl	8002d10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003c78:	f7ff fa9c 	bl	80031b4 <xTaskResumeAll>
 8003c7c:	1e03      	subs	r3, r0, #0
 8003c7e:	d104      	bne.n	8003c8a <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8003c80:	f000 fa4e 	bl	8004120 <vPortYield>
}
 8003c84:	e001      	b.n	8003c8a <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8003c86:	f7ff fa95 	bl	80031b4 <xTaskResumeAll>
}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b004      	add	sp, #16
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	20000d4c 	.word	0x20000d4c
 8003c98:	20000d50 	.word	0x20000d50

08003c9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <prvGetNextExpireTime+0x3c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	425a      	negs	r2, r3
 8003cac:	4153      	adcs	r3, r2
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	001a      	movs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d105      	bne.n	8003cca <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cbe:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <prvGetNextExpireTime+0x3c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	e001      	b.n	8003cce <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003cce:	68fb      	ldr	r3, [r7, #12]
}
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b004      	add	sp, #16
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000d48 	.word	0x20000d48

08003cdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003ce4:	f7ff faf2 	bl	80032cc <xTaskGetTickCount>
 8003ce8:	0003      	movs	r3, r0
 8003cea:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8003cec:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <prvSampleTimeNow+0x3c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d205      	bcs.n	8003d02 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8003cf6:	f000 f8ed 	bl	8003ed4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	e002      	b.n	8003d08 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003d08:	4b03      	ldr	r3, [pc, #12]	; (8003d18 <prvSampleTimeNow+0x3c>)
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
}
 8003d10:	0018      	movs	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b004      	add	sp, #16
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	20000d58 	.word	0x20000d58

08003d1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
 8003d28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d812      	bhi.n	8003d68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	1ad2      	subs	r2, r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d302      	bcc.n	8003d56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003d50:	2301      	movs	r3, #1
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	e01b      	b.n	8003d8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d56:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <prvInsertTimerInActiveList+0x7c>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	0019      	movs	r1, r3
 8003d60:	0010      	movs	r0, r2
 8003d62:	f7fe fb82 	bl	800246a <vListInsert>
 8003d66:	e012      	b.n	8003d8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d206      	bcs.n	8003d7e <prvInsertTimerInActiveList+0x62>
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d302      	bcc.n	8003d7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	e007      	b.n	8003d8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d7e:	4b07      	ldr	r3, [pc, #28]	; (8003d9c <prvInsertTimerInActiveList+0x80>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	3304      	adds	r3, #4
 8003d86:	0019      	movs	r1, r3
 8003d88:	0010      	movs	r0, r2
 8003d8a:	f7fe fb6e 	bl	800246a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003d8e:	697b      	ldr	r3, [r7, #20]
}
 8003d90:	0018      	movs	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b006      	add	sp, #24
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	20000d4c 	.word	0x20000d4c
 8003d9c:	20000d48 	.word	0x20000d48

08003da0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08c      	sub	sp, #48	; 0x30
 8003da4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003da6:	e082      	b.n	8003eae <prvProcessReceivedCommands+0x10e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003da8:	2308      	movs	r3, #8
 8003daa:	18fb      	adds	r3, r7, r3
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	da10      	bge.n	8003dd4 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003db2:	2308      	movs	r3, #8
 8003db4:	18fb      	adds	r3, r7, r3
 8003db6:	3304      	adds	r3, #4
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <prvProcessReceivedCommands+0x24>
 8003dc0:	b672      	cpsid	i
 8003dc2:	e7fe      	b.n	8003dc2 <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	6858      	ldr	r0, [r3, #4]
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	0019      	movs	r1, r3
 8003dd2:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003dd4:	2308      	movs	r3, #8
 8003dd6:	18fb      	adds	r3, r7, r3
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	db66      	blt.n	8003eac <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003dde:	2308      	movs	r3, #8
 8003de0:	18fb      	adds	r3, r7, r3
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d004      	beq.n	8003df8 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	3304      	adds	r3, #4
 8003df2:	0018      	movs	r0, r3
 8003df4:	f7fe fb6f 	bl	80024d6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003df8:	1d3b      	adds	r3, r7, #4
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f7ff ff6e 	bl	8003cdc <prvSampleTimeNow>
 8003e00:	0003      	movs	r3, r0
 8003e02:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8003e04:	2308      	movs	r3, #8
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b09      	cmp	r3, #9
 8003e0c:	d84f      	bhi.n	8003eae <prvProcessReceivedCommands+0x10e>
 8003e0e:	009a      	lsls	r2, r3, #2
 8003e10:	4b2e      	ldr	r3, [pc, #184]	; (8003ecc <prvProcessReceivedCommands+0x12c>)
 8003e12:	18d3      	adds	r3, r2, r3
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e18:	2008      	movs	r0, #8
 8003e1a:	183b      	adds	r3, r7, r0
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	18d1      	adds	r1, r2, r3
 8003e24:	183b      	adds	r3, r7, r0
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	69fa      	ldr	r2, [r7, #28]
 8003e2a:	6a38      	ldr	r0, [r7, #32]
 8003e2c:	f7ff ff76 	bl	8003d1c <prvInsertTimerInActiveList>
 8003e30:	1e03      	subs	r3, r0, #0
 8003e32:	d03c      	beq.n	8003eae <prvProcessReceivedCommands+0x10e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	6a3a      	ldr	r2, [r7, #32]
 8003e3a:	0010      	movs	r0, r2
 8003e3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d133      	bne.n	8003eae <prvProcessReceivedCommands+0x10e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e46:	2308      	movs	r3, #8
 8003e48:	18fb      	adds	r3, r7, r3
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	18d2      	adds	r2, r2, r3
 8003e52:	6a38      	ldr	r0, [r7, #32]
 8003e54:	2300      	movs	r3, #0
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	f7ff fe3e 	bl	8003adc <xTimerGenericCommand>
 8003e60:	0003      	movs	r3, r0
 8003e62:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d121      	bne.n	8003eae <prvProcessReceivedCommands+0x10e>
 8003e6a:	b672      	cpsid	i
 8003e6c:	e7fe      	b.n	8003e6c <prvProcessReceivedCommands+0xcc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e6e:	2308      	movs	r3, #8
 8003e70:	18fb      	adds	r3, r7, r3
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <prvProcessReceivedCommands+0xe4>
 8003e80:	b672      	cpsid	i
 8003e82:	e7fe      	b.n	8003e82 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	699a      	ldr	r2, [r3, #24]
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	18d1      	adds	r1, r2, r3
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	69fa      	ldr	r2, [r7, #28]
 8003e90:	6a38      	ldr	r0, [r7, #32]
 8003e92:	f7ff ff43 	bl	8003d1c <prvInsertTimerInActiveList>
					break;
 8003e96:	e00a      	b.n	8003eae <prvProcessReceivedCommands+0x10e>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	222c      	movs	r2, #44	; 0x2c
 8003e9c:	5c9b      	ldrb	r3, [r3, r2]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d105      	bne.n	8003eae <prvProcessReceivedCommands+0x10e>
						{
							vPortFree( pxTimer );
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f000 f9fb 	bl	80042a0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003eaa:	e000      	b.n	8003eae <prvProcessReceivedCommands+0x10e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003eac:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003eae:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <prvProcessReceivedCommands+0x130>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2208      	movs	r2, #8
 8003eb4:	18b9      	adds	r1, r7, r2
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f7fe fd2f 	bl	800291c <xQueueReceive>
 8003ebe:	1e03      	subs	r3, r0, #0
 8003ec0:	d000      	beq.n	8003ec4 <prvProcessReceivedCommands+0x124>
 8003ec2:	e771      	b.n	8003da8 <prvProcessReceivedCommands+0x8>
	}
}
 8003ec4:	46c0      	nop			; (mov r8, r8)
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	b00a      	add	sp, #40	; 0x28
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	0800468c 	.word	0x0800468c
 8003ed0:	20000d50 	.word	0x20000d50

08003ed4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b088      	sub	sp, #32
 8003ed8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003eda:	e03e      	b.n	8003f5a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003edc:	4b28      	ldr	r3, [pc, #160]	; (8003f80 <prvSwitchTimerLists+0xac>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ee6:	4b26      	ldr	r3, [pc, #152]	; (8003f80 <prvSwitchTimerLists+0xac>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f7fe faee 	bl	80024d6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	0010      	movs	r0, r2
 8003f02:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d126      	bne.n	8003f5a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	18d3      	adds	r3, r2, r3
 8003f14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d90e      	bls.n	8003f3c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f2a:	4b15      	ldr	r3, [pc, #84]	; (8003f80 <prvSwitchTimerLists+0xac>)
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	3304      	adds	r3, #4
 8003f32:	0019      	movs	r1, r3
 8003f34:	0010      	movs	r0, r2
 8003f36:	f7fe fa98 	bl	800246a <vListInsert>
 8003f3a:	e00e      	b.n	8003f5a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	2300      	movs	r3, #0
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	2300      	movs	r3, #0
 8003f46:	2100      	movs	r1, #0
 8003f48:	f7ff fdc8 	bl	8003adc <xTimerGenericCommand>
 8003f4c:	0003      	movs	r3, r0
 8003f4e:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <prvSwitchTimerLists+0x86>
 8003f56:	b672      	cpsid	i
 8003f58:	e7fe      	b.n	8003f58 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f5a:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <prvSwitchTimerLists+0xac>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1bb      	bne.n	8003edc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003f64:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <prvSwitchTimerLists+0xac>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003f6a:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <prvSwitchTimerLists+0xb0>)
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <prvSwitchTimerLists+0xac>)
 8003f70:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8003f72:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <prvSwitchTimerLists+0xb0>)
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	601a      	str	r2, [r3, #0]
}
 8003f78:	46c0      	nop			; (mov r8, r8)
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	b006      	add	sp, #24
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	20000d48 	.word	0x20000d48
 8003f84:	20000d4c 	.word	0x20000d4c

08003f88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003f8e:	f000 f8d7 	bl	8004140 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003f92:	4b17      	ldr	r3, [pc, #92]	; (8003ff0 <prvCheckForValidListAndQueue+0x68>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d124      	bne.n	8003fe4 <prvCheckForValidListAndQueue+0x5c>
		{
			vListInitialise( &xActiveTimerList1 );
 8003f9a:	4b16      	ldr	r3, [pc, #88]	; (8003ff4 <prvCheckForValidListAndQueue+0x6c>)
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f7fe fa19 	bl	80023d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003fa2:	4b15      	ldr	r3, [pc, #84]	; (8003ff8 <prvCheckForValidListAndQueue+0x70>)
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f7fe fa15 	bl	80023d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003faa:	4b14      	ldr	r3, [pc, #80]	; (8003ffc <prvCheckForValidListAndQueue+0x74>)
 8003fac:	4a11      	ldr	r2, [pc, #68]	; (8003ff4 <prvCheckForValidListAndQueue+0x6c>)
 8003fae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003fb0:	4b13      	ldr	r3, [pc, #76]	; (8004000 <prvCheckForValidListAndQueue+0x78>)
 8003fb2:	4a11      	ldr	r2, [pc, #68]	; (8003ff8 <prvCheckForValidListAndQueue+0x70>)
 8003fb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003fb6:	4913      	ldr	r1, [pc, #76]	; (8004004 <prvCheckForValidListAndQueue+0x7c>)
 8003fb8:	4a13      	ldr	r2, [pc, #76]	; (8004008 <prvCheckForValidListAndQueue+0x80>)
 8003fba:	2300      	movs	r3, #0
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	000b      	movs	r3, r1
 8003fc0:	2110      	movs	r1, #16
 8003fc2:	200a      	movs	r0, #10
 8003fc4:	f7fe fb03 	bl	80025ce <xQueueGenericCreateStatic>
 8003fc8:	0002      	movs	r2, r0
 8003fca:	4b09      	ldr	r3, [pc, #36]	; (8003ff0 <prvCheckForValidListAndQueue+0x68>)
 8003fcc:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003fce:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <prvCheckForValidListAndQueue+0x68>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d006      	beq.n	8003fe4 <prvCheckForValidListAndQueue+0x5c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <prvCheckForValidListAndQueue+0x68>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a0c      	ldr	r2, [pc, #48]	; (800400c <prvCheckForValidListAndQueue+0x84>)
 8003fdc:	0011      	movs	r1, r2
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f7fe fe6e 	bl	8002cc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fe4:	f000 f8be 	bl	8004164 <vPortExitCritical>
}
 8003fe8:	46c0      	nop			; (mov r8, r8)
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	20000d50 	.word	0x20000d50
 8003ff4:	20000d20 	.word	0x20000d20
 8003ff8:	20000d34 	.word	0x20000d34
 8003ffc:	20000d48 	.word	0x20000d48
 8004000:	20000d4c 	.word	0x20000d4c
 8004004:	20000dfc 	.word	0x20000dfc
 8004008:	20000d5c 	.word	0x20000d5c
 800400c:	08004624 	.word	0x08004624

08004010 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	3b04      	subs	r3, #4
 8004020:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2280      	movs	r2, #128	; 0x80
 8004026:	0452      	lsls	r2, r2, #17
 8004028:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	3b04      	subs	r3, #4
 800402e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	3b04      	subs	r3, #4
 800403a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800403c:	4a08      	ldr	r2, [pc, #32]	; (8004060 <pxPortInitialiseStack+0x50>)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	3b14      	subs	r3, #20
 8004046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	3b20      	subs	r3, #32
 8004052:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004054:	68fb      	ldr	r3, [r7, #12]
}
 8004056:	0018      	movs	r0, r3
 8004058:	46bd      	mov	sp, r7
 800405a:	b004      	add	sp, #16
 800405c:	bd80      	pop	{r7, pc}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	08004065 	.word	0x08004065

08004064 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800406a:	2300      	movs	r3, #0
 800406c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800406e:	4b07      	ldr	r3, [pc, #28]	; (800408c <prvTaskExitError+0x28>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3301      	adds	r3, #1
 8004074:	d001      	beq.n	800407a <prvTaskExitError+0x16>
 8004076:	b672      	cpsid	i
 8004078:	e7fe      	b.n	8004078 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800407a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800407c:	46c0      	nop			; (mov r8, r8)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0fc      	beq.n	800407e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004084:	46c0      	nop			; (mov r8, r8)
 8004086:	46bd      	mov	sp, r7
 8004088:	b002      	add	sp, #8
 800408a:	bd80      	pop	{r7, pc}
 800408c:	20000008 	.word	0x20000008

08004090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004094:	46c0      	nop			; (mov r8, r8)
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	0000      	movs	r0, r0
 800409c:	0000      	movs	r0, r0
	...

080040a0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80040a0:	4a0b      	ldr	r2, [pc, #44]	; (80040d0 <pxCurrentTCBConst2>)
 80040a2:	6813      	ldr	r3, [r2, #0]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	3020      	adds	r0, #32
 80040a8:	f380 8809 	msr	PSP, r0
 80040ac:	2002      	movs	r0, #2
 80040ae:	f380 8814 	msr	CONTROL, r0
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80040b8:	46ae      	mov	lr, r5
 80040ba:	bc08      	pop	{r3}
 80040bc:	bc04      	pop	{r2}
 80040be:	b662      	cpsie	i
 80040c0:	4718      	bx	r3
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	46c0      	nop			; (mov r8, r8)
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	46c0      	nop			; (mov r8, r8)
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	46c0      	nop			; (mov r8, r8)
 80040ce:	46c0      	nop			; (mov r8, r8)

080040d0 <pxCurrentTCBConst2>:
 80040d0:	20000820 	.word	0x20000820
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80040d4:	46c0      	nop			; (mov r8, r8)
 80040d6:	46c0      	nop			; (mov r8, r8)

080040d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80040dc:	4b0e      	ldr	r3, [pc, #56]	; (8004118 <xPortStartScheduler+0x40>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <xPortStartScheduler+0x40>)
 80040e2:	21ff      	movs	r1, #255	; 0xff
 80040e4:	0409      	lsls	r1, r1, #16
 80040e6:	430a      	orrs	r2, r1
 80040e8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80040ea:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <xPortStartScheduler+0x40>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <xPortStartScheduler+0x40>)
 80040f0:	21ff      	movs	r1, #255	; 0xff
 80040f2:	0609      	lsls	r1, r1, #24
 80040f4:	430a      	orrs	r2, r1
 80040f6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80040f8:	f000 f898 	bl	800422c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80040fc:	4b07      	ldr	r3, [pc, #28]	; (800411c <xPortStartScheduler+0x44>)
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004102:	f7ff ffcd 	bl	80040a0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004106:	f7ff f9a3 	bl	8003450 <vTaskSwitchContext>
	prvTaskExitError();
 800410a:	f7ff ffab 	bl	8004064 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800410e:	2300      	movs	r3, #0
}
 8004110:	0018      	movs	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	e000ed20 	.word	0xe000ed20
 800411c:	20000008 	.word	0x20000008

08004120 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004124:	4b05      	ldr	r3, [pc, #20]	; (800413c <vPortYield+0x1c>)
 8004126:	2280      	movs	r2, #128	; 0x80
 8004128:	0552      	lsls	r2, r2, #21
 800412a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800412c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004130:	f3bf 8f6f 	isb	sy
}
 8004134:	46c0      	nop			; (mov r8, r8)
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	e000ed04 	.word	0xe000ed04

08004140 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004144:	b672      	cpsid	i
    uxCriticalNesting++;
 8004146:	4b06      	ldr	r3, [pc, #24]	; (8004160 <vPortEnterCritical+0x20>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	4b04      	ldr	r3, [pc, #16]	; (8004160 <vPortEnterCritical+0x20>)
 800414e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004150:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004154:	f3bf 8f6f 	isb	sy
}
 8004158:	46c0      	nop			; (mov r8, r8)
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	20000008 	.word	0x20000008

08004164 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004168:	4b09      	ldr	r3, [pc, #36]	; (8004190 <vPortExitCritical+0x2c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <vPortExitCritical+0x10>
 8004170:	b672      	cpsid	i
 8004172:	e7fe      	b.n	8004172 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004174:	4b06      	ldr	r3, [pc, #24]	; (8004190 <vPortExitCritical+0x2c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	1e5a      	subs	r2, r3, #1
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <vPortExitCritical+0x2c>)
 800417c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800417e:	4b04      	ldr	r3, [pc, #16]	; (8004190 <vPortExitCritical+0x2c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d100      	bne.n	8004188 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004186:	b662      	cpsie	i
    }
}
 8004188:	46c0      	nop			; (mov r8, r8)
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	20000008 	.word	0x20000008

08004194 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004194:	f3ef 8010 	mrs	r0, PRIMASK
 8004198:	b672      	cpsid	i
 800419a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800419c:	46c0      	nop			; (mov r8, r8)
 800419e:	0018      	movs	r0, r3

080041a0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80041a0:	f380 8810 	msr	PRIMASK, r0
 80041a4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80041a6:	46c0      	nop			; (mov r8, r8)
	...

080041b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80041b0:	f3ef 8009 	mrs	r0, PSP
 80041b4:	4b0e      	ldr	r3, [pc, #56]	; (80041f0 <pxCurrentTCBConst>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	3820      	subs	r0, #32
 80041ba:	6010      	str	r0, [r2, #0]
 80041bc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80041be:	4644      	mov	r4, r8
 80041c0:	464d      	mov	r5, r9
 80041c2:	4656      	mov	r6, sl
 80041c4:	465f      	mov	r7, fp
 80041c6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80041c8:	b508      	push	{r3, lr}
 80041ca:	b672      	cpsid	i
 80041cc:	f7ff f940 	bl	8003450 <vTaskSwitchContext>
 80041d0:	b662      	cpsie	i
 80041d2:	bc0c      	pop	{r2, r3}
 80041d4:	6811      	ldr	r1, [r2, #0]
 80041d6:	6808      	ldr	r0, [r1, #0]
 80041d8:	3010      	adds	r0, #16
 80041da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80041dc:	46a0      	mov	r8, r4
 80041de:	46a9      	mov	r9, r5
 80041e0:	46b2      	mov	sl, r6
 80041e2:	46bb      	mov	fp, r7
 80041e4:	f380 8809 	msr	PSP, r0
 80041e8:	3820      	subs	r0, #32
 80041ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80041ec:	4718      	bx	r3
 80041ee:	46c0      	nop			; (mov r8, r8)

080041f0 <pxCurrentTCBConst>:
 80041f0:	20000820 	.word	0x20000820
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80041f4:	46c0      	nop			; (mov r8, r8)
 80041f6:	46c0      	nop			; (mov r8, r8)

080041f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80041fe:	f7ff ffc9 	bl	8004194 <ulSetInterruptMaskFromISR>
 8004202:	0003      	movs	r3, r0
 8004204:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004206:	f7ff f86f 	bl	80032e8 <xTaskIncrementTick>
 800420a:	1e03      	subs	r3, r0, #0
 800420c:	d003      	beq.n	8004216 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <SysTick_Handler+0x30>)
 8004210:	2280      	movs	r2, #128	; 0x80
 8004212:	0552      	lsls	r2, r2, #21
 8004214:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	0018      	movs	r0, r3
 800421a:	f7ff ffc1 	bl	80041a0 <vClearInterruptMaskFromISR>
}
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	46bd      	mov	sp, r7
 8004222:	b002      	add	sp, #8
 8004224:	bd80      	pop	{r7, pc}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	e000ed04 	.word	0xe000ed04

0800422c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <prvSetupTimerInterrupt+0x34>)
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004236:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <prvSetupTimerInterrupt+0x38>)
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800423c:	4b0a      	ldr	r3, [pc, #40]	; (8004268 <prvSetupTimerInterrupt+0x3c>)
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	23fa      	movs	r3, #250	; 0xfa
 8004242:	0099      	lsls	r1, r3, #2
 8004244:	0010      	movs	r0, r2
 8004246:	f7fb ff5f 	bl	8000108 <__udivsi3>
 800424a:	0003      	movs	r3, r0
 800424c:	001a      	movs	r2, r3
 800424e:	4b07      	ldr	r3, [pc, #28]	; (800426c <prvSetupTimerInterrupt+0x40>)
 8004250:	3a01      	subs	r2, #1
 8004252:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004254:	4b02      	ldr	r3, [pc, #8]	; (8004260 <prvSetupTimerInterrupt+0x34>)
 8004256:	2207      	movs	r2, #7
 8004258:	601a      	str	r2, [r3, #0]
}
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	e000e010 	.word	0xe000e010
 8004264:	e000e018 	.word	0xe000e018
 8004268:	20000000 	.word	0x20000000
 800426c:	e000e014 	.word	0xe000e014

08004270 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8004278:	f7fe ff90 	bl	800319c <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	0018      	movs	r0, r3
 8004280:	f000 f84c 	bl	800431c <malloc>
 8004284:	0003      	movs	r3, r0
 8004286:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004288:	f7fe ff94 	bl	80031b4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <pvPortMalloc+0x26>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8004292:	f7fb ffc5 	bl	8000220 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8004296:	68fb      	ldr	r3, [r7, #12]
}
 8004298:	0018      	movs	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	b004      	add	sp, #16
 800429e:	bd80      	pop	{r7, pc}

080042a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
	if( pv )
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d007      	beq.n	80042be <vPortFree+0x1e>
	{
		vTaskSuspendAll();
 80042ae:	f7fe ff75 	bl	800319c <vTaskSuspendAll>
		{
			free( pv );
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	0018      	movs	r0, r3
 80042b6:	f000 f83b 	bl	8004330 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 80042ba:	f7fe ff7b 	bl	80031b4 <xTaskResumeAll>
	}
}
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b002      	add	sp, #8
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <__errno>:
 80042c8:	4b01      	ldr	r3, [pc, #4]	; (80042d0 <__errno+0x8>)
 80042ca:	6818      	ldr	r0, [r3, #0]
 80042cc:	4770      	bx	lr
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	2000000c 	.word	0x2000000c

080042d4 <__libc_init_array>:
 80042d4:	b570      	push	{r4, r5, r6, lr}
 80042d6:	2600      	movs	r6, #0
 80042d8:	4d0c      	ldr	r5, [pc, #48]	; (800430c <__libc_init_array+0x38>)
 80042da:	4c0d      	ldr	r4, [pc, #52]	; (8004310 <__libc_init_array+0x3c>)
 80042dc:	1b64      	subs	r4, r4, r5
 80042de:	10a4      	asrs	r4, r4, #2
 80042e0:	42a6      	cmp	r6, r4
 80042e2:	d109      	bne.n	80042f8 <__libc_init_array+0x24>
 80042e4:	2600      	movs	r6, #0
 80042e6:	f000 f96f 	bl	80045c8 <_init>
 80042ea:	4d0a      	ldr	r5, [pc, #40]	; (8004314 <__libc_init_array+0x40>)
 80042ec:	4c0a      	ldr	r4, [pc, #40]	; (8004318 <__libc_init_array+0x44>)
 80042ee:	1b64      	subs	r4, r4, r5
 80042f0:	10a4      	asrs	r4, r4, #2
 80042f2:	42a6      	cmp	r6, r4
 80042f4:	d105      	bne.n	8004302 <__libc_init_array+0x2e>
 80042f6:	bd70      	pop	{r4, r5, r6, pc}
 80042f8:	00b3      	lsls	r3, r6, #2
 80042fa:	58eb      	ldr	r3, [r5, r3]
 80042fc:	4798      	blx	r3
 80042fe:	3601      	adds	r6, #1
 8004300:	e7ee      	b.n	80042e0 <__libc_init_array+0xc>
 8004302:	00b3      	lsls	r3, r6, #2
 8004304:	58eb      	ldr	r3, [r5, r3]
 8004306:	4798      	blx	r3
 8004308:	3601      	adds	r6, #1
 800430a:	e7f2      	b.n	80042f2 <__libc_init_array+0x1e>
 800430c:	08004714 	.word	0x08004714
 8004310:	08004714 	.word	0x08004714
 8004314:	08004714 	.word	0x08004714
 8004318:	08004718 	.word	0x08004718

0800431c <malloc>:
 800431c:	b510      	push	{r4, lr}
 800431e:	4b03      	ldr	r3, [pc, #12]	; (800432c <malloc+0x10>)
 8004320:	0001      	movs	r1, r0
 8004322:	6818      	ldr	r0, [r3, #0]
 8004324:	f000 f86a 	bl	80043fc <_malloc_r>
 8004328:	bd10      	pop	{r4, pc}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	2000000c 	.word	0x2000000c

08004330 <free>:
 8004330:	b510      	push	{r4, lr}
 8004332:	4b03      	ldr	r3, [pc, #12]	; (8004340 <free+0x10>)
 8004334:	0001      	movs	r1, r0
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	f000 f816 	bl	8004368 <_free_r>
 800433c:	bd10      	pop	{r4, pc}
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	2000000c 	.word	0x2000000c

08004344 <memcpy>:
 8004344:	2300      	movs	r3, #0
 8004346:	b510      	push	{r4, lr}
 8004348:	429a      	cmp	r2, r3
 800434a:	d100      	bne.n	800434e <memcpy+0xa>
 800434c:	bd10      	pop	{r4, pc}
 800434e:	5ccc      	ldrb	r4, [r1, r3]
 8004350:	54c4      	strb	r4, [r0, r3]
 8004352:	3301      	adds	r3, #1
 8004354:	e7f8      	b.n	8004348 <memcpy+0x4>

08004356 <memset>:
 8004356:	0003      	movs	r3, r0
 8004358:	1812      	adds	r2, r2, r0
 800435a:	4293      	cmp	r3, r2
 800435c:	d100      	bne.n	8004360 <memset+0xa>
 800435e:	4770      	bx	lr
 8004360:	7019      	strb	r1, [r3, #0]
 8004362:	3301      	adds	r3, #1
 8004364:	e7f9      	b.n	800435a <memset+0x4>
	...

08004368 <_free_r>:
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	0005      	movs	r5, r0
 800436c:	2900      	cmp	r1, #0
 800436e:	d010      	beq.n	8004392 <_free_r+0x2a>
 8004370:	1f0c      	subs	r4, r1, #4
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	da00      	bge.n	800437a <_free_r+0x12>
 8004378:	18e4      	adds	r4, r4, r3
 800437a:	0028      	movs	r0, r5
 800437c:	f000 f922 	bl	80045c4 <__malloc_lock>
 8004380:	4a1d      	ldr	r2, [pc, #116]	; (80043f8 <_free_r+0x90>)
 8004382:	6813      	ldr	r3, [r2, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d105      	bne.n	8004394 <_free_r+0x2c>
 8004388:	6063      	str	r3, [r4, #4]
 800438a:	6014      	str	r4, [r2, #0]
 800438c:	0028      	movs	r0, r5
 800438e:	f000 f91a 	bl	80045c6 <__malloc_unlock>
 8004392:	bd70      	pop	{r4, r5, r6, pc}
 8004394:	42a3      	cmp	r3, r4
 8004396:	d909      	bls.n	80043ac <_free_r+0x44>
 8004398:	6821      	ldr	r1, [r4, #0]
 800439a:	1860      	adds	r0, r4, r1
 800439c:	4283      	cmp	r3, r0
 800439e:	d1f3      	bne.n	8004388 <_free_r+0x20>
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	1841      	adds	r1, r0, r1
 80043a6:	6021      	str	r1, [r4, #0]
 80043a8:	e7ee      	b.n	8004388 <_free_r+0x20>
 80043aa:	0013      	movs	r3, r2
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	2a00      	cmp	r2, #0
 80043b0:	d001      	beq.n	80043b6 <_free_r+0x4e>
 80043b2:	42a2      	cmp	r2, r4
 80043b4:	d9f9      	bls.n	80043aa <_free_r+0x42>
 80043b6:	6819      	ldr	r1, [r3, #0]
 80043b8:	1858      	adds	r0, r3, r1
 80043ba:	42a0      	cmp	r0, r4
 80043bc:	d10b      	bne.n	80043d6 <_free_r+0x6e>
 80043be:	6820      	ldr	r0, [r4, #0]
 80043c0:	1809      	adds	r1, r1, r0
 80043c2:	1858      	adds	r0, r3, r1
 80043c4:	6019      	str	r1, [r3, #0]
 80043c6:	4282      	cmp	r2, r0
 80043c8:	d1e0      	bne.n	800438c <_free_r+0x24>
 80043ca:	6810      	ldr	r0, [r2, #0]
 80043cc:	6852      	ldr	r2, [r2, #4]
 80043ce:	1841      	adds	r1, r0, r1
 80043d0:	6019      	str	r1, [r3, #0]
 80043d2:	605a      	str	r2, [r3, #4]
 80043d4:	e7da      	b.n	800438c <_free_r+0x24>
 80043d6:	42a0      	cmp	r0, r4
 80043d8:	d902      	bls.n	80043e0 <_free_r+0x78>
 80043da:	230c      	movs	r3, #12
 80043dc:	602b      	str	r3, [r5, #0]
 80043de:	e7d5      	b.n	800438c <_free_r+0x24>
 80043e0:	6821      	ldr	r1, [r4, #0]
 80043e2:	1860      	adds	r0, r4, r1
 80043e4:	4282      	cmp	r2, r0
 80043e6:	d103      	bne.n	80043f0 <_free_r+0x88>
 80043e8:	6810      	ldr	r0, [r2, #0]
 80043ea:	6852      	ldr	r2, [r2, #4]
 80043ec:	1841      	adds	r1, r0, r1
 80043ee:	6021      	str	r1, [r4, #0]
 80043f0:	6062      	str	r2, [r4, #4]
 80043f2:	605c      	str	r4, [r3, #4]
 80043f4:	e7ca      	b.n	800438c <_free_r+0x24>
 80043f6:	46c0      	nop			; (mov r8, r8)
 80043f8:	20000e4c 	.word	0x20000e4c

080043fc <_malloc_r>:
 80043fc:	2303      	movs	r3, #3
 80043fe:	b570      	push	{r4, r5, r6, lr}
 8004400:	1ccd      	adds	r5, r1, #3
 8004402:	439d      	bics	r5, r3
 8004404:	3508      	adds	r5, #8
 8004406:	0006      	movs	r6, r0
 8004408:	2d0c      	cmp	r5, #12
 800440a:	d21e      	bcs.n	800444a <_malloc_r+0x4e>
 800440c:	250c      	movs	r5, #12
 800440e:	42a9      	cmp	r1, r5
 8004410:	d81d      	bhi.n	800444e <_malloc_r+0x52>
 8004412:	0030      	movs	r0, r6
 8004414:	f000 f8d6 	bl	80045c4 <__malloc_lock>
 8004418:	4a25      	ldr	r2, [pc, #148]	; (80044b0 <_malloc_r+0xb4>)
 800441a:	6814      	ldr	r4, [r2, #0]
 800441c:	0021      	movs	r1, r4
 800441e:	2900      	cmp	r1, #0
 8004420:	d119      	bne.n	8004456 <_malloc_r+0x5a>
 8004422:	4c24      	ldr	r4, [pc, #144]	; (80044b4 <_malloc_r+0xb8>)
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d103      	bne.n	8004432 <_malloc_r+0x36>
 800442a:	0030      	movs	r0, r6
 800442c:	f000 f8b8 	bl	80045a0 <_sbrk_r>
 8004430:	6020      	str	r0, [r4, #0]
 8004432:	0029      	movs	r1, r5
 8004434:	0030      	movs	r0, r6
 8004436:	f000 f8b3 	bl	80045a0 <_sbrk_r>
 800443a:	1c43      	adds	r3, r0, #1
 800443c:	d12b      	bne.n	8004496 <_malloc_r+0x9a>
 800443e:	230c      	movs	r3, #12
 8004440:	0030      	movs	r0, r6
 8004442:	6033      	str	r3, [r6, #0]
 8004444:	f000 f8bf 	bl	80045c6 <__malloc_unlock>
 8004448:	e003      	b.n	8004452 <_malloc_r+0x56>
 800444a:	2d00      	cmp	r5, #0
 800444c:	dadf      	bge.n	800440e <_malloc_r+0x12>
 800444e:	230c      	movs	r3, #12
 8004450:	6033      	str	r3, [r6, #0]
 8004452:	2000      	movs	r0, #0
 8004454:	bd70      	pop	{r4, r5, r6, pc}
 8004456:	680b      	ldr	r3, [r1, #0]
 8004458:	1b5b      	subs	r3, r3, r5
 800445a:	d419      	bmi.n	8004490 <_malloc_r+0x94>
 800445c:	2b0b      	cmp	r3, #11
 800445e:	d903      	bls.n	8004468 <_malloc_r+0x6c>
 8004460:	600b      	str	r3, [r1, #0]
 8004462:	18cc      	adds	r4, r1, r3
 8004464:	6025      	str	r5, [r4, #0]
 8004466:	e003      	b.n	8004470 <_malloc_r+0x74>
 8004468:	684b      	ldr	r3, [r1, #4]
 800446a:	428c      	cmp	r4, r1
 800446c:	d10d      	bne.n	800448a <_malloc_r+0x8e>
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	0030      	movs	r0, r6
 8004472:	f000 f8a8 	bl	80045c6 <__malloc_unlock>
 8004476:	0020      	movs	r0, r4
 8004478:	2207      	movs	r2, #7
 800447a:	300b      	adds	r0, #11
 800447c:	1d23      	adds	r3, r4, #4
 800447e:	4390      	bics	r0, r2
 8004480:	1ac3      	subs	r3, r0, r3
 8004482:	d0e7      	beq.n	8004454 <_malloc_r+0x58>
 8004484:	425a      	negs	r2, r3
 8004486:	50e2      	str	r2, [r4, r3]
 8004488:	e7e4      	b.n	8004454 <_malloc_r+0x58>
 800448a:	6063      	str	r3, [r4, #4]
 800448c:	000c      	movs	r4, r1
 800448e:	e7ef      	b.n	8004470 <_malloc_r+0x74>
 8004490:	000c      	movs	r4, r1
 8004492:	6849      	ldr	r1, [r1, #4]
 8004494:	e7c3      	b.n	800441e <_malloc_r+0x22>
 8004496:	2303      	movs	r3, #3
 8004498:	1cc4      	adds	r4, r0, #3
 800449a:	439c      	bics	r4, r3
 800449c:	42a0      	cmp	r0, r4
 800449e:	d0e1      	beq.n	8004464 <_malloc_r+0x68>
 80044a0:	1a21      	subs	r1, r4, r0
 80044a2:	0030      	movs	r0, r6
 80044a4:	f000 f87c 	bl	80045a0 <_sbrk_r>
 80044a8:	1c43      	adds	r3, r0, #1
 80044aa:	d1db      	bne.n	8004464 <_malloc_r+0x68>
 80044ac:	e7c7      	b.n	800443e <_malloc_r+0x42>
 80044ae:	46c0      	nop			; (mov r8, r8)
 80044b0:	20000e4c 	.word	0x20000e4c
 80044b4:	20000e50 	.word	0x20000e50

080044b8 <cleanup_glue>:
 80044b8:	b570      	push	{r4, r5, r6, lr}
 80044ba:	000d      	movs	r5, r1
 80044bc:	6809      	ldr	r1, [r1, #0]
 80044be:	0004      	movs	r4, r0
 80044c0:	2900      	cmp	r1, #0
 80044c2:	d001      	beq.n	80044c8 <cleanup_glue+0x10>
 80044c4:	f7ff fff8 	bl	80044b8 <cleanup_glue>
 80044c8:	0029      	movs	r1, r5
 80044ca:	0020      	movs	r0, r4
 80044cc:	f7ff ff4c 	bl	8004368 <_free_r>
 80044d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080044d4 <_reclaim_reent>:
 80044d4:	4b31      	ldr	r3, [pc, #196]	; (800459c <_reclaim_reent+0xc8>)
 80044d6:	b570      	push	{r4, r5, r6, lr}
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	0004      	movs	r4, r0
 80044dc:	4283      	cmp	r3, r0
 80044de:	d049      	beq.n	8004574 <_reclaim_reent+0xa0>
 80044e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <_reclaim_reent+0x28>
 80044e6:	2500      	movs	r5, #0
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	42ab      	cmp	r3, r5
 80044ec:	d147      	bne.n	800457e <_reclaim_reent+0xaa>
 80044ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044f0:	6819      	ldr	r1, [r3, #0]
 80044f2:	2900      	cmp	r1, #0
 80044f4:	d002      	beq.n	80044fc <_reclaim_reent+0x28>
 80044f6:	0020      	movs	r0, r4
 80044f8:	f7ff ff36 	bl	8004368 <_free_r>
 80044fc:	6961      	ldr	r1, [r4, #20]
 80044fe:	2900      	cmp	r1, #0
 8004500:	d002      	beq.n	8004508 <_reclaim_reent+0x34>
 8004502:	0020      	movs	r0, r4
 8004504:	f7ff ff30 	bl	8004368 <_free_r>
 8004508:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800450a:	2900      	cmp	r1, #0
 800450c:	d002      	beq.n	8004514 <_reclaim_reent+0x40>
 800450e:	0020      	movs	r0, r4
 8004510:	f7ff ff2a 	bl	8004368 <_free_r>
 8004514:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004516:	2900      	cmp	r1, #0
 8004518:	d002      	beq.n	8004520 <_reclaim_reent+0x4c>
 800451a:	0020      	movs	r0, r4
 800451c:	f7ff ff24 	bl	8004368 <_free_r>
 8004520:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004522:	2900      	cmp	r1, #0
 8004524:	d002      	beq.n	800452c <_reclaim_reent+0x58>
 8004526:	0020      	movs	r0, r4
 8004528:	f7ff ff1e 	bl	8004368 <_free_r>
 800452c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800452e:	2900      	cmp	r1, #0
 8004530:	d002      	beq.n	8004538 <_reclaim_reent+0x64>
 8004532:	0020      	movs	r0, r4
 8004534:	f7ff ff18 	bl	8004368 <_free_r>
 8004538:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800453a:	2900      	cmp	r1, #0
 800453c:	d002      	beq.n	8004544 <_reclaim_reent+0x70>
 800453e:	0020      	movs	r0, r4
 8004540:	f7ff ff12 	bl	8004368 <_free_r>
 8004544:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004546:	2900      	cmp	r1, #0
 8004548:	d002      	beq.n	8004550 <_reclaim_reent+0x7c>
 800454a:	0020      	movs	r0, r4
 800454c:	f7ff ff0c 	bl	8004368 <_free_r>
 8004550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004552:	2900      	cmp	r1, #0
 8004554:	d002      	beq.n	800455c <_reclaim_reent+0x88>
 8004556:	0020      	movs	r0, r4
 8004558:	f7ff ff06 	bl	8004368 <_free_r>
 800455c:	69a3      	ldr	r3, [r4, #24]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d008      	beq.n	8004574 <_reclaim_reent+0xa0>
 8004562:	0020      	movs	r0, r4
 8004564:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004566:	4798      	blx	r3
 8004568:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800456a:	2900      	cmp	r1, #0
 800456c:	d002      	beq.n	8004574 <_reclaim_reent+0xa0>
 800456e:	0020      	movs	r0, r4
 8004570:	f7ff ffa2 	bl	80044b8 <cleanup_glue>
 8004574:	bd70      	pop	{r4, r5, r6, pc}
 8004576:	5949      	ldr	r1, [r1, r5]
 8004578:	2900      	cmp	r1, #0
 800457a:	d108      	bne.n	800458e <_reclaim_reent+0xba>
 800457c:	3504      	adds	r5, #4
 800457e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004580:	68d9      	ldr	r1, [r3, #12]
 8004582:	2d80      	cmp	r5, #128	; 0x80
 8004584:	d1f7      	bne.n	8004576 <_reclaim_reent+0xa2>
 8004586:	0020      	movs	r0, r4
 8004588:	f7ff feee 	bl	8004368 <_free_r>
 800458c:	e7af      	b.n	80044ee <_reclaim_reent+0x1a>
 800458e:	680e      	ldr	r6, [r1, #0]
 8004590:	0020      	movs	r0, r4
 8004592:	f7ff fee9 	bl	8004368 <_free_r>
 8004596:	0031      	movs	r1, r6
 8004598:	e7ee      	b.n	8004578 <_reclaim_reent+0xa4>
 800459a:	46c0      	nop			; (mov r8, r8)
 800459c:	2000000c 	.word	0x2000000c

080045a0 <_sbrk_r>:
 80045a0:	2300      	movs	r3, #0
 80045a2:	b570      	push	{r4, r5, r6, lr}
 80045a4:	4c06      	ldr	r4, [pc, #24]	; (80045c0 <_sbrk_r+0x20>)
 80045a6:	0005      	movs	r5, r0
 80045a8:	0008      	movs	r0, r1
 80045aa:	6023      	str	r3, [r4, #0]
 80045ac:	f7fc f84c 	bl	8000648 <_sbrk>
 80045b0:	1c43      	adds	r3, r0, #1
 80045b2:	d103      	bne.n	80045bc <_sbrk_r+0x1c>
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d000      	beq.n	80045bc <_sbrk_r+0x1c>
 80045ba:	602b      	str	r3, [r5, #0]
 80045bc:	bd70      	pop	{r4, r5, r6, pc}
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	20000f60 	.word	0x20000f60

080045c4 <__malloc_lock>:
 80045c4:	4770      	bx	lr

080045c6 <__malloc_unlock>:
 80045c6:	4770      	bx	lr

080045c8 <_init>:
 80045c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ca:	46c0      	nop			; (mov r8, r8)
 80045cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ce:	bc08      	pop	{r3}
 80045d0:	469e      	mov	lr, r3
 80045d2:	4770      	bx	lr

080045d4 <_fini>:
 80045d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045da:	bc08      	pop	{r3}
 80045dc:	469e      	mov	lr, r3
 80045de:	4770      	bx	lr
